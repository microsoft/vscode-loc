{
	"": [
		"--------------------------------------------------------------------------------------------",
		"Copyright (c) Microsoft Corporation. All rights reserved.",
		"Licensed under the MIT License. See License.txt in the project root for license information.",
		"--------------------------------------------------------------------------------------------",
		"Do not edit this file. It is machine generated."
	],
	"version": "1.0.0",
	"contents": {
		"dist/languageFeatures/codeLens/baseCodeLensProvider": {
			"referenceErrorLabel": "참조를 확인할 수 없음"
		},
		"dist/languageFeatures/codeLens/implementationsCodeLens": {
			"manyImplementationLabel": "구현 {0}개",
			"oneImplementationLabel": "구현 1개"
		},
		"dist/languageFeatures/codeLens/referencesCodeLens": {
			"manyReferenceLabel": "참조 {0}개",
			"oneReferenceLabel": "참조 1개"
		},
		"dist/languageFeatures/completions": {
			"acquiringTypingsDetail": "IntelliSense에 대한 typings 정의를 가져오는 중입니다.",
			"acquiringTypingsLabel": "입력을 가져오는 중...",
			"autoImportLabel": "{0}에서 자동으로 가져오기",
			"selectCodeAction": "적용할 코드 동작 선택"
		},
		"dist/languageFeatures/directiveCommentCompletions": {
			"ts-check": "JavaScript 파일에서 의미 검사를 사용합니다. 파일의 최상단에 있어야 합니다.",
			"ts-expect-error": "파일 다음 줄에서 @ts-check 오류를 억제하며 하나 이상이 존재할 것으로 예상합니다.",
			"ts-ignore": "파일의 다음 행에서 @ts-check 오류를 억제합니다.",
			"ts-nocheck": "JavaScript 파일에서 의미 검사를 사용하지 않습니다. 파일의 최상단에 있어야 합니다."
		},
		"dist/languageFeatures/fileReferences": {
			"error.noResource": "파일 참조를 찾지 못했습니다. 리소스가 제공되지 않았습니다.",
			"error.unknownFile": "파일 참조를 찾지 못했습니다. 알 수 없는 파일 형식입니다.",
			"error.unsupportedLanguage": "파일 참조를 찾지 못했습니다. 지원되지 않는 파일 형식입니다.",
			"error.unsupportedVersion": "파일 참조를 찾지 못했습니다. TypeScript 4.2 이상이 필요합니다.",
			"progress.title": "파일 참조를 찾는 중"
		},
		"dist/languageFeatures/fixAll": {
			"autoFix.label": "모두 수정",
			"autoFix.missingImports.label": "모든 누락된 가져오기 추가",
			"autoFix.unused.label": "사용하지 않는 모든 코드 제거"
		},
		"dist/languageFeatures/jsDocCompletions": {
			"typescript.jsDocCompletionItem.documentation": "JSDoc 주석"
		},
		"dist/languageFeatures/organizeImports": {
			"organizeImportsAction.title": "가져오기 구성",
			"sortImportsAction.title": "가져오기 정렬"
		},
		"dist/languageFeatures/quickFix": {
			"fixAllInFileLabel": "{0} (파일에서 모두 수정)"
		},
		"dist/languageFeatures/refactor": {
			"extractConstant.disabled.reason": "현재 선택 영역을 추출할 수 없습니다.",
			"extractConstant.disabled.title": "상수로 추출",
			"extractFunction.disabled.reason": "현재 선택 영역을 추출할 수 없습니다.",
			"extractFunction.disabled.title": "함수로 추출",
			"refactor.documentation.title": "JS/TS 리팩터링에 대해 자세히 알아보기",
			"refactoringFailed": "리팩터링을 적용할 수 없습니다."
		},
		"dist/languageFeatures/rename": {
			"fileRenameFail": "파일 이름을 바꾸는 중 오류 발생"
		},
		"dist/languageFeatures/updatePathsOnRename": {
			"accept.title": "예",
			"always.title": "항상 자동으로 가져오기 업데이트",
			"moreFile": "...1개의 추가 파일이 표시되지 않음",
			"moreFiles": "...{0}개의 추가 파일이 표시되지 않음",
			"never.title": "자동으로 가져오기를 업데이트하지 않음",
			"prompt": "'{0}'에 대한 가져오기를 업데이트하시겠습니까?",
			"promptMoreThanOne": "다음 {0} 파일에 대한 가져오기를 업데이트하시겠습니까?",
			"reject.title": "아니요",
			"renameProgress.title": "JS/TS 가져오기 업데이트 확인"
		},
		"dist/task/taskProvider": {
			"badTsConfig": "tasks.json의 TypeScript 작업에 \"\\\\\"가 포함되어 있습니다. TypeScript 작업 tsconfig는 \"/\"를 사용해야 합니다.",
			"buildAndWatchTscLabel": "감시 - {0}",
			"buildTscLabel": "빌드 - {0}"
		},
		"dist/tsServer/serverProcess.electron": {
			"noServerFound": "경로 {0}이(가) 올바른 tsserver 설치를 가리키지 않습니다. 포함된 TypeScript 버전을 대신 사용합니다."
		},
		"dist/tsServer/versionManager": {
			"allow": "허용",
			"dismiss": "해제",
			"learnMore": "TypeScript 버전 관리에 대한 자세한 정보",
			"promptUseWorkspaceTsdk": "이 작업 영역에는 TypeScript 버전이 포함되어 있습니다. TypeScript 및 JavaScript 언어 기능에 작업 영역 TypeScript 버전을 사용하시겠습니까?",
			"selectTsVersion": "JavaScript 및 TypeScript 언어 기능에 사용되는 TypeScript 버전 선택",
			"suppress prompt": "이 작업 영역에서 안 함",
			"useVSCodeVersionOption": "VS Code의 버전 사용",
			"useWorkspaceVersionOption": "작업 영역 버전 사용"
		},
		"dist/typescriptServiceClient": {
			"noServerFound": "경로 {0}이(가) 올바른 tsserver 설치를 가리키지 않습니다. 포함된 TypeScript 버전을 대신 사용합니다.",
			"openTsServerLog.openFileFailedFailed": "TS 서버 로그 파일을 열 수 없습니다.",
			"serverDied": "TypeScript 언어 서비스가 지난 5분 동안 예기치 않게 5번 종료되었습니다.",
			"serverDiedAfterStart": "TypeScript 언어 서비스가 시작된 직후 5번 종료되었습니다. 서비스가 다시 시작되지 않습니다.",
			"serverDiedOnce": "TypeScript 언어 서비스가 예기치 않게 종료되었습니다.",
			"serverDiedReportIssue": "문제 신고",
			"serverExitedWithError": "오류가 발생하여 TypeScript 언어 서버가 종료되었습니다. 오류 메시지: {0}",
			"serverLoading.progress": "JS/TS 언어 기능 초기화",
			"typescript.openTsServerLog.enableAndReloadOption": "로깅 사용 및 TS 서버 다시 시작",
			"typescript.openTsServerLog.loggingNotEnabled": "TS 서버 로깅이 꺼져 있습니다. `typescript.tsserver.log`를 설정하고 TS 서버를 다시 시작하여 로깅을 사용하도록 설정하세요.",
			"typescript.openTsServerLog.noLogFile": "TS 서버에서 로깅을 시작하지 않았습니다.",
			"usingOldTsVersion.detail": "작업 공간에서 이전 버전의 TypeScript({0})를 사용하고 있습니다.\r\n\r\n문제를 보고하기 전에 최신 안정적인 TypeScript 릴리스를 사용하도록 작업영역을 업데이트하여 버그가 아직 수정되지 않았는지 확인하세요.",
			"usingOldTsVersion.title": "TypeScript 버전을 업데이트하세요."
		},
		"dist/ui/intellisenseStatus": {
			"pending.detail": "IntelliSense 상태 로드 중",
			"resolved.command.title.createJsconfig": "jsconfig 생성",
			"resolved.command.title.createTsconfig": "tsconfig 만들기",
			"resolved.command.title.open": "구성 파일 열기",
			"resolved.detail.noJsConfig": "jsconfig 없음",
			"resolved.detail.noTsConfig": "tsconfig 없음",
			"statusItem.name": "JS/TS IntelliSense 상태",
			"syntaxOnly.command.title.learnMore": "자세한 정보",
			"syntaxOnly.detail": "프로젝트 전체 IntelliSense를 사용할 수 없음",
			"syntaxOnly.text": "부분 모드"
		},
		"dist/ui/versionStatus": {
			"versionStatus.command": "버전 선택",
			"versionStatus.detail": "TypeScript 버전",
			"versionStatus.name": "TypeScript 버전"
		},
		"dist/utils/api": {
			"invalidVersion": "잘못 된 버전"
		},
		"dist/utils/logger": {
			"channelName": "TypeScript"
		},
		"dist/utils/tsconfig": {
			"typescript.configureJsconfigQuickPick": "jsconfig.json 구성",
			"typescript.configureTsconfigQuickPick": "tsconfig.json 구성",
			"typescript.noJavaScriptProjectConfig": "파일이 JavaScript 프로젝트의 일부가 아닙니다. 자세히 알아보려면 [여기]({0})를 클릭하세요.",
			"typescript.noTypeScriptProjectConfig": "파일이 TypeScript 프로젝트의 일부가 아닙니다. 자세히 알아보려면 [여기]({0})를 클릭하세요.",
			"typescript.projectConfigCouldNotGetInfo": "TypeScript 또는 JavaScript 프로젝트를 확인할 수 없습니다.",
			"typescript.projectConfigNoWorkspace": "TypeScript 또는 JavaScript 프로젝트를 사용하려면 VS Code의 폴더를 여세요.",
			"typescript.projectConfigUnsupportedFile": "TypeScript 또는 JavaScript 프로젝트를 확인할 수 없습니다. 지원되지 않는 파일 형식"
		},
		"package": {
			"codeActions.refactor.extract.constant.description": "식을 상수로 추출합니다.",
			"codeActions.refactor.extract.constant.title": "상수 추출",
			"codeActions.refactor.extract.function.description": "메서드 또는 함수에 대한 식추출.",
			"codeActions.refactor.extract.function.title": "추출 함수",
			"codeActions.refactor.extract.interface.description": "인터페이스에 대한 형식을 추출합니다.",
			"codeActions.refactor.extract.interface.title": "인터페이스 추출",
			"codeActions.refactor.extract.type.description": "형식 별칭에 대한 추출 형식입니다.",
			"codeActions.refactor.extract.type.title": "추출 유형",
			"codeActions.refactor.move.newFile.description": "식을 새 파일로 이동합니다.",
			"codeActions.refactor.move.newFile.title": "새 파일로 이동",
			"codeActions.refactor.rewrite.arrow.braces.description": "화살표 함수에서 중괄호를 추가하거나 제거합니다.",
			"codeActions.refactor.rewrite.arrow.braces.title": "화살표 중괄호 다시 쓰기",
			"codeActions.refactor.rewrite.export.description": "기본 내보내기와 명명된 내보내기 간에 변환합니다.",
			"codeActions.refactor.rewrite.export.title": "내보내기 변환",
			"codeActions.refactor.rewrite.import.description": "명명된 가져오기와 네임스페이스 가져오기 간에 변환합니다.",
			"codeActions.refactor.rewrite.import.title": "가져오기 변환",
			"codeActions.refactor.rewrite.parameters.toDestructured.title": "매개 변수를 구조 파괴 개체로 변환",
			"codeActions.refactor.rewrite.property.generateAccessors.description": "'get' 및 'set' 접근자 생성",
			"codeActions.refactor.rewrite.property.generateAccessors.title": "접근자 생성",
			"codeActions.source.organizeImports.title": "가져오기 구성",
			"configuration.implicitProjectConfig.checkJs": "JavaScript 파일의 의미 체계 검사를 사용하거나 사용하지 않도록 설정합니다. 기존 `jsconfig.json` 또는 `tsconfig.json` 파일은 이 설정을 재정의합니다.",
			"configuration.implicitProjectConfig.experimentalDecorators": "프로젝트의 일부가 아닌 JavaScript 파일에서 'experimentalDecorators'를 사용하거나 사용하지 않도록 설정합니다. 기존 `jsconfig.json` 또는 `tsconfig.json` 파일은 이 설정을 재정의합니다.",
			"configuration.implicitProjectConfig.strictFunctionTypes": "프로젝트의 일부가 아닌 JavaScript 및 TypeScript 파일에서 [strict 함수 형식](https://www.typescriptlang.org/tsconfig#strictFunctionTypes)을 사용하거나 사용하지 않도록 설정합니다. 기존 `jsconfig.json` 또는 `tsconfig.json` 파일은 이 설정을 재정의합니다.",
			"configuration.implicitProjectConfig.strictNullChecks": "프로젝트의 일부가 아닌 JavaScript 및 TypeScript 파일에서 [strict null 검사](https://www.typescriptlang.org/tsconfig#strictNullChecks)를 사용하거나 사용하지 않도록 설정합니다. 기존 `jsconfig.json` 또는 `tsconfig.json` 파일은 이 설정을 재정의합니다.",
			"configuration.inlayHints.enumMemberValues.enabled": "열거형 선언의 멤버 값에 대한 인레이 힌트 활성화/비활성화:\r\n```typescript\r\n\r\nenum MyValue {\r\n A /* = 0 */;\r\n B /* = 1 */; \r\n}\r\n \r\n```\r\n작업 영역에서 TypeScript 4.4 이상을 사용해야 합니다.",
			"configuration.inlayHints.functionLikeReturnTypes.enabled": "함수 서명의 암시적 반환 유형에 대한 인레이 힌트 활성화/비활성화:\r\n```typescript\r\n\r\nfunction foo() /* :number */ {\r\n return Date.now();\r\n } \r\n \r\n```\r\n작업 영역에서 TypeScript 4.4 이상을 사용해야 합니다.",
			"configuration.inlayHints.parameterNames.enabled": "매개 변수 이름에 대한 인레이 힌트 활성화/비활성화:\r\n```typescript\r\n\r\nparseInt(/* str: */ '123', /* radix: */ 8)\r\n \r\n```\r\n작업 영역에서 TypeScript 4.4 이상을 사용해야 합니다.",
			"configuration.inlayHints.parameterNames.suppressWhenArgumentMatchesName": "텍스트가 매개변수 이름과 동일한 인수에 대해 매개변수 이름 힌트를 표시하지 않습니다.",
			"configuration.inlayHints.parameterTypes.enabled": "암시적 매개 변수 유형에 대한 인레이 힌트 활성화/비활성화:\r\n```typescript\r\n\r\nel.addEventListener('click', e /* :MouseEvent */ => ...)\r\n \r\n ```\r\n작업 영역에서 TypeScript 4.4 이상을 사용해야 합니다.",
			"configuration.inlayHints.propertyDeclarationTypes.enabled": "속성 선언의 암시적 유형에 대한 인레이 힌트 활성화/비활성화:\r\n```typescript\r\n\r\nclass Foo {\r\n prop /* :number */ = Date.now();\r\n}\r\n \r\n```\r\n작업 영역에서 TypeScript 4.4 이상을 사용해야 합니다.",
			"configuration.inlayHints.variableTypes.enabled": "암시적 변수 유형에 대한 인레이 힌트 활성화/비활성화:\r\n```typescript\r\n\r\nconst foo /* :number */ = Date.now();\r\n \r\n```\r\n 작업 영역에서 TypeScript 4.4 이상을 사용해야 합니다.",
			"configuration.javascript.checkJs.checkJs.deprecation": "이 설정은 사용되지 않으며 대신 `js/ts.implicitProjectConfig.checkJs`가 사용됩니다.",
			"configuration.javascript.checkJs.experimentalDecorators.deprecation": "이 설정은 사용되지 않으며 대신 `js/ts.implicitProjectConfig.experimentalDecorators`가 사용됩니다.",
			"configuration.suggest.autoImports": "자동 가져오기 제안을 사용하거나 사용하지 않도록 설정합니다.",
			"configuration.suggest.classMemberSnippets.enabled": "클래스 멤버에 대한 코드 조각 완성을 사용하거나 사용하지 않도록 설정합니다. 작업 영역에서 TypeScript 4.5+를 사용해야 합니다.",
			"configuration.suggest.completeFunctionCalls": "매개 변수 서명으로 함수를 완료하세요.",
			"configuration.suggest.completeJSDocs": "제안을 사용하거나 사용하지 않도록 설정하여 JSDoc 주석을 완료합니다.",
			"configuration.suggest.includeAutomaticOptionalChainCompletions": "선택적 체인 호출을 삽입하는 잠재적으로 정의되지 않은 값에 대한 완료 표시를 사용하거나 사용하지 않도록 설정합니다. 사용하려면 TS 3.7 이상 및 엄격한 null 검사가 필요합니다.",
			"configuration.suggest.includeCompletionsForImportStatements": "부분적으로 입력된 import 문에서 import 스타일 자동 완성을 사용하거나 사용하지 않도록 설정합니다. 작업 영역에서 TypeScript 4.3 이상을 사용해야 합니다.",
			"configuration.suggest.includeCompletionsWithSnippetText": "TS 서버에서 코드 조각 완성을 사용하거나 사용하지 않도록 설정합니다. 작업 영역에서 TypeScript 4.3 이상을 사용해야 합니다.",
			"configuration.suggest.jsdoc.generateReturns": "JSDoc 템플릿에 대해 `@return` 주석 생성을 사용하거나 사용하지 않도록 설정합니다. 작업 영역에서 TypeScript 4.2 이상을 사용해야 합니다.",
			"configuration.suggest.names": "JavaScrip 제안에서 파일의 고유한 이름 포함을 사용하거나 사용하지 않도록 설정합니다. 이름 제안은 `@ts-check` 또는 `checkJs`를 사용하여 의미 체계적으로 확인되는 JavaScript 코드에서 항상 사용하지 않도록 설정됩니다.",
			"configuration.suggest.paths": "import 문 및 요청 호출의 경로에 대한 제안을 사용하거나 사용하지 않도록 설정합니다.",
			"configuration.surveys.enabled": "VS Code의 Javascript 및 Typescript 지원을 개선하는 데 도움이 되는 가끔 있는 설문을 사용하거나 사용하지 않도록 설정합니다.",
			"configuration.tsserver.experimental.enableProjectDiagnostics": "(실험) 프로젝트 전체 오류 보고를 사용합니다.",
			"configuration.tsserver.maxTsServerMemory": "TypeScript 서버 프로세스에 할당할 최대 메모리 양(MB)입니다.",
			"configuration.tsserver.useSeparateSyntaxServer": "구문 관련 작업(예: 접기 계산 또는 문서 기호 컴퓨팅)에 더 빨리 응답할 수 있는 별도 TypeScript 서버의 생성을 활성화/비활성화합니다. 작업 영역에서 TypeScript 3.4.0 이상을 사용해야 합니다.",
			"configuration.tsserver.useSeparateSyntaxServer.deprecation": "이 설정은 `typescript.tsserver.useSyntaxServer`를 위해 더 이상 사용되지 않습니다.",
			"configuration.tsserver.useSyntaxServer": "TypeScript가 컴퓨팅 코드 접기와 같은 구문 관련 작업을 보다 빠르게 처리하기 위해 전용 서버를 시작하는지 여부를 제어합니다.",
			"configuration.tsserver.useSyntaxServer.always": "경량 구문 서버를 사용하여 모든 IntelliSense 작업을 처리하세요. 이 구문 서버는 열린 파일에 대해서만 IntelliSense를 제공할 수 있습니다.",
			"configuration.tsserver.useSyntaxServer.auto": "전체 서버와 구문 작업 전용의 경량 서버를 모두 생성하세요. 구문 서버는 프로젝트를 로드하는 동안 구문 작업을 가속화하고 IntelliSense를 제공하는 데 사용됩니다.",
			"configuration.tsserver.useSyntaxServer.never": "전용 구문 서버를 사용하지 마세요. 단일 서버를 사용하여 모든 IntelliSense 작업을 처리하세요.",
			"configuration.tsserver.watchOptions": "파일 및 디렉터리 추적에 사용할 감시 전략을 구성합니다. 작업 영역에서 TypeScript 3.8 이상을 사용해야 합니다.",
			"configuration.tsserver.watchOptions.fallbackPolling": "파일 시스템 이벤트를 사용하는 경우, 이 옵션은 시스템에 기본 파일 감시자가 부족하고/부족하거나 시스템에서 기본 파일 감시자를 지원하지 않는 경우 사용되는 폴링 전략을 지정합니다.",
			"configuration.tsserver.watchOptions.fallbackPolling.dynamicPriorityPolling ": "자주 수정되지 않는 파일이 덜 자주 검사되는 동적 큐를 사용합니다.",
			"configuration.tsserver.watchOptions.fallbackPolling.fixedPollingInterval": "모든 파일의 변경 사항을 고정된 간격으로 초당 여러 번 확인합니다.",
			"configuration.tsserver.watchOptions.fallbackPolling.priorityPollingInterval": "모든 파일에서 1초에 여러 번 변경 내용을 확인하지만, 휴리스틱을 사용하여 특정 형식의 파일은 다른 파일보다 덜 자주 확인합니다.",
			"configuration.tsserver.watchOptions.synchronousWatchDirectory": "디렉터리에서 지연 감시를 사용하지 않습니다. 지연 감시는 많은 파일 변경이 한꺼번에 발생하는 경우(예: 실행 중인 npm install에서 node_modules 변경) 유용하지만, 덜 일반적인 설정의 경우 이 플래그를 사용하여 지연 감시를 사용하지 않도록 설정할 수 있습니다.",
			"configuration.tsserver.watchOptions.watchDirectory": "재귀 파일 감시 기능이 없는 시스템에서 전체 디렉터리 트리를 감시하는 방법에 대한 전략입니다.",
			"configuration.tsserver.watchOptions.watchDirectory.dynamicPriorityPolling": "수정이 자주 발생하지 않는 디렉터리가 덜 자주 검사되는 동적 큐를 사용합니다.",
			"configuration.tsserver.watchOptions.watchDirectory.fixedChunkSizePolling": "정기적으로 디렉터리를 청크 단위로 폴링합니다. 작업 영역에서 TypeScript 4.3 이상을 사용해야 합니다.",
			"configuration.tsserver.watchOptions.watchDirectory.fixedPollingInterval": "모든 디렉터리에서 고정된 간격으로 초당 여러 번 변경 내용을 확인합니다.",
			"configuration.tsserver.watchOptions.watchDirectory.useFsEvents": "디렉터리 변경에 운영 체제/파일 시스템의 기본 이벤트를 사용하려고 시도합니다.",
			"configuration.tsserver.watchOptions.watchFile": "개별 파일을 감시하는 방법에 대한 전략입니다.",
			"configuration.tsserver.watchOptions.watchFile.dynamicPriorityPolling": "자주 수정되지 않는 파일이 덜 자주 검사되는 동적 큐를 사용합니다.",
			"configuration.tsserver.watchOptions.watchFile.fixedChunkSizePolling": "정기적으로 파일을 청크 단위로 폴링합니다. 작업 영역에서 TypeScript 4.3 이상을 사용해야 합니다.",
			"configuration.tsserver.watchOptions.watchFile.fixedPollingInterval": "모든 파일의 변경 내용을 고정된 간격으로 초당 여러 번 확인합니다.",
			"configuration.tsserver.watchOptions.watchFile.priorityPollingInterval": "모든 파일의 변경 내용을 1초에 여러 번 확인하지만, 휴리스틱을 사용하여 특정 형식의 파일은 다른 파일보다 덜 자주 확인합니다.",
			"configuration.tsserver.watchOptions.watchFile.useFsEvents": "파일 변경에 운영 체제/파일 시스템의 기본 이벤트를 사용하려고 시도합니다.",
			"configuration.tsserver.watchOptions.watchFile.useFsEventsOnParentDirectory": "운영 체제/파일 시스템의 기본 이벤트를 사용하여 파일이 포함된 디렉터리의 대한 변경 내용을 수신합니다. 그러면 파일 감시자를 적게 사용할 수 있지만 정확도가 떨어집니다.",
			"configuration.typescript": "TypeScript",
			"description": "JavaScript 및 TypeScript에 대한 다양한 언어 지원을 제공합니다.",
			"displayName": "TypeScript 및 JavaScript 언어 기능",
			"format.insertSpaceAfterCommaDelimiter": "쉼표 구분 기호 뒤에 오는 공백 처리를 정의합니다.",
			"format.insertSpaceAfterConstructor": "생성자 키워드 뒤에 오는 공백 처리를 정의합니다.",
			"format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": "익명 함수의 function 키워드 뒤에 오는 공백 처리를 정의합니다.",
			"format.insertSpaceAfterKeywordsInControlFlowStatements": "제어 흐름 문의 키워드 뒤에 오는 공백 처리를 정의합니다.",
			"format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": "비어 있는 여는 중괄호 뒤와 닫는 중괄호 앞의 공백 처리를 정의합니다.",
			"format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": "JSX 식의 여는 중괄호 뒤와 닫는 중괄호 앞의 공백 처리를 정의합니다.",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": "비어 있지 않은 여는 중괄호 뒤와 닫는 중괄호 앞의 공백 처리를 정의합니다.",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": "비어 있지 않은 여는 대괄호 뒤와 닫는 대괄호 앞에 오는 공백 처리를 정의합니다.",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": "비어 있지 않은 여는 괄호 뒤와 닫는 괄호 앞에 오는 공백 처리를 정의합니다.",
			"format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": "템플릿 문자열의 여는 중괄호 뒤와 닫는 중괄호 앞의 공백 처리를 정의합니다.",
			"format.insertSpaceAfterSemicolonInForStatements": "for 문에서 세미콜론 뒤에 오는 공백 처리를 정의합니다.",
			"format.insertSpaceAfterTypeAssertion": "TypeScript에서 형식 어설션 뒤에 오는 공백 처리를 정의합니다.",
			"format.insertSpaceBeforeAndAfterBinaryOperators": "이항 연산자 뒤에 오는 공백 처리를 정의합니다.",
			"format.insertSpaceBeforeFunctionParenthesis": "함수 인수 괄호 앞에 오는 공백 처리를 정의합니다.",
			"format.placeOpenBraceOnNewLineForControlBlocks": "제어 블록의 새 줄에 여는 중괄호를 넣을지 정의합니다.",
			"format.placeOpenBraceOnNewLineForFunctions": "함수의 새 줄에 여는 중괄호를 넣을지 정의합니다.",
			"format.semicolons": "선택적 세미콜론 처리를 정의합니다. 작업 영역에서 TypeScript 3.7 이상을 사용해야 합니다.",
			"format.semicolons.ignore": "세미콜론을 삽입하거나 제거하지 마세요.",
			"format.semicolons.insert": "문 끝에 세미콜론을 삽입합니다.",
			"format.semicolons.remove": "불필요한 세미콜론을 제거합니다.",
			"goToProjectConfig.title": "프로젝트 구성으로 이동",
			"inlayHints.parameterNames.all": "리터럴 및 비리터럴 인수에 대한 매개변수 이름 힌트를 활성화합니다.",
			"inlayHints.parameterNames.literals": "리터럴 인수에 대해서만 매개변수 이름 힌트를 활성화합니다.",
			"inlayHints.parameterNames.none": "매개변수 이름 힌트를 비활성화합니다.",
			"javascript.format.enable": "기본 JavaScript 포맷터를 사용하거나 사용하지 않습니다.",
			"javascript.referencesCodeLens.enabled": "JavaScript 파일에서 CodeLense 참조를 사용/사용 안 함으로 설정합니다.",
			"javascript.referencesCodeLens.showOnAllFunctions": "JavaScript 파일의 모든 기능에 대한 참조 CodeLens를 사용/사용하지 않도록 설정합니다.",
			"javascript.suggestionActions.enabled": "편집기에서 JavaScript 파일에 대한 제안 진단을 사용하거나 사용하지 않도록 설정합니다.",
			"javascript.validate.enable": "JavaScript 유효성 검사를 사용하거나 사용하지 않습니다.",
			"reloadProjects.title": "프로젝트 다시 로드",
			"taskDefinition.tsconfig.description": "TS 빌드를 정의하는 tsconfig 파일입니다.",
			"typescript.autoClosingTags": "JSX 태그의 자동 닫기를 사용하거나 사용하지 않도록 설정합니다.",
			"typescript.check.npmIsInstalled": "[자동 형식 인식]을 위해 npm이 설치되어 있는지 확인하세요(https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).",
			"typescript.disableAutomaticTypeAcquisition": "[자동 형식 인식](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition)을 사용하지 않도록 설정합니다. 자동 형식 인식은 npm에서 '@types' 패키지를 가져와 외부 라이브러리에 대한 IntelliSense를 개선합니다.",
			"typescript.enablePromptUseWorkspaceTsdk": "Intellisense 작업 영역에서 구성된 TypeScript 버전을 사용하라는 메시지를 사용자에게 표시할 수 있습니다.",
			"typescript.findAllFileReferences": "파일 참조 찾기",
			"typescript.format.enable": "기본 TypeScript 포맷터를 사용하거나 사용하지 않습니다.",
			"typescript.implementationsCodeLens.enabled": "CodeLens 구현을 사용하거나 사용하지 않습니다. 이 CodeLens는 인터페이스의 구현자를 표시합니다.",
			"typescript.locale": "JavaScript 및 TypeScript 오류를 보고하는 데 사용되는 로케일을 설정합니다. 기본값은 VS Code의 로케일을 사용하는 것입니다.",
			"typescript.npm": "[자동 형식 인식]에 사용되는 npm 실행 파일의 경로를 지정합니다(https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).",
			"typescript.openTsServerLog.title": "TS 서버 로그 열기",
			"typescript.preferences.importModuleSpecifier": "자동 가져오기의 기본 경로 스타일입니다.",
			"typescript.preferences.importModuleSpecifier.nonRelative": "`jsconfig.json` / `tsconfig.json`에 구성된 `baseUrl` 또는 `paths`를 기반으로 상대적이지 않은 가져오기를 사용합니다.",
			"typescript.preferences.importModuleSpecifier.projectRelative": "상대적 가져오기 경로가 패키지 또는 프로젝트 디렉터리를 나가는 경우에만 상대적이지 않은 가져오기를 사용합니다. 작업 영역에서 TypeScript 4.2 이상을 사용해야 합니다.",
			"typescript.preferences.importModuleSpecifier.relative": "가져온 파일 위치의 상대 경로를 사용합니다.",
			"typescript.preferences.importModuleSpecifier.shortest": "상대적 가져오기보다 적은 경로 세그먼트가 포함된 가져오기가 사용 가능한 경우에만 상대적이지 않은 가져오기를 사용합니다.",
			"typescript.preferences.importModuleSpecifierEnding": "자동 가져오기에 대한 기본 경로 종료입니다. 작업 영역에서 TypeScript 4.5 이상을 사용해야 합니다.",
			"typescript.preferences.importModuleSpecifierEnding.auto": "프로젝트 설정을 사용하여 기본값을 선택합니다.",
			"typescript.preferences.importModuleSpecifierEnding.index": "`./component/index.js`를 `./component/index`로 줄입니다.",
			"typescript.preferences.importModuleSpecifierEnding.js": "경로 끝을 줄이지 마세요. `.js` 확장명을 포함하세요.",
			"typescript.preferences.importModuleSpecifierEnding.minimal": "`./component/index.js`를 `./component`로 줄입니다.",
			"typescript.preferences.includePackageJsonAutoImports": "사용할 수 있는 자동 가져오기 기능의 'package.json' 종속성을 검색하도록/하지 않도록 설정합니다.",
			"typescript.preferences.includePackageJsonAutoImports.auto": "예상 성능 영향에 따라 종속성을 검색합니다.",
			"typescript.preferences.includePackageJsonAutoImports.off": "종속성을 검색하지 않습니다.",
			"typescript.preferences.includePackageJsonAutoImports.on": "종속성을 항상 검색합니다.",
			"typescript.preferences.jsxAttributeCompletionStyle": "JSX 특성 완성에 선호되는 스타일입니다.",
			"typescript.preferences.jsxAttributeCompletionStyle.auto": "prop 유형을 기준으로 특성 이름 뒤에 `={}` 또는 `=\"\"`를 삽입합니다.",
			"typescript.preferences.jsxAttributeCompletionStyle.braces": "속성 이름 뒤에 `={}`를 삽입하세요.",
			"typescript.preferences.jsxAttributeCompletionStyle.none": "특성 이름만 삽입하세요.",
			"typescript.preferences.quoteStyle": "빠른 수정에 사용할 기본 따옴표 스타일은 '작은' 따옴표, '큰' 따옴표 또는 '자동'입니다. '자동'이면 기존 가져오기에서 따옴표 형식이 유추됩니다.",
			"typescript.preferences.renameShorthandProperties.deprecationMessage": "'typescript.preferences.renameShorthandProperties' 설정 대신 'typescript.preferences.useAliasesForRenames'가 사용됩니다.",
			"typescript.preferences.useAliasesForRenames": "이름을 바꾸는 동안 개체 줄임 속성의 별칭 소개를 사용하거나 사용하지 않도록 설정합니다. 작업 영역에서 TypeScript 3.4 이상을 사용해야 합니다.",
			"typescript.problemMatchers.tsc.label": "TypeScript 문제",
			"typescript.problemMatchers.tscWatch.label": "TypeScript 문제(감시 모드)",
			"typescript.referencesCodeLens.enabled": "TypeScript 파일에서 참조 CodeLens를 사용하거나 사용하지 않도록 설정합니다.",
			"typescript.referencesCodeLens.showOnAllFunctions": "TypeScript 파일의 모든 기능에 대한 참조 CodeLens를 사용/사용하지 않도록 설정합니다.",
			"typescript.reportStyleChecksAsWarnings": "스타일 검사를 경고로 보고합니다.",
			"typescript.restartTsServer": "TS 서버 다시 시작",
			"typescript.selectTypeScriptVersion.title": "TypeScript 버전 선택...",
			"typescript.suggest.enabled": "자동 완성 제안을 사용하거나 사용하지 않도록 설정합니다.",
			"typescript.suggestionActions.enabled": "편집기에서 TypeScript 파일에 대한 제안 진단을 사용하거나 사용하지 않도록 설정합니다.",
			"typescript.tsc.autoDetect": "tsc 작업의 자동 검색을 제어합니다.",
			"typescript.tsc.autoDetect.build": "단일 실행 컴파일 작업만 만듭니다.",
			"typescript.tsc.autoDetect.off": "이 기능을 사용하지 않도록 설정합니다.",
			"typescript.tsc.autoDetect.on": "빌드 및 조사식 작업을 모두 만듭니다.",
			"typescript.tsc.autoDetect.watch": "컴파일 및 조사식 작업만 만듭니다.",
			"typescript.tsdk.desc": "IntelliSense에 사용할 TypeScript 설치에서 tsserver 및 `lib*.d.ts` 파일의 폴더 경로를 지정합니다. 예: `./node_modules/typescript/lib`.\r\n\r\n- 사용자 설정으로 지정한 경우 'typescript.tsdk'의 TypeScript 버전이 자동으로 기본 제공 TypeScript 버전을 바꿉니다.\r\n- 작업 영역 설정으로 지정한 경우 'typescript.tsdk'를 사용하여 'TypeScript: TypeScript 버전 선택' 명령으로 IntelliSense용 TypeScript의 해당 작업 영역 버전을 사용하도록 전환할 수 있습니다.\r\n\r\nTypeScript 버전 관리에 대한 자세한 내용은 [TypeScript 설명서](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions)를 참조하세요.",
			"typescript.tsserver.enableTracing": "디렉터리에 대해 TS 서버 성능 추적을 사용하도록 설정합니다. 이 추적 파일은 TS 서버 성능 문제를 진단하는 데 사용될 수 있습니다. 로그에는 파일 경로, 소스 코드 및 프로젝트에서 잠재적으로 중요한 기타 정보가 포함될 수 있습니다.",
			"typescript.tsserver.log": "파일에 대해 TS 서버 로깅을 사용하도록 설정합니다. 이 로그는 TS 서버 문제를 진단하는 데 사용될 수 있습니다. 로그에는 파일 경로, 소스 코드 및 프로젝트에서 잠재적으로 중요한 기타 정보가 포함될 수 있습니다.",
			"typescript.tsserver.pluginPaths": "TypeScript 언어 서비스 플러그 인을 검색할 추가 경로입니다.",
			"typescript.tsserver.pluginPaths.item": "절대 또는 상대 경로입니다. 상대 경로는 작업 영역 폴더를 기준으로 확인됩니다.",
			"typescript.tsserver.trace": "TS 서버로 전송한 메시지 추적을 사용하도록 설정합니다. 이 추적은 TS 서버 문제를 진단하는 데 사용될 수 있습니다. 추적에는 파일 경로, 소스 코드 및 프로젝트에서 잠재적으로 중요한 기타 정보가 포함될 수 있습니다.",
			"typescript.updateImportsOnFileMove.enabled": "VS Code에서 파일을 이동하거나 이름을 바꿀 때 가져오기 경로의 자동 업데이트를 사용하거나 사용하지 않도록 설정합니다.",
			"typescript.updateImportsOnFileMove.enabled.always": "항상 경로를 자동으로 업데이트합니다.",
			"typescript.updateImportsOnFileMove.enabled.never": "경로 이름을 바꾸지 않고 메시지를 표시하지 않습니다.",
			"typescript.updateImportsOnFileMove.enabled.prompt": "이름을 바꿀 때마다 프롬프트를 표시합니다.",
			"typescript.validate.enable": "TypeScript 유효성 검사를 사용하거나 사용하지 않습니다.",
			"typescript.workspaceSymbols.scope": "[작업 영역에서 기호로 이동](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name)하여 검색할 파일을 제어합니다.",
			"typescript.workspaceSymbols.scope.allOpenProjects": "열려 있는 모든 JavaScript 또는 TypeScript 프로젝트에서 기호를 검색합니다. 작업 영역에서 TypeScript 3.9 이상을 사용해야 합니다.",
			"typescript.workspaceSymbols.scope.currentProject": "현재 JavaScript 또는 TypeScript 프로젝트에서만 기호를 검색합니다.",
			"virtualWorkspaces": "가상 작업 공간에서는 파일에서 참조를 확인하고 찾는 기능이 지원되지 않습니다.",
			"workspaceTrust": "확장 기능은 작업 영역에서 지정한 코드를 실행하기 때문에 작업 영역 버전을 사용할 때 작업 영역 신뢰가 필요합니다."
		}
	}
}