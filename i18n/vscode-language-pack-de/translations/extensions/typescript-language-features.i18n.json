{
	"": [
		"--------------------------------------------------------------------------------------------",
		"Copyright (c) Microsoft Corporation. All rights reserved.",
		"Licensed under the MIT License. See License.txt in the project root for license information.",
		"--------------------------------------------------------------------------------------------",
		"Do not edit this file. It is machine generated."
	],
	"version": "1.0.0",
	"contents": {
		"package": {
			"displayName": "TypeScript- und JavaScript-Sprachfeatures",
			"description": "Bietet umfangreiche Sprachunterstützung für JavaScript und TypeScript.",
			"workspaceTrust": "Für die Erweiterung ist die Arbeitsbereichsvertrauensstellung erforderlich, wenn die Arbeitsbereichsversion verwendet wird, da sie vom Arbeitsbereich angegebene Code ausführt.",
			"virtualWorkspaces": "In virtuellen Arbeitsbereichen wird das Auflösen und Suchen von Verweisen in Dateien nicht unterstützt.",
			"reloadProjects.title": "Projekt erneut laden",
			"configuration.typescript": "TypeScript",
			"configuration.suggest.completeFunctionCalls": "Vervollständigen Sie Funktionen mit deren Parametersignatur.",
			"configuration.suggest.includeAutomaticOptionalChainCompletions": "Aktiviert/deaktiviert Vervollständigungen für möglicherweise nicht definierte Werte, die eine optionale Aufrufkette einfügen. Hierfür muss TS 3.7+ vorhanden sein, und strikte NULL-Überprüfungen müssen aktiviert sein.",
			"configuration.suggest.includeCompletionsForImportStatements": "Hiermit aktivieren/deaktivieren Sie Vervollständigungen für teilweise eingegebene Importanweisungen für den automatischen Import. Erfordert die Verwendung von TypeScript 4.3 und höher im Arbeitsbereich.",
			"configuration.suggest.includeCompletionsWithSnippetText": "Hiermit aktivieren/deaktivieren Sie Schnipselvervollständigungen über TS Server. Erfordert die Verwendung von TypeScript 4.3 und höher im Arbeitsbereich.",
			"typescript.tsdk.desc": "Gibt den Ordnerpfad zu den tsserver- und lib*.d.ts-Dateien unter einer TypeScript-Installation zur Verwendung mit IntelliSense an, zum Beispiel: „./node_modules/typescript/lib“.\r\n\r\n– Sofern als Benutzereinstellung angegeben, ersetzt die TypeScript-Version aus „typescript.tsdk“ automatisch die integrierte TypeScript-Version.\r\n– Sofern als Arbeitsbereichseinstellung angegeben, erlaubt Ihnen „typescript.tsdk“ mit dem Befehl „TypeScript: Select TypeScript version“ zu dieser Arbeitsbereichsversion von TypeScript zu wechseln und sie für IntelliSense zu verwenden.\r\n\r\nWeitere Informationen zum Verwalten von TypeScript-Versionen finden Sie in der [Dokumentation zu TypeScript](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions).",
			"typescript.disableAutomaticTypeAcquisition": "Deaktiviert [automatische Typerfassung](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition). Die automatische Typerfassung ruft „@types\" Pakete von npm ab, um IntelliSense für externe Bibliotheken zu verbessern.",
			"typescript.enablePromptUseWorkspaceTsdk": "Aktiviert eine Benutzeraufforderung zur Verwendung der im Arbeitsbereich konfigurierten TypeScript-Version für IntelliSense.",
			"typescript.tsserver.enableTracing": "Aktiviert die Ablaufverfolgung für die TS-Serverleistung in einem Verzeichnis. Mithilfe dieser Ablaufverfolgungsdateien lassen sich Probleme mit der TS-Serverleistung diagnostizieren. Das Protokoll kann Dateipfade, Quellcode und weitere potenziell vertrauliche Informationen aus Ihrem Projekt enthalten.",
			"typescript.tsserver.log": "Aktiviert die Protokollierung des TS-Servers in eine Datei. Mithilfe der Protokolldatei lassen sich Probleme beim TS-Server diagnostizieren. Die Protokolldatei kann Dateipfade, Quellcode und weitere potenziell sensible Informationen aus Ihrem Projekt enthalten.",
			"typescript.tsserver.pluginPaths": "Zusätzliche Pfade zum Ermitteln von TypeScript Language Service-Plug-Ins.",
			"typescript.tsserver.pluginPaths.item": "Ein absoluter oder relativer Pfad. Ein relativer Pfad wird in Bezug auf die Arbeitsbereichsordner aufgelöst.",
			"typescript.tsserver.trace": "Aktiviert die Ablaufverfolgung von an den TS-Server gesendeten Nachrichten. Mithilfe der Ablaufverfolgung lassen sich Probleme beim TS-Server diagnostizieren. Die Ablaufverfolgung kann Dateipfade, Quellcode und weitere potenziell sensible Informationen aus Ihrem Projekt enthalten.",
			"typescript.validate.enable": "TypeScript-Überprüfung aktivieren/deaktivieren.",
			"typescript.format.enable": "Standardmäßigen TypeScript-Formatierer aktivieren/deaktivieren.",
			"javascript.format.enable": "Standardmäßigen JavaScript-Formatierer aktivieren/deaktivieren.",
			"format.insertSpaceAfterCommaDelimiter": "Definiert die Verarbeitung von Leerzeichen nach einem Kommatrennzeichen.",
			"format.insertSpaceAfterConstructor": "Definiert die Verarbeitung von Leerzeichen nach dem Konstruktorschlüsselwort.",
			"format.insertSpaceAfterSemicolonInForStatements": "Definiert die Verarbeitung von Leerzeichen nach einem Semikolon in einer for-Anweisung.",
			"format.insertSpaceBeforeAndAfterBinaryOperators": "Definiert die Verarbeitung von Leerzeichen nach einem binären Operator.",
			"format.insertSpaceAfterKeywordsInControlFlowStatements": "Definiert die Verarbeitung von Leerzeichen nach Schlüsselwörtern in einer Flusssteuerungsanweisung.",
			"format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": "Definiert die Verarbeitung von Leerzeichen nach einem Funktionsschlüsselwort für anonyme Funktionen.",
			"format.insertSpaceBeforeFunctionParenthesis": "Definiert die Verarbeitung von Leerzeichen vor Funktionsargumentklammern.",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": "Definiert die Verarbeitung von Leerzeichen nach öffnenden und vor schließenden nicht leeren runden Klammern.",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": "Definiert die Verarbeitung von Leerzeichen nach öffnenden und vor schließenden nicht leeren eckigen Klammern.",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": "Definiert die Verarbeitung von Leerzeichen nach öffnenden und vor schließenden nicht leeren geschweiften Klammern.",
			"format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": "Definiert die Verarbeitung von Leerzeichen nach geschweifter Klammer links und vor geschweifter Klammer rechts, wenn diese keine Inhalte umschließen.",
			"format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": "Definiert die Verarbeitung von Leerzeichen nach öffnenden und vor schließenden geschweiften Klammern für Vorlagenzeichenfolgen.",
			"format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": "Definiert die Verarbeitung von Leerzeichen nach öffnenden und vor schließenden geschweiften Klammern für JSX-Ausdrücke.",
			"format.insertSpaceAfterTypeAssertion": "Definiert die Verarbeitung von Leerzeichen nach Typassertionen in TypeScript.",
			"format.placeOpenBraceOnNewLineForFunctions": "Definiert, ob eine öffnende geschweifte Klammer für Funktionen in eine neue Zeile eingefügt wird.",
			"format.placeOpenBraceOnNewLineForControlBlocks": "Definiert, ob eine öffnende geschweifte Klammer für Kontrollblöcke in eine neue Zeile eingefügt wird.",
			"format.semicolons": "Definiert die Behandlung optionaler Semikola. Erfordert die Verwendung von TypeScript 3.7 oder höher im Arbeitsbereich.",
			"format.semicolons.ignore": "Fügen Sie keine Semikolons ein, und entfernen Sie diese auch nicht.",
			"format.semicolons.insert": "Fügen Sie am Ende von Anweisungen ein Semikolon ein.",
			"format.semicolons.remove": "Entfernen Sie unnötige Semikola.",
			"javascript.validate.enable": "JavaScript-Überprüfung aktivieren/deaktivieren.",
			"goToProjectConfig.title": "Zur Projektkonfiguration wechseln",
			"javascript.referencesCodeLens.enabled": "Aktiviert oder deaktiviert CodeLens-Verweise in JavaScript-Dateien.",
			"javascript.referencesCodeLens.showOnAllFunctions": "Verweise auf CodeLens für alle Funktionen in JavaScript-Dateien aktivieren/deaktivieren",
			"typescript.referencesCodeLens.enabled": "Aktiviert oder deaktiviert CodeLens-Verweise in TypeScript-Dateien.",
			"typescript.referencesCodeLens.showOnAllFunctions": "Verweise auf CodeLens für alle Funktionen in TypeScript-Dateien aktivieren/deaktivieren",
			"typescript.implementationsCodeLens.enabled": "Aktiviert oder deaktiviert CodeLens-Implementierungen. Dieses CodeLens-Element zeigt an, wer eine Schnittstelle implementiert hat.",
			"typescript.openTsServerLog.title": "TS Server-Protokolldatei öffnen",
			"typescript.restartTsServer": "TS Server neu starten",
			"typescript.selectTypeScriptVersion.title": "TypeScript-Version auswählen ...",
			"typescript.reportStyleChecksAsWarnings": "Stilüberprüfungen als Warnungen melden.",
			"typescript.npm": "Specifies the path to the npm executable used for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).",
			"typescript.check.npmIsInstalled": "Check if npm is installed for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).",
			"configuration.suggest.names": "Aktivieren/Deaktivieren, dass eindeutige Namen aus der Datei in JavaScript-Vorschläge eingeschlossen werden. Beachten Sie, dass Namensvorschläge in JavaScript-Code, dessen Semantik mit \"@ts-check\" oder \"checkJs\" überprüft wird, immer deaktiviert sind.",
			"typescript.tsc.autoDetect": "Legt fest, ob tsc-Tasks automatisch erkannt werden.",
			"typescript.tsc.autoDetect.off": "Dieses Feature deaktivieren.",
			"typescript.tsc.autoDetect.on": "Build- und Überwachungstasks erstellen",
			"typescript.tsc.autoDetect.build": "Nur Tasks mit einmaliger Kompilierung erstellen.",
			"typescript.tsc.autoDetect.watch": "Nur Kompilierungs- und Überwachungstasks erstellen.",
			"typescript.problemMatchers.tsc.label": "TypeScript-Probleme",
			"typescript.problemMatchers.tscWatch.label": "TypeScript-Probleme (Überwachungsmodus)",
			"configuration.suggest.paths": "Vorschläge für Pfade in Importanweisungen und require-Aufrufen aktivieren bzw. deaktivieren.",
			"configuration.tsserver.useSeparateSyntaxServer": "Hiermit aktivieren/deaktivieren Sie das Erzeugen eines separaten TypeScript-Servers, der schneller auf syntaxbezogene Vorgänge reagieren kann, beispielsweise das Berechnen von Codefaltung oder von Dokumentsymbolen. Hierfür ist TypeScript 3.4.0 oder höher im Arbeitsbereich erforderlich.",
			"configuration.tsserver.useSeparateSyntaxServer.deprecation": "Diese Einstellung ist veraltet und wurde durch „typescript.tsserver.useSyntaxServer“ ersetzt.",
			"configuration.tsserver.useSyntaxServer": "Kontrolliert, ob TypeScript einen dedizierten Server startet, um syntaxbezogene Vorgänge schneller zu verarbeiten, z. B. das Berechnen der Codefaltung.",
			"configuration.tsserver.useSyntaxServer.always": "Verwenden Sie einen Syntaxserver mit leichter Gewichtung, um alle IntelliSense-Vorgänge zu bearbeiten. Dieser Syntaxserver kann IntelliSense nur für geöffnete Dateien bereitstellen.",
			"configuration.tsserver.useSyntaxServer.never": "Verwenden Sie keinen dedizierten Syntaxserver. Verwenden Sie einen Einzelserver, um alle IntelliSense-Vorgänge zu bearbeiten.",
			"configuration.tsserver.useSyntaxServer.auto": "Erzeugen Sie einen vollständigen Server und einen Server mit leichter Gewichtung für Syntaxvorgänge. Der Syntaxserver wird verwendet, um Syntaxvorgänge zu beschleunigen und IntelliSense bereitzustellen, während Projekte geladen werden.",
			"configuration.tsserver.maxTsServerMemory": "Der maximale Arbeitsspeicher (in MB), der dem TypeScript-Serverprozess zugeordnet werden soll.",
			"configuration.tsserver.experimental.enableProjectDiagnostics": "(Experimentell) Ermöglicht eine projektweite Fehlerberichterstattung.",
			"typescript.locale": "Legt das zum Melden von JavaScript- und TypeScript-Fehlern verwendete Gebietsschema fest. Standardmäßig wird das Gebietsschema von VS Code verwendet.",
			"configuration.implicitProjectConfig.module": "Legt das Modulsystem für das Programm fest. Weitere Informationen finden Sie unter https://www.typescriptlang.org/tsconfig#module.",
			"configuration.implicitProjectConfig.target": "Legen Sie die JavaScript-Zielsprachversion für ausgegebenes JavaScript fest, und schließen Sie Bibliotheksdeklarationen ein. Weitere Informationen finden Sie unter https://www.typescriptlang.org/tsconfig#target.",
			"configuration.implicitProjectConfig.checkJs": "Aktiviert/deaktiviert die Semantikprüfung bei JavaScript-Dateien. Diese Einstellung wird von vorhandenen Dateien \"jsconfig.json\" oder \"tsconfig.json\" außer Kraft gesetzt.",
			"configuration.javascript.checkJs.checkJs.deprecation": "Diese Einstellung ist veraltet. Verwenden Sie stattdessen \"js/ts.implicitProjectConfig.checkJs\".",
			"configuration.implicitProjectConfig.experimentalDecorators": "Aktiviert/deaktiviert \"experimentalDecorators\" in JavaScript-Dateien, die keinem Projekt angehören. Diese Einstellung wird von vorhandenen Dateien \"jsconfig.json\" oder \"tsconfig.json\" außer Kraft gesetzt.",
			"configuration.javascript.checkJs.experimentalDecorators.deprecation": "Diese Einstellung ist veraltet. Verwenden Sie stattdessen \"js/ts.implicitProjectConfig.experimentalDecorators\".",
			"configuration.implicitProjectConfig.strictNullChecks": "Aktiviert/deaktiviert [strenge NULL-Prüfungen](https://www.typescriptlang.org/tsconfig#strictNullChecks) in JavaScript- und TypeScript-Dateien, die keinem Projekt angehören. Diese Einstellung wird von vorhandenen Dateien \"jsconfig.json\" oder \"tsconfig.json\" außer Kraft gesetzt.",
			"configuration.implicitProjectConfig.strictFunctionTypes": "Aktiviert/deaktiviert [strenge Funktionstypen](https://www.typescriptlang.org/tsconfig#strictFunctionTypes) in JavaScript- und TypeScript-Dateien, die keinem Projekt angehören. Diese Einstellung wird von vorhandenen Dateien \"jsconfig.json\" oder \"tsconfig.json\" außer Kraft gesetzt.",
			"configuration.suggest.jsdoc.generateReturns": "Aktivieren/deaktivieren Sie das Generieren von `@returns`-Anmerkungen für JSDoc-Vorlagen. Erfordert die Verwendung von TypeScript 4.2 und höher im Arbeitsbereich.",
			"configuration.suggest.autoImports": "Aktiviert/deaktiviert automatische Importvorschläge.",
			"inlayHints.parameterNames.none": "Deaktivieren Sie Hinweise für Parameternamen.",
			"inlayHints.parameterNames.literals": "Aktivieren Sie Hinweise für Parameternamen nur für literale Argumente.",
			"inlayHints.parameterNames.all": "Aktivieren Sie Hinweise für Parameternamen für literale und nicht literale Argumente.",
			"configuration.inlayHints.parameterNames.enabled": "Aktivieren/Deaktivieren von Inlayhinweisen für Parameternamen:\r\n```typescript\r\n\r\nparseInt(/* str: */ '123', /* radix: */8)\r\n\r\n```\r\nErfordert die Verwendung von TypeScript 4.4+ im Arbeitsbereich.",
			"configuration.inlayHints.parameterNames.suppressWhenArgumentMatchesName": "Unterdrückt Hinweise für Parameternamen auf Argumenten, deren Text mit dem Parameternamen identisch ist.",
			"configuration.inlayHints.parameterTypes.enabled": "Aktivieren/Deaktivieren von Inlayhinweisen für implizite Parametertypen:\r\n```typescript\r\n\r\nel.addEventListener('click', e /* :MouseEvent */ => ...)\r\n\r\n```\r\nErfordert die Verwendung von TypeScript 4.4+ im Arbeitsbereich.",
			"configuration.inlayHints.variableTypes.enabled": "Aktivieren/Deaktivieren von Inlayhinweisen für implizite Variablentypen:\r\n```typescript\r\n\r\nconst foo /* :number */ = Date.now();\r\n\r\n```\r\nerfordert die Verwendung von TypeScript 4.4 und höher im Arbeitsbereich.",
			"configuration.inlayHints.variableTypes.suppressWhenTypeMatchesName": "Unterdrücken Sie Typhinweise für Variablen, deren Name mit dem Typnamen identisch ist. Erfordert die Verwendung von TypeScript 4.8 und höher im Arbeitsbereich.",
			"configuration.inlayHints.propertyDeclarationTypes.enabled": "Aktivieren/Deaktivieren von Inlayhinweisen für implizite Typen in Eigenschaftsdeklarationen:\r\n```typescript\r\n\r\nclass Foo {\r\n\tprop /* :number */ = Date.now();\r\n}\r\n \r\n```\r\nErfordert die Verwendung von TypeScript 4.4+ im Arbeitsbereich.",
			"configuration.inlayHints.functionLikeReturnTypes.enabled": "Aktivieren/Deaktivieren von Inlayhinweisen für implizite Rückgabetypen für Funktionssignaturen:\r\n```typescript\r\n\r\nFunktion foo() /* :number */ {\r\nreturn Date.now();\r\n} \r\n\r\n```\r\nErfordert die Verwendung von TypeScript 4.4+ im Arbeitsbereich.",
			"configuration.inlayHints.enumMemberValues.enabled": "Aktivieren/Deaktivieren von Inlayhinweisen für Memberwerte in Enumerationsdeklarationen:\r\n```typescript\r\n\r\nenumeration MyValue {\r\nA /* = 0 */;\r\nB /* = 1 */;\r\n}\r\n\r\n```\r\nErfordert die Verwendung von TypeScript 4.4+ im Arbeitsbereich.",
			"taskDefinition.tsconfig.description": "Die \"tsconfig\"-Datei, die den TS-Build definiert.",
			"javascript.suggestionActions.enabled": "Aktiviert oder deaktiviert Vorschlagsdiagnosen für JavaScript-Dateien im Editor.",
			"typescript.suggestionActions.enabled": "Aktiviert oder deaktiviert Vorschlagsdiagnosen für TypeScript-Dateien im Editor.",
			"typescript.preferences.quoteStyle": "Bevorzugtes Anführungszeichenformat, das für schnelle Problembehebungen verwendet werden soll.",
			"typescript.preferences.quoteStyle.single": "Verwenden Sie immer einfache Anführungszeichen: `'`",
			"typescript.preferences.quoteStyle.double": "Verwenden Sie immer doppelte Anführungszeichen: `\"`",
			"typescript.preferences.quoteStyle.auto": "Anführungszeichentyp aus vorhandenem Code ableiten",
			"typescript.preferences.importModuleSpecifier": "Bevorzugter Pfadstil für automatische Importe.",
			"typescript.preferences.importModuleSpecifier.shortest": "Hiermit wird ein nicht relativer Import vorgezogen, falls einer verfügbar ist, der weniger Pfadsegmente als ein relativer Import aufweist.",
			"typescript.preferences.importModuleSpecifier.relative": "Hiermit wird ein relativer Pfad zum importierten Dateispeicherort vorgezogen.",
			"typescript.preferences.importModuleSpecifier.nonRelative": "Hiermit wird ein nicht relativer Import basierend auf den Werten von \"baseUrl\" oder \"paths\" vorgezogen, die in \"jsconfig.json\"/\"tsconfig.json\" konfiguriert sind.",
			"typescript.preferences.importModuleSpecifier.projectRelative": "Hiermit wird ein nicht relativer Import nur dann vorgezogen, wenn der relative Importpfad das Paket oder das Projektverzeichnis verlassen würde. Hierfür ist die Verwendung von TypeScript 4.2+ im Arbeitsbereich erforderlich.",
			"typescript.preferences.importModuleSpecifierEnding": "Bevorzugtes Pfadende für automatische Importe. Erfordert die Verwendung von TypeScript 4.5+ und höher im Arbeitsbereich.",
			"typescript.preferences.importModuleSpecifierEnding.auto": "Wählen Sie über die Projekteinstellungen einen Standardwert aus.",
			"typescript.preferences.importModuleSpecifierEnding.minimal": "./component/index.js zu ./component kürzen.",
			"typescript.preferences.importModuleSpecifierEnding.index": "Hiermit wird \"./component/index.js\" auf \"./component/index\" gekürzt.",
			"typescript.preferences.importModuleSpecifierEnding.js": "Kürzen Sie keine Pfadenden; fügen Sie die Erweiterung \".js\" ein.",
			"typescript.preferences.jsxAttributeCompletionStyle": "Bevorzugter Stil für JSX-Attribut-Vervollständigungen.",
			"javascript.preferences.jsxAttributeCompletionStyle.auto": "Fügen Sie `={}` oder `=\"\"` nach Attributnamen ein, die auf dem Eigenschaftentyp basieren. Informationen zum Steuern des Typs von Anführungszeichen, die für die Attribute in Zeichenfolgen verwendet werden, finden Sie unter „javascript.preferences.quoteStyle“.",
			"typescript.preferences.jsxAttributeCompletionStyle.auto": "Fügen Sie `={}` oder `=\"\"` nach Attributnamen ein, die auf dem Eigenschaftentyp basieren. Informationen zum Steuern des Typs von Anführungszeichen, die für die Attribute in Zeichenfolgen verwendet werden, finden Sie unter „typescript.preferences.quoteStyle“.",
			"typescript.preferences.jsxAttributeCompletionStyle.braces": "Fügen Sie „={}“ nach Attributnamen ein.",
			"typescript.preferences.jsxAttributeCompletionStyle.none": "Fügen Sie nur Attributnamen ein.",
			"typescript.preferences.includePackageJsonAutoImports": "Hiermit wird die Suche nach \"package.json\"-Abhängigkeiten für verfügbare automatische Importe aktiviert/deaktiviert.",
			"typescript.preferences.includePackageJsonAutoImports.auto": "Basierend auf der geschätzten Leistungsbeeinträchtigung nach Abhängigkeiten suchen",
			"typescript.preferences.includePackageJsonAutoImports.on": "Immer nach Abhängigkeiten suchen",
			"typescript.preferences.includePackageJsonAutoImports.off": "Niemals nach Abhängigkeiten suchen",
			"typescript.preferences.autoImportFileExcludePatterns": "Globale Muster von Dateien angeben, die von automatischen Importen ausgeschlossen werden sollen. Erfordert die Verwendung von TypeScript 4.8 oder höher im Arbeitsbereich.",
			"typescript.updateImportsOnFileMove.enabled": "Aktiviert/deaktiviert die automatische Aktualisierung von Importpfaden beim Umbenennen oder Verschieben einer Datei in VS Code.",
			"typescript.updateImportsOnFileMove.enabled.prompt": "Bei jeder Umbenennung auffordern.",
			"typescript.updateImportsOnFileMove.enabled.always": "Pfade immer automatisch aktualisieren lassen.",
			"typescript.updateImportsOnFileMove.enabled.never": "Pfade nie umbenennen und keine Aufforderung anzeigen.",
			"typescript.autoClosingTags": "Aktiviert/deaktiviert das automatische Schließen von JSX-Tags.",
			"typescript.suggest.enabled": "Vorschläge für die automatische Vervollständigung aktivieren bzw. deaktivieren.",
			"configuration.surveys.enabled": "Gelegentliche Umfragen zur Verbesserung der Unterstützung von JavaScript und TypeScript in Visual Studio Code aktivieren bzw. deaktivieren.",
			"configuration.suggest.completeJSDocs": "Vorschläge zum Vervollständigen von JSDoc-Kommentaren aktivieren/deaktivieren.",
			"configuration.tsserver.watchOptions": "Konfigurieren, welche Beobachtungsstrategien verwendet werden sollen, um Dateien und Verzeichnisse nachzuverfolgen. Erfordert die Verwendung von TypeScript 3.8+ im Arbeitsbereich.",
			"configuration.tsserver.watchOptions.watchFile": "Strategie für die Anzeige einzelner Dateien.",
			"configuration.tsserver.watchOptions.watchFile.fixedChunkSizePolling": "Ruft in regelmäßigen Abständen Dateien in Blöcken ab. Hierzu muss im Arbeitsbereich TypeScript 4.3 und höher verwendet werden.",
			"configuration.tsserver.watchOptions.watchFile.fixedPollingInterval": "Jede Datei mehrmals pro Sekunde in einem festen Intervall auf Änderungen überprüfen.",
			"configuration.tsserver.watchOptions.watchFile.priorityPollingInterval": "Jede Datei mehrmals pro Sekunde auf Änderungen überprüfen, bestimmte Dateitypen jedoch mithilfe von Heuristiken seltener als andere überprüfen.",
			"configuration.tsserver.watchOptions.watchFile.dynamicPriorityPolling": "Dynamische Warteschlange verwenden, in der weniger häufig geänderte Dateien seltener überprüft werden.",
			"configuration.tsserver.watchOptions.watchFile.useFsEvents": "Versuchen Sie, die nativen Ereignisse des Betriebssystems/Dateisystems für Dateiänderungen zu verwenden.",
			"configuration.tsserver.watchOptions.watchFile.useFsEventsOnParentDirectory": "Versuchen Sie, die nativen Ereignisse des Betriebssystems/Dateisystems zu verwenden, um Änderungen an den Verzeichnissen einer Datei zu überwachen. Dies kann weniger Dateiüberwachungselemente erfordern, doch der Vorgang ist möglicherweise weniger genau.",
			"configuration.tsserver.watchOptions.watchDirectory": "Strategie, wie ganze Verzeichnisbäume unter Systemen ohne rekursive Dateibeobachtungsfunktionalität beobachtet werden.",
			"configuration.tsserver.watchOptions.watchDirectory.fixedChunkSizePolling": "Ruft in regelmäßigen Abständen Verzeichnisse in Blöcken ab. Hierzu muss im Arbeitsbereich TypeScript 4.3 und höher verwendet werden.",
			"configuration.tsserver.watchOptions.watchDirectory.fixedPollingInterval": "Jedes Verzeichnis mehrmals pro Sekunde in einem festen Intervall auf Änderungen überprüfen.",
			"configuration.tsserver.watchOptions.watchDirectory.dynamicPriorityPolling": "Dynamische Warteschlange verwenden, in der weniger häufig geänderte Verzeichnisse seltener überprüft werden.",
			"configuration.tsserver.watchOptions.watchDirectory.useFsEvents": "Versuchen Sie, die nativen Ereignisse des Betriebssystems/Dateisystems für Verzeichnisänderungen zu verwenden.",
			"configuration.tsserver.watchOptions.fallbackPolling": "Bei der Verwendung von Dateisystemereignissen gibt diese Option die Abrufstrategie an, die verwendet wird, wenn das System keine nativen Dateiüberwachungselemente mehr hat und/oder keine nativen Dateiüberwachungselemente unterstützt.",
			"configuration.tsserver.watchOptions.fallbackPolling.fixedPollingInterval": "Jede Datei mehrmals pro Sekunde in einem festen Intervall auf Änderungen überprüfen.",
			"configuration.tsserver.watchOptions.fallbackPolling.priorityPollingInterval": "Jede Datei mehrmals pro Sekunde auf Änderungen überprüfen, bestimmte Dateitypen jedoch mithilfe von Heuristiken seltener als andere überprüfen.",
			"configuration.tsserver.watchOptions.fallbackPolling.dynamicPriorityPolling ": "Dynamische Warteschlange verwenden, in der weniger häufig geänderte Dateien seltener überprüft werden.",
			"configuration.tsserver.watchOptions.synchronousWatchDirectory": "Verzögertes Beobachten von Verzeichnissen deaktivieren. Das verzögertes Beobachten ist nützlich, wenn viele Dateiänderungen gleichzeitig auftreten können (z. B. eine Änderung in node_modules über eine Ausführung von npm-install). Sie sollten das verzögerte Beobachten jedoch mit diesem Flag für einige weniger häufige Setups deaktivieren.",
			"typescript.preferences.renameShorthandProperties.deprecationMessage": "Die Einstellung \"typescript.preferences.renameShorthandProperties\" wurde zugunsten von \"typescript.preferences.useAliasesForRenames\" als veraltet markiert.",
			"typescript.preferences.useAliasesForRenames": "Hiermit wird die Einführung von Aliasen für Objektkompakteigenschaften während des Umbenennens aktiviert/deaktiviert. Erfordert die Verwendung von TypeScript 3.4 oder höher im Arbeitsbereich.",
			"typescript.workspaceSymbols.scope": "Hiermit wird gesteuert, welche Dateien über [Zu Symbol im Arbeitsbereich wechseln](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name) durchsucht werden.",
			"typescript.workspaceSymbols.scope.allOpenProjects": "Hiermit werden alle geöffneten JavaScript- oder TypeScript-Projekte nach Symbolen durchsucht. Erfordert die Verwendung von TypeScript 3.9 oder höher im Arbeitsbereich.",
			"typescript.workspaceSymbols.scope.currentProject": "Hiermit wird nur im aktuellen JavaScript- oder TypeScript-Projekt nach Symbolen gesucht.",
			"codeActions.refactor.extract.constant.title": "Konstante extrahieren",
			"codeActions.refactor.extract.constant.description": "Ausdruck in Konstante extrahieren",
			"codeActions.refactor.extract.function.title": "Funktion extrahieren",
			"codeActions.refactor.extract.function.description": "Ausdruck in Methode oder Funktion extrahieren",
			"codeActions.refactor.extract.type.title": "Typ extrahieren",
			"codeActions.refactor.extract.type.description": "Typ in einen Typalias extrahieren",
			"codeActions.refactor.extract.interface.title": "Schnittstelle extrahieren",
			"codeActions.refactor.extract.interface.description": "Typ in eine Schnittstelle extrahieren",
			"codeActions.refactor.rewrite.import.title": "Import konvertieren",
			"codeActions.refactor.rewrite.import.description": "Zwischen benannten Importen und Namespaceimporten konvertieren",
			"codeActions.refactor.rewrite.export.title": "Export konvertieren",
			"codeActions.refactor.rewrite.export.description": "Zwischen Standardexport und benanntem Export konvertieren",
			"codeActions.refactor.move.newFile.title": "In neue Datei verschieben",
			"codeActions.refactor.move.newFile.description": "Ausdruck in eine neue Datei verschieben",
			"codeActions.refactor.rewrite.arrow.braces.title": "Pfeilklammern neu schreiben",
			"codeActions.refactor.rewrite.arrow.braces.description": "Klammern in einer Pfeilfunktion hinzufügen oder entfernen",
			"codeActions.refactor.rewrite.parameters.toDestructured.title": "Parameter in destrukturiertes Objekt konvertieren",
			"codeActions.refactor.rewrite.property.generateAccessors.title": "Accessoren generieren",
			"codeActions.refactor.rewrite.property.generateAccessors.description": "GET- und SET-Accessoren generieren",
			"codeActions.source.organizeImports.title": "Importe organisieren",
			"typescript.sortImports": "Importe sortieren",
			"typescript.removeUnusedImports": "Nicht verwendete Importe entfernen",
			"typescript.findAllFileReferences": "Dateiverweise suchen",
			"typescript.goToSourceDefinition": "Gehen Sie zu Quelldefinition",
			"configuration.suggest.classMemberSnippets.enabled": "Aktivieren/Deaktivieren von Codeschnipseln für Klassenmember. Erfordert die Verwendung von TypeScript 4.5 und höher im Arbeitsbereich",
			"configuration.suggest.objectLiteralMethodSnippets.enabled": "Aktivieren/Deaktivieren Sie Vervollständigungen von Codeausschnitten für Methoden in Objektliteralen. Erfordert die Verwendung von TypeScript 4.7 und höher im Arbeitsbereich",
			"walkthroughs.nodejsWelcome.title": "Erste Schritte mit JavaScript und Node.js",
			"walkthroughs.nodejsWelcome.description": "Nutzen Sie die erstklassige JavaScript-Erfahrung von Visual Studio Code.",
			"walkthroughs.nodejsWelcome.downloadNode.forMacOrWindows.title": "Node.js installieren",
			"walkthroughs.nodejsWelcome.downloadNode.forMacOrWindows.description": "Node.js ist eine einfache Möglichkeit zum Ausführen von JavaScript-Code. Sie können damit schnell Befehlszeilen-Apps und -Server erstellen. Außerdem ist npm enthalten, ein Paket-Manager, der das Wiederverwenden und Freigeben von JavaScript-Code vereinfacht.\r\n[Node.js installieren](https://nodejs.org/en/download/)",
			"walkthroughs.nodejsWelcome.downloadNode.forLinux.title": "Node.js installieren",
			"walkthroughs.nodejsWelcome.downloadNode.forLinux.description": "Node.js ist eine einfache Möglichkeit zum Ausführen von JavaScript-Code. Sie können damit schnell Befehlszeilen-Apps und -Server erstellen. Außerdem ist npm enthalten, ein Paket-Manager, der das Wiederverwenden und Freigeben von JavaScript-Code vereinfacht.\r\n[Node.js installieren](https://nodejs.org/en/download/package-manager/)",
			"walkthroughs.nodejsWelcome.makeJsFile.title": "JavaScript-Datei erstellen",
			"walkthroughs.nodejsWelcome.makeJsFile.description": "Schreiben wir unsere erste JavaScript-Datei. Wir müssen eine neue Datei erstellen und sie mit der Erweiterung \".js\" am Ende des Dateinamens speichern.\r\n[Erstellen einer JavaScript-Datei](command:javascript-walkthrough.commands.createJsFile)",
			"walkthroughs.nodejsWelcome.debugJsFile.title": "JavaScript ausführen und debuggen",
			"walkthroughs.nodejsWelcome.debugJsFile.description": "Nachdem Sie Node.js installiert haben, können Sie JavaScript-Programme in einem Terminal ausführen, indem Sie \"node your-file-name.js\" eingeben\r\nEine weitere einfache Möglichkeit zum Ausführen von Node.js-Programmen ist die Verwendung des Debuggers von VS Code, mit dem Sie Ihren Code ausführen, an verschiedenen Stellen anhalten und Ihnen helfen, schrittweise zu verstehen, was vor sich geht.\r\n[Debuggen starten](command:javascript-walkthrough.commands.debugJsFile)",
			"walkthroughs.nodejsWelcome.debugJsFile.altText": "Debuggen Sie Ihren JavaScript-Code in Node.js, und führen Sie ihn mit Visual Studio Code aus.",
			"walkthroughs.nodejsWelcome.learnMoreAboutJs.title": "Mehr entdecken",
			"walkthroughs.nodejsWelcome.learnMoreAboutJs.description": "Möchten Sie sich mit JavaScript, Node.js und VS Code vertrauter machen? Sehen Sie sich unbedingt unsere Dokumentation an!\r\nWir haben viele Ressourcen zum Lernen [JavaScript](https://code.visualstudio.com/docs/nodejs/working-with-javascript) und [Node.js](https://code.visualstudio.com/docs/nodejs/nodejs-tutorial).\r\n\r\n[Weitere Informationen](https://code.visualstudio.com/docs/nodejs/nodejs-Tutorial)",
			"walkthroughs.nodejsWelcome.learnMoreAboutJs.altText": "Erfahren Sie mehr über JavaScript und Node.js in Visual Studio Code."
		},
		"dist/tsServer/serverProcess.electron": {
			"noServerFound": "Der Pfad \"{0}\" zeigt nicht auf eine gültige tsserver-Installation. Fallback auf gebündelte TypeScript-Version wird durchgeführt."
		},
		"dist/tsServer/versionProvider.electron": {
			"noBundledServerFound": "Der tsserver von VS Code wurde von einer anderen Anwendung wie etwa einem fehlerhaften Tool zur Viruserkennung gelöscht. Führen Sie eine Neuinstallation von VS Code durch."
		},
		"dist/ui/jsNodeWalkthrough.electron": {
			"reloadWindowForNode": "VS Code neu laden",
			"nodeNotFoundDebugAnyway": "Debuggen trotzdem versuchen",
			"nodeNotFoundDismissDialog": "Verwerfen",
			"noNodeInstallFound": "Node.js wurde auf diesem Computer nicht gefunden. Wenn Sie es gerade installiert haben, müssen Sie möglicherweise VS Code neu laden."
		},
		"dist/task/taskProvider": {
			"badTsConfig": "Die TypeScript-Task in tasks.json enthält \"\\\\\". Für TypeScript-Tasks in tsconfig muss \"/\" verwendet werden.",
			"buildTscLabel": "Erstellen – {0}",
			"buildAndWatchTscLabel": "Überwachen – {0}"
		},
		"dist/languageFeatures/tsconfig": {
			"documentLink.tooltip": "Link folgen",
			"openTsconfigExtendsModuleFail": "Fehler beim Auflösen von {0} als Modul"
		},
		"dist/utils/api": {
			"invalidVersion": "Ungültige Version"
		},
		"dist/tsServer/versionProvider": {
			"couldNotLoadTsVersion": "Die TypeScript-Version konnte unter diesem Pfad nicht geladen werden."
		},
		"dist/utils/tsconfig": {
			"typescript.configureTsconfigQuickPick": "tsconfig.json konfigurieren",
			"typescript.configureJsconfigQuickPick": "jsconfig.json konfigurieren",
			"typescript.noTypeScriptProjectConfig": "Die Datei ist nicht Teil eines TypeScript-Projekts. Weitere Informationen finden Sie in der [tsconfig.json-Dokumentation]({0}).",
			"typescript.noJavaScriptProjectConfig": "Die Datei ist nicht Teil eines JavaScript-Projekts. Weitere Informationen finden Sie in der [jsconfig.json-Dokumentation]({0}).",
			"typescript.projectConfigNoWorkspace": "Öffnen Sie einen Ordner in VS Code, um ein TypeScript- oder JavaScript-Projekt zu verwenden.",
			"typescript.projectConfigUnsupportedFile": "TypeScript- oder JavaScript-Projekt konnte nicht ermittelt werden. Nicht unterstützter Dateityp.",
			"typescript.projectConfigCouldNotGetInfo": "TypeScript- oder JavaScript-Projekt konnte nicht ermittelt werden."
		},
		"dist/typescriptServiceClient": {
			"noServerFound": "Der Pfad \"{0}\" zeigt nicht auf eine gültige tsserver-Installation. Fallback auf gebündelte TypeScript-Version wird durchgeführt.",
			"serverExitedWithError": "Der TypeScript-Sprachserver wurde durch einen Fehler beendet. Fehlermeldung: {0}",
			"typescript.openTsServerLog.loggingNotEnabled": "Die TS Server-Protokollierung ist deaktiviert. Legen Sie \"typescript.tsserver.log\" fest, und laden Sie VS Code erneut, um die Protokollierung zu aktivieren.",
			"typescript.openTsServerLog.enableAndReloadOption": "Aktiviert die Protokollierung und startet den TS-Server neu.",
			"typescript.openTsServerLog.noLogFile": "TS Server hat noch nicht mit der Protokollierung begonnen.",
			"openTsServerLog.openFileFailedFailed": "Die TS-Server-Protokolldatei konnte nicht geöffnet werden.",
			"serverDiedReportIssue": "Problem melden",
			"serverDiedImmediatelyWithPlugins": "Der JS/TS-Sprachdienst ist sofort fünfmal abgestürzt. Der Dienst wird nicht neu gestartet.\r\nDies kann durch ein Plug-In von einer dieser Erweiterungen verursacht werden: {0}",
			"serverDiedImmediately": "Der JS/TS-Sprachdienst ist sofort fünfmal abgestürzt. Der Dienst wird nicht neu gestartet.",
			"serverDiedFiveTimesWithPlugins": "Der JS/TS-Sprachdienst ist in den letzten fünf Minuten fünfmal abgestürzt.\r\nDies kann durch ein Plug-In von einer dieser Erweiterungen verursacht werden: {0}",
			"serverDiedFiveTimes": "Der JS/TS-Sprachdienst ist in den letzten fünf Minuten fünfmal abgestürzt.",
			"serverDiedOnceWithPlugins": "Der JS/TS-Sprachdienst ist abgestürzt.\r\nDies kann durch ein Plug-In von einer dieser Erweiterungen verursacht werden: {0}",
			"serverDiedOnce": "Der JS/TS-Sprachdienst ist abgestürzt.",
			"usingOldTsVersion.title": "Bitte aktualisieren Sie Ihre TypeScript-Version.",
			"usingOldTsVersion.detail": "Der Arbeitsbereich verwendet eine alte Version von TypeScript ({0}).\r\n\r\nBevor Sie ein Problem melden, aktualisieren Sie den Arbeitsbereich, sodass die neueste stabile Version verwendet und sichergestellt wird, dass der Fehler nicht bereits behoben wurde.",
			"serverLoading.progress": "Sprachfeatures von JavaScript bzw. TypeScript werden initialisiert"
		},
		"dist/ui/intellisenseStatus": {
			"pending.detail": "IntelliSense-Status wird geladen",
			"resolved.detail.noTsConfig": "Keine tsconfig",
			"resolved.detail.noJsConfig": "Keine jsconfig",
			"resolved.detail.noOpenedFolders": "Keine geöffneten Ordner",
			"resolved.detail.notInOpenedFolder": "Datei ist kein Teil geöffneter Ordner",
			"resolved.command.title.createTsconfig": "tsconfig erstellen",
			"resolved.command.title.createJsconfig": "Erstellen von jsconfig",
			"resolved.command.title.open": "Konfigurationsdatei öffnen",
			"syntaxOnly.text": "Teilmodus",
			"syntaxOnly.detail": "Projektweites IntelliSense nicht verfügbar",
			"syntaxOnly.command.title.learnMore": "Weitere Informationen",
			"statusItem.name": "JS/TS IntelliSense-Status"
		},
		"dist/ui/versionStatus": {
			"versionStatus.name": "TypeScript-Version",
			"versionStatus.detail": "TypeScript-Version",
			"versionStatus.command": "Version auswählen"
		},
		"dist/utils/logLevelMonitor": {
			"typescript.extendedLogging.isEnabled": "Die TS Server-Protokollierung ist derzeit aktiviert. Das kann Auswirkungen auf die Leistung haben.",
			"typescript.extendedLogging.disableLogging": "Protokollierung deaktivieren",
			"typescript.extendedLogging.doNotShowAgain": "Nicht mehr anzeigen"
		},
		"dist/languageFeatures/updatePathsOnRename": {
			"renameProgress.title": "Überprüfung der Aktualisierung der JS/TS-Importe",
			"reject.title": "Nein",
			"accept.title": "Ja",
			"always.title": "Importe immer automatisch aktualisieren",
			"never.title": "Importe nie automatisch aktualisieren",
			"prompt": "Importe für \"{0}\" aktualisieren?",
			"promptMoreThanOne": "Importe für die folgenden {0}-Dateien aktualisieren?",
			"moreFile": "...1 weitere Datei wird nicht angezeigt",
			"moreFiles": "...{0} weitere Dateien werden nicht angezeigt"
		},
		"dist/languageFeatures/completions": {
			"selectCodeAction": "Anzuwendende Codeaktion auswählen",
			"acquiringTypingsLabel": "Eingaben werden abgerufen...",
			"acquiringTypingsDetail": "Eingabedefinitionen für IntelliSense werden abgerufen."
		},
		"dist/languageFeatures/directiveCommentCompletions": {
			"ts-check": "Aktiviert die Semantiküberprüfung in einer JavaScript-Datei. Muss sich oben in einer Datei befinden.",
			"ts-nocheck": "Deaktiviert die Semantiküberprüfung in einer JavaScript-Datei. Muss sich oben in einer Datei befinden.",
			"ts-ignore": "Unterdrückt @ts-check-Fehler in der nächsten Zeile einer Datei.",
			"ts-expect-error": "Unterdrückt @ts-check-Fehler in der nächsten Zeile einer Datei und erwartet, dass mindestens einer vorhanden ist."
		},
		"dist/languageFeatures/fileReferences": {
			"error.unsupportedVersion": "Fehler beim Suchen nach Dateiverweisen. Erfordert TypeScript 4.2+.",
			"error.noResource": "Fehler beim Suchen nach Dateiverweisen. Es wurde keine Ressource angegeben.",
			"error.unsupportedLanguage": "Fehler beim Suchen nach Dateiverweisen. Nicht unterstützter Dateityp.",
			"error.unknownFile": "Fehler beim Suchen nach Dateiverweisen. Unbekannter Dateityp.",
			"progress.title": "Dateiverweise werden gesucht"
		},
		"dist/languageFeatures/fixAll": {
			"autoFix.label": "Alle behebbaren JS/TS-Probleme beheben",
			"autoFix.unused.label": "Gesamten nicht verwendeten Code entfernen",
			"autoFix.missingImports.label": "Alle fehlenden Importe hinzufügen"
		},
		"dist/languageFeatures/hover": {
			"loadingPrefix": "(wird geladen...)"
		},
		"dist/languageFeatures/jsDocCompletions": {
			"typescript.jsDocCompletionItem.documentation": "JSDoc-Kommentar"
		},
		"dist/languageFeatures/organizeImports": {
			"organizeImportsAction.title": "Importe organisieren",
			"sortImportsAction.title": "Importe sortieren",
			"removeUnusedImportsAction.title": "Nicht verwendete Importe entfernen",
			"error.organizeImports.noResource": "Fehler beim Organisieren von Importen. Es wurde keine Ressource bereitgestellt.",
			"error.organizeImports.unknownFile": "Fehler beim Organisieren von Importen. Unbekannter Dateityp."
		},
		"dist/languageFeatures/quickFix": {
			"fixAllInFileLabel": "{0} (Behebe alle in Datei)"
		},
		"dist/languageFeatures/refactor": {
			"refactoringFailed": "Umgestaltung nicht möglich",
			"extractConstant.disabled.title": "In Konstante extrahieren",
			"extractConstant.disabled.reason": "Die aktuelle Auswahl kann nicht extrahiert werden.",
			"extractFunction.disabled.title": "In Funktion extrahieren",
			"extractFunction.disabled.reason": "Die aktuelle Auswahl kann nicht extrahiert werden.",
			"refactor.documentation.title": "Weitere Informationen zu JS/TS-Refactorings"
		},
		"dist/languageFeatures/rename": {
			"fileRenameFail": "Beim Umbenennen der Datei ist ein Fehler aufgetreten."
		},
		"dist/languageFeatures/sourceDefinition": {
			"error.unsupportedVersion": "Gehe zu Quelldefinition fehlgeschlagen. Erfordert TypeScript 4.7+.",
			"error.noResource": "Gehe zu Quelldefinition fehlgeschlagen. Keine Ressource bereitgestellt.",
			"error.unsupportedLanguage": "Gehe zu Quelldefinition fehlgeschlagen. Nicht unterstütztes Dateiformat.",
			"error.unknownFile": "Gehe zu Quelldefinition fehlgeschlagen. Unbekannter Dateityp.",
			"progress.title": "Quellendefinitionen finden",
			"error.noReferences": "Keine Definitionen gefunden."
		},
		"dist/languageFeatures/codeLens/implementationsCodeLens": {
			"oneImplementationLabel": "1 Implementierung",
			"manyImplementationLabel": "{0} Implementierungen"
		},
		"dist/languageFeatures/codeLens/referencesCodeLens": {
			"oneReferenceLabel": "1 Verweis",
			"manyReferenceLabel": "{0} Verweise"
		},
		"dist/tsServer/versionManager": {
			"selectTsVersion": "Wählen Sie die für die JavaScript- und TypeScript-Sprachfunktionen verwendete TypeScript-Version aus.",
			"useVSCodeVersionOption": "Version von VS Code verwenden",
			"useWorkspaceVersionOption": "Arbeitsbereichsversion verwenden",
			"allow": "Zulassen",
			"dismiss": "Schließen",
			"suppress prompt": "Nie in diesem Arbeitsbereich",
			"promptUseWorkspaceTsdk": "Dieser Arbeitsbereich enthält eine TypeScript-Version. Möchten Sie die TypeScript-Version des Arbeitsbereichs für TypeScript- und JavaScript-Sprachfeatures verwenden?",
			"learnMore": "Weitere Informationen zum Verwalten von TypeScript-Versionen"
		},
		"dist/utils/logger": {
			"channelName": "TypeScript"
		},
		"dist/languageFeatures/codeLens/baseCodeLensProvider": {
			"referenceErrorLabel": "Verweise konnten nicht bestimmt werden"
		}
	}
}