{
	"": [
		"--------------------------------------------------------------------------------------------",
		"Copyright (c) Microsoft Corporation. All rights reserved.",
		"Licensed under the MIT License. See License.txt in the project root for license information.",
		"--------------------------------------------------------------------------------------------",
		"Do not edit this file. It is machine generated."
	],
	"version": "1.0.0",
	"contents": {
		"dist/languageFeatures/codeLens/baseCodeLensProvider": {
			"referenceErrorLabel": "参照を判別できませんでした"
		},
		"dist/languageFeatures/codeLens/implementationsCodeLens": {
			"manyImplementationLabel": "{0} 個の実装",
			"oneImplementationLabel": "1 個の実装"
		},
		"dist/languageFeatures/codeLens/referencesCodeLens": {
			"manyReferenceLabel": "{0} 個の参照",
			"oneReferenceLabel": "1 個の参照"
		},
		"dist/languageFeatures/completions": {
			"acquiringTypingsDetail": "IntelliSense の Typings の定義ファイルを取得しています。",
			"acquiringTypingsLabel": "typings の定義ファイルを取得中...",
			"autoImportLabel": "{0} から自動インポート",
			"selectCodeAction": "適用するコード アクションを選択"
		},
		"dist/languageFeatures/directiveCommentCompletions": {
			"ts-check": "JavaScript ファイルのセマンティック チェックを有効にします。 ファイルの先頭にある必要があります。",
			"ts-expect-error": "ファイルの次の行で @ts-check エラーを表示しません。少なくとも 1 つ存在する必要があります。",
			"ts-ignore": "ファイルの次の行で @ts-check エラーを抑制します。",
			"ts-nocheck": "JavaScript ファイルのセマンティック チェックを無効にします。 ファイルの先頭にある必要があります。"
		},
		"dist/languageFeatures/fileReferences": {
			"error.noResource": "ファイル参照の検索に失敗しました。リソースが指定されていません。",
			"error.unknownFile": "ファイル参照の検索に失敗しました。ファイルの種類が不明です。",
			"error.unsupportedLanguage": "ファイル参照の検索に失敗しました。サポートされていないファイルの種類です。",
			"error.unsupportedVersion": "ファイル参照の検索に失敗しました。TypeScript 4.2 以降が必要です。",
			"progress.title": "ファイル参照の検索中"
		},
		"dist/languageFeatures/fixAll": {
			"autoFix.label": "すべて修正",
			"autoFix.missingImports.label": "見つからないインポートをすべて追加する",
			"autoFix.unused.label": "未使用のコードをすべて削除する"
		},
		"dist/languageFeatures/jsDocCompletions": {
			"typescript.jsDocCompletionItem.documentation": "JSDoc コメント"
		},
		"dist/languageFeatures/organizeImports": {
			"organizeImportsAction.title": "インポートを整理",
			"sortImportsAction.title": "インポートの並べ替え"
		},
		"dist/languageFeatures/quickFix": {
			"fixAllInFileLabel": "{0} (ファイルの中のすべてを修正する)"
		},
		"dist/languageFeatures/refactor": {
			"extractConstant.disabled.reason": "現在の選択範囲を抽出できません",
			"extractConstant.disabled.title": "定数への抽出",
			"extractFunction.disabled.reason": "現在の選択範囲を抽出できません",
			"extractFunction.disabled.title": "関数への抽出",
			"refactor.documentation.title": "JS/TS リファクタリングの詳細",
			"refactoringFailed": "リファクタリングを適用できませんでした。"
		},
		"dist/languageFeatures/rename": {
			"fileRenameFail": "ファイル名を変更中にエラーが発生しました"
		},
		"dist/languageFeatures/updatePathsOnRename": {
			"accept.title": "はい",
			"always.title": "常に Import を自動的に更新します",
			"moreFile": "...1 つの追加ファイルが表示されていません",
			"moreFiles": "...{0} 個の追加ファイルが表示されていません",
			"never.title": "今後は Import を自動的に更新しません",
			"prompt": "'{0}' のインポートを更新しますか?",
			"promptMoreThanOne": "次の {0} ファイルのインポートを更新しますか?",
			"reject.title": "いいえ",
			"renameProgress.title": "JS/TS インポートの更新を確認しています"
		},
		"dist/task/taskProvider": {
			"badTsConfig": "tasks.json の Typescript タスクに \"\\\\\" が含まれています。Typescript タスクの tsconfig では \"/\" を使用する必要があります",
			"buildAndWatchTscLabel": "ウォッチ - {0}",
			"buildTscLabel": "ビルド - {0}"
		},
		"dist/tsServer/serverProcess.electron": {
			"noServerFound": "パス {0} は、有効な tsserver インストールを指していません。バンドルされている TypeScript バージョンにフォールバックしています。"
		},
		"dist/tsServer/versionManager": {
			"allow": "許可する",
			"dismiss": "閉じる",
			"learnMore": "TypeScript のバージョンの管理についての詳細",
			"promptUseWorkspaceTsdk": "このワークスペースには TypeScript バージョンが含まれています。TypeScript および JavaScript の言語機能にワークスペースの TypeScript バージョンを使用しますか?",
			"selectTsVersion": "JavaScript および TypeScript 言語の機能に使用する TypeScript バージョンを選択します",
			"suppress prompt": "このワークスペースでは使用しない",
			"useVSCodeVersionOption": "VS Code のバージョンを使用",
			"useWorkspaceVersionOption": "ワークスペースのバージョンを使用"
		},
		"dist/typescriptServiceClient": {
			"noServerFound": "パス {0} は、有効な tsserver インストールを指していません。バンドルされている TypeScript バージョンにフォールバックしています。",
			"openTsServerLog.openFileFailedFailed": "TS サーバーのログ ファイルを開くことができませんでした",
			"serverDied": "TypeScript 言語サービスは、直前の 5 分間に 5 回、予期せずに停止しました。",
			"serverDiedAfterStart": "TypeScript 言語サービスは、開始直後に 5 回停止しました。サービスは再開されません。",
			"serverDiedOnce": "TypeScript 言語サービスが予期せずに終了しました。",
			"serverDiedReportIssue": "問題を報告",
			"serverExitedWithError": "TypeScript 言語サーバーがエラーで終了しました。エラー メッセージ: {0}",
			"serverLoading.progress": "JS/TS 言語機能を初期化しています",
			"typescript.openTsServerLog.enableAndReloadOption": "ログを有効にして、TS サーバーを再起動する",
			"typescript.openTsServerLog.loggingNotEnabled": "TS サーバーのログがオフになっています。ログを有効にするには、`typescript.tsserver.log` を設定して TS サーバーを再起動してください",
			"typescript.openTsServerLog.noLogFile": "TS サーバーはログを開始していません。",
			"usingOldTsVersion.detail": "ワークスペースで古いバージョンの TypeScript ({0}) が使用されています。\r\n\r\n問題を報告する前に、最新の安定した TypeScript リリースを使用するようにワークスペースを更新し、バグが修正済みでないことを確認してください。",
			"usingOldTsVersion.title": "TypeScript のバージョンを更新してください"
		},
		"dist/ui/intellisenseStatus": {
			"pending.detail": "IntelliSense の状態を読み込んでいます",
			"resolved.command.title.createJsconfig": "jsconfig を作成する",
			"resolved.command.title.createTsconfig": "tsconfig を作成する",
			"resolved.command.title.open": "構成ファイルを開く",
			"resolved.detail.noJsConfig": "jsconfig なし",
			"resolved.detail.noTsConfig": "tsconfig なし",
			"statusItem.name": "JS/TS IntelliSense の状態",
			"syntaxOnly.command.title.learnMore": "詳細情報",
			"syntaxOnly.detail": "Project Wide IntelliSense を使用できません",
			"syntaxOnly.text": "部分モード"
		},
		"dist/ui/versionStatus": {
			"versionStatus.command": "バージョンの選択",
			"versionStatus.detail": "TypeScript バージョン",
			"versionStatus.name": "TypeScript バージョン"
		},
		"dist/utils/api": {
			"invalidVersion": "無効なバージョン"
		},
		"dist/utils/logger": {
			"channelName": "TypeScript"
		},
		"dist/utils/tsconfig": {
			"typescript.configureJsconfigQuickPick": "jsconfig.json を構成する",
			"typescript.configureTsconfigQuickPick": "tsconfig.json を構成する",
			"typescript.noJavaScriptProjectConfig": "ファイルは JavaScript プロジェクトの一部ではありません。詳細情報は [こちら]({0}) をクリックしてください。",
			"typescript.noTypeScriptProjectConfig": "ファイルは TypeScript プロジェクトの一部ではありません。詳細情報は [こちら]({0}) をクリックしてください。",
			"typescript.projectConfigCouldNotGetInfo": "TypeScript または JavaScript のプロジェクトを判別できませんでした",
			"typescript.projectConfigNoWorkspace": "TypeScript または JavaScript プロジェクトを使用するには、VS Code でフォルダーを開いてください",
			"typescript.projectConfigUnsupportedFile": "TypeScript または JavaScript のプロジェクトを判別できませんでした。サポートされていないファイルの種類です"
		},
		"package": {
			"codeActions.refactor.extract.constant.description": "式を定数に抽出します。",
			"codeActions.refactor.extract.constant.title": "定数を抽出する",
			"codeActions.refactor.extract.function.description": "式をメソッドまたは関数に抽出します。",
			"codeActions.refactor.extract.function.title": "関数を抽出する",
			"codeActions.refactor.extract.interface.description": "型をインターフェイスに抽出します。",
			"codeActions.refactor.extract.interface.title": "インターフェイスの抽出",
			"codeActions.refactor.extract.type.description": "型を型のエイリアスに抽出します。",
			"codeActions.refactor.extract.type.title": "型の抽出",
			"codeActions.refactor.move.newFile.description": "式を新しいファイルに移動します。",
			"codeActions.refactor.move.newFile.title": "新しいファイルへ移動します",
			"codeActions.refactor.rewrite.arrow.braces.description": "アロー関数内のかっこを追加または削除します。",
			"codeActions.refactor.rewrite.arrow.braces.title": "中かっこを書き換える",
			"codeActions.refactor.rewrite.export.description": "既定のエクスポートと名前付きエクスポートを変換します。",
			"codeActions.refactor.rewrite.export.title": "エクスポートを変換する",
			"codeActions.refactor.rewrite.import.description": "名前付きインポートと名前空間インポートを変換します。",
			"codeActions.refactor.rewrite.import.title": "インポートを変換する",
			"codeActions.refactor.rewrite.parameters.toDestructured.title": "パラメーターを非構造化オブジェクトに変換する",
			"codeActions.refactor.rewrite.property.generateAccessors.description": "'get' および 'set' アクセサーの生成",
			"codeActions.refactor.rewrite.property.generateAccessors.title": "アクセサーを生成する",
			"codeActions.source.organizeImports.title": "インポートを整理",
			"configuration.implicitProjectConfig.checkJs": "JavaScript ファイルのセマンティック チェックを有効または無効にします。既存の 'jsconfig.json' または 'tsconfig.json' ファイルによってこの設定がオーバーライドされます。",
			"configuration.implicitProjectConfig.experimentalDecorators": "プロジェクト外の JavaScript ファイルの 'experimentalDecorators' を有効または無効にします。既存の 'jsconfig.json' または 'tsconfig.json' ファイルによってこの設定がオーバーライドされます。",
			"configuration.implicitProjectConfig.strictFunctionTypes": "プロジェクト外の JavaScript および TypeScript ファイルの [厳密な関数の型](https://www.typescriptlang.org/tsconfig#strictFunctionTypes) を有効または無効にします。既存の 'jsconfig.json' または 'tsconfig.json' ファイルによってこの設定がオーバーライドされます。",
			"configuration.implicitProjectConfig.strictNullChecks": "プロジェクト外の JavaScript および TypeScript ファイルの [厳密な null チェック](https://www.typescriptlang.org/tsconfig#strictNullChecks) を有効または無効にします。既存の 'jsconfig.json' または 'tsconfig.json' ファイルによってこの設定がオーバーライドされます。",
			"configuration.inlayHints.enumMemberValues.enabled": "列挙型宣言内のメンバー値のインレイ ヒントを有効/無効にします:\r\n' ' ' typescript\r\n\r\nenum MyValue {\r\n A/* = 0 */;\r\n\tB/* = 1 */;\r\n}\r\n \r\n```\r\nワークスペースで TypeScript 4.4+ を使用する必要があります。",
			"configuration.inlayHints.functionLikeReturnTypes.enabled": "関数シグネチャの暗黙的な戻り値の型について、インレイ ヒントを有効化/無効化:\r\n' ' ' typescript\r\n\r\nfunction foo ()/*: number */{\r\n\treturn Date.now();\r\n}\r\n \r\n```\r\nワークスペースで TypeScript 4.4+ を使用する必要があります。",
			"configuration.inlayHints.parameterNames.enabled": "パラメーター名へのインレイ ヒントを有効/無効にする:\r\n' ' ' typescript\r\n\r\nparseInt (/* str: */' 123 ', /* radix: */8)\r\n \r\n```\r\nワークスペースで TypeScript 4.4+ を使用する必要があります。",
			"configuration.inlayHints.parameterNames.suppressWhenArgumentMatchesName": "パラメーター名と同一のテキストを持つ引数に対するパラメーター名のヒントを抑制します。",
			"configuration.inlayHints.parameterTypes.enabled": "暗黙的なパラメーター型へのインレイ ヒントを有効/無効にする:\r\n' ' ' typescript\r\n\r\naddEventListener ('click', e/*: MouseEvent */=>...)\r\n \r\n```\r\nワークスペースで TypeScript 4.4+ を使用する必要があります。",
			"configuration.inlayHints.propertyDeclarationTypes.enabled": "プロパティ宣言の暗黙的な型へのインレイ ヒントを有効/無効にする:\r\n```tTypescript\r\n\r\nclass Foo {\r\n\tprop /* :number */ = Date.now();\r\n}\r\n \r\n```\r\nワークスペースで TypeScript 4.4+ を使用する必要があります。",
			"configuration.inlayHints.variableTypes.enabled": "暗黙的な変数型のインレイ ヒントを有効/無効にします:\r\n' ' ' typescript\r\n\r\nconst foo/*: number */= Date。 now ();\r\n \r\n```\r\nワークスペースで TypeScript 4.4 + を使用する必要があります。",
			"configuration.javascript.checkJs.checkJs.deprecation": "この設定は、`js/ts.implicitProjectConfig.checkJs` を優先して非推奨になりました。",
			"configuration.javascript.checkJs.experimentalDecorators.deprecation": "この設定は、`js/ts.implicitProjectConfig.experimentalDecorators` を優先して非推奨になりました。",
			"configuration.suggest.autoImports": "自動インポートの提案を有効または無効にします。",
			"configuration.suggest.classMemberSnippets.enabled": "クラス メンバーのスニペット補完を有効または無効にします。ワークスペースで TypeScript 4.5 以降を使用する必要があります",
			"configuration.suggest.completeFunctionCalls": "パラメーター シグネチャを含む完全な関数。",
			"configuration.suggest.completeJSDocs": "JSDoc のコメントを完成させるための提案を有効/無効にします。",
			"configuration.suggest.includeAutomaticOptionalChainCompletions": "オプションのチェーン呼び出しを挿入する定義されていない可能性のある値で入力候補を表示することを有効または無効にします。TS 3.7+ および厳密な null チェックを有効にする必要があります。",
			"configuration.suggest.includeCompletionsForImportStatements": "部分的に入力されたインポート ステートメントで、自動インポート形式の入力候補を有効または無効にします。ワークスペースで TypeScript 4.3 以降を使用する必要があります。",
			"configuration.suggest.includeCompletionsWithSnippetText": "TS サーバーからのスニペットの入力候補を有効または無効にします。ワークスペースで TypeScript 4.3 以降を使用する必要があります。",
			"configuration.suggest.jsdoc.generateReturns": "JSDoc テンプレートの '@return' 注釈の生成を有効または無効にします。ワークスペースで TypeScript 4.2+ を使用する必要があります。",
			"configuration.suggest.names": "JavaScript の候補のファイルから一意の名前を含めることを有効または無効にします。名前の候補は、`@ts-check` または `checkJs` を使用して意味的にチェックされる JavaScript コードでは常に無効であることに注意してください。",
			"configuration.suggest.paths": "import ステートメントや require 呼び出しでパスの提案を有効/無効にします。",
			"configuration.surveys.enabled": "VS Code の JavaScript と TypeScript のサポートを向上させるために、ときどき行われるアンケートを有効/無効にします。",
			"configuration.tsserver.experimental.enableProjectDiagnostics": "(試験的) プロジェクト全体のエラー報告を有効にします。",
			"configuration.tsserver.maxTsServerMemory": "TypeScript サーバー プロセスに割り当てるメモリの最大量 (MB)。",
			"configuration.tsserver.useSeparateSyntaxServer": "折りたたみの計算やドキュメント シンボルのコンピューティングなど、構文に関連する操作に迅速に応答できる別の TypeScript サーバーの作成を有効または無効にします。ワークスペースで TypeScript 3.4.0 以上を使用する必要があります。",
			"configuration.tsserver.useSeparateSyntaxServer.deprecation": "この設定は、'typescript.tsserver.useSyntaxServer' のため廃止されました。",
			"configuration.tsserver.useSyntaxServer": "TypeScript がコード折りたたみの計算などの構文関連操作をより迅速に処理するため、専用サーバーを起動するかどうかを制御します。",
			"configuration.tsserver.useSyntaxServer.always": "軽量化構文サーバーを使用して、すべての IntelliSense 操作を処理します。この構文サーバーは、開いているファイルに対してのみ IntelliSense を提供します。",
			"configuration.tsserver.useSyntaxServer.auto": "構文操作専用の完全なサーバーと、軽量化サーバーの両方を生成します。構文サーバーは、プロジェクトの読み込み中に構文操作を高速化し、IntelliSense を提供するために使用されます。",
			"configuration.tsserver.useSyntaxServer.never": "専用の構文サーバーを使用しないでください。単一のサーバーを使用して、すべての IntelliSense 操作を処理します。",
			"configuration.tsserver.watchOptions": "ファイルとディレクトリを追跡するために使用する監視方法を構成します。ワークスペースで TypeScript 3.8 以降を使用する必要があります。",
			"configuration.tsserver.watchOptions.fallbackPolling": "ファイル システム イベントを使用する場合、このオプションは、システムがネイティブ ファイル ウォッチャーを使い果たし、ネイティブ ファイル ウォッチャーをサポートしていない場合に使用されるポーリング方法を指定します。",
			"configuration.tsserver.watchOptions.fallbackPolling.dynamicPriorityPolling ": "変更頻度の低いファイルの確認頻度が低い場合は、動的キューを使用します。",
			"configuration.tsserver.watchOptions.fallbackPolling.fixedPollingInterval": "すべてのファイルで、一定の間隔で 1 秒に数回変更がないか確認します。",
			"configuration.tsserver.watchOptions.fallbackPolling.priorityPollingInterval": "すべてのファイルで 1 秒間に数回変更を確認しますが、特定の種類のファイルを他のファイルより少ない頻度で確認する場合は、ヒューリスティックを使用してください。",
			"configuration.tsserver.watchOptions.synchronousWatchDirectory": "ディレクトリの遅延監視を無効にします。遅延監視は、一度に多数のファイル変更が生じる場合 (たとえば、npm install の実行からの node_modules の変更) には便利ですが、一般的ではない設定ではこのフラグを無効にすることができます。",
			"configuration.tsserver.watchOptions.watchDirectory": "再帰的なファイル監視機能を持たないシステムでディレクトリ ツリー全体を監視するための方法。",
			"configuration.tsserver.watchOptions.watchDirectory.dynamicPriorityPolling": "変更頻度の少ないディレクトリの確認頻度が少ない動的キューを使用します。",
			"configuration.tsserver.watchOptions.watchDirectory.fixedChunkSizePolling": "定期的にディレクトリのチャンクをポーリングします。ワークスペースで TypeScript 4.3 以上を使用する必要があります。",
			"configuration.tsserver.watchOptions.watchDirectory.fixedPollingInterval": "すべてのディレクトリで、一定の間隔で 1 秒間に数回、変更を確認します。",
			"configuration.tsserver.watchOptions.watchDirectory.useFsEvents": "ディレクトリの変更にオペレーティング システムまたはファイル システムのネイティブ イベントを使用しようとしています。",
			"configuration.tsserver.watchOptions.watchFile": "個々のファイルを監視するための方法。",
			"configuration.tsserver.watchOptions.watchFile.dynamicPriorityPolling": "変更頻度の低いファイルの確認頻度が低い場合は、動的キューを使用します。",
			"configuration.tsserver.watchOptions.watchFile.fixedChunkSizePolling": "定期的にファイルのチャンクをポーリングします。ワークスペースで TypeScript 4.3 以上を使用する必要があります。",
			"configuration.tsserver.watchOptions.watchFile.fixedPollingInterval": "すべてのファイルで、一定の間隔で 1 秒に数回変更がないかを確認します。",
			"configuration.tsserver.watchOptions.watchFile.priorityPollingInterval": "すべてのファイルで 1 秒間に数回変更を確認しますが、ヒューリスティックを使用して、特定の種類のファイルを他のファイルよりも少ない頻繁で確認することができます。",
			"configuration.tsserver.watchOptions.watchFile.useFsEvents": "ファイルの変更にオペレーティング システムまたはファイル システムのネイティブ イベントを使用しようとしています。",
			"configuration.tsserver.watchOptions.watchFile.useFsEventsOnParentDirectory": "オペレーティング システムまたはファイル システムのネイティブ イベントを使用して、ディレクトリを含んでいるファイルに対する変更をリッスンします。使用するファイル ウォッチャーの数を減らすことができますが、正確性が低くなります。",
			"configuration.typescript": "TypeScript",
			"description": "JavaScript と TypeScript ファイルに豊富な言語サポートを提供。",
			"displayName": "TypeScript と JavaScript の言語機能",
			"format.insertSpaceAfterCommaDelimiter": "コンマ区切り記号の後のスペース処理を定義します。",
			"format.insertSpaceAfterConstructor": "コンストラクター キーワードの後のスペース処理を定義します。",
			"format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": "匿名関数の関数キーワードの後のスペース処理を定義します。",
			"format.insertSpaceAfterKeywordsInControlFlowStatements": "制御フロー ステートメント内のキーワードの後のスペース処理を定義します。",
			"format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": "左右の空のかっこの間のスペース処理を定義します。",
			"format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": "JSX 式の始め波かっこの後と終わり波かっこの前のスペース処理を定義します。",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": "左右の空でないかっこの間のスペース処理を定義します。",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": "左右の空でない角かっこの間のスペース処理を定義します。",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": "左右の空でないかっこの間のスペース処理を定義します。",
			"format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": "テンプレート文字列の始め波かっこの後と終わり波かっこの前のスペース処理を定義します。",
			"format.insertSpaceAfterSemicolonInForStatements": "for ステートメント内のセミコロンの後のスペース処理を定義します。",
			"format.insertSpaceAfterTypeAssertion": "TypeScript の型アサーションの後のスペース処理を定義します。",
			"format.insertSpaceBeforeAndAfterBinaryOperators": "2 項演算子の後のスペース処理を定義します。",
			"format.insertSpaceBeforeFunctionParenthesis": "関数の引数のかっこの前にあるスペース処理を定義します。",
			"format.placeOpenBraceOnNewLineForControlBlocks": "新しい行にコントロール ブロックの始め波かっこを配置するかどうかを定義します。",
			"format.placeOpenBraceOnNewLineForFunctions": "新しい行に関数の始め波かっこを配置するかどうかを定義します。",
			"format.semicolons": "オプションのセミコロンの扱いを定義します。ワークスペースで TypeScript 3.7 バージョン以上を使用する必要があります。",
			"format.semicolons.ignore": "セミコロンを挿入または削除しないでください。",
			"format.semicolons.insert": "ステートメントの最後にセミコロンを挿入します。",
			"format.semicolons.remove": "不要なセミコロンを削除します。",
			"goToProjectConfig.title": "プロジェクト構成に移動",
			"inlayHints.parameterNames.all": "リテラル引数およびリテラル引数以外の引数に対してパラメーター名のヒントを有効にします。",
			"inlayHints.parameterNames.literals": "リテラル引数に対してのみ、パラメーター名のヒントを有効にします。",
			"inlayHints.parameterNames.none": "パラメーター名のヒントを無効にします。",
			"javascript.format.enable": "既定の JavaScript フォーマッタを有効/無効にします。",
			"javascript.referencesCodeLens.enabled": "JavaScript ファイル内で CodeLens の参照を有効/無効にします。",
			"javascript.referencesCodeLens.showOnAllFunctions": "JavaScript ファイル内のすべての関数で CodeLens への参照を有効または無効にします。",
			"javascript.suggestionActions.enabled": "エディター内で JavaScript ファイルの診断の提案を有効または無効にします。",
			"javascript.validate.enable": "JavaScript の検証を有効/無効にします。",
			"reloadProjects.title": "プロジェクトの再読み込み",
			"taskDefinition.tsconfig.description": "TS ビルドを定義する tsconfig ファイル。",
			"typescript.autoClosingTags": "JSX タグの自動終了を有効または無効にします。",
			"typescript.check.npmIsInstalled": "npm が [自動タイプ取得] 用にインストールされているかどうかを確認します (https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition)。",
			"typescript.disableAutomaticTypeAcquisition": "[自動タイプ取得] (https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition) を無効にします。自動タイプ取得では、外部ライブラリの IntelliSense を向上させるために、npm から '@types' パッケージが取得されます。",
			"typescript.enablePromptUseWorkspaceTsdk": "ワークスペースで Intellisense 用に構成されている TypeScript バージョンを使用することについてユーザーへの確認を有効にします。",
			"typescript.findAllFileReferences": "ファイル参照の検索",
			"typescript.format.enable": "既定の TypeScript フォーマッタを有効/無効にします。",
			"typescript.implementationsCodeLens.enabled": "CodeLens の実装を有効/無効にします。この CodeLens は interface の実装を表示します。",
			"typescript.locale": "JavaScript と TypeScript のエラーを報告するために使用するロケールを設定します。既定では VS Code のロケールを使用します。",
			"typescript.npm": "[自動タイプ取得] に使われる npm 実行可能ファイルへのパスを指定します (https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition)。",
			"typescript.openTsServerLog.title": "TS サーバーのログを開く",
			"typescript.preferences.importModuleSpecifier": "自動 import の優先パス スタイル。",
			"typescript.preferences.importModuleSpecifier.nonRelative": "`jsconfig.json` または `tsconfig.json` に構成されている `baseUrl` または `paths` に基づいて非相対インポートを優先します。",
			"typescript.preferences.importModuleSpecifier.projectRelative": "相対インポート パスでパッケージまたはプロジェクト ディレクトリが提供される場合にのみ、非相対インポートを優先します。ワークスペースで TypeScript 4.2+ を使用する必要があります。",
			"typescript.preferences.importModuleSpecifier.relative": "インポートされたファイルの場所への相対パスを優先します。",
			"typescript.preferences.importModuleSpecifier.shortest": "相対インポートよりもパス セグメント数が少なくなる場合にのみ、非相対インポートを優先します。",
			"typescript.preferences.importModuleSpecifierEnding": "自動インポート用に終了する優先パス。ワークスペースで TypeScript 4.5 以降を使用する必要があります。",
			"typescript.preferences.importModuleSpecifierEnding.auto": "プロジェクト設定を使用してデフォルトを選択します。",
			"typescript.preferences.importModuleSpecifierEnding.index": "./component/index.js' を './component/index' に短縮します。",
			"typescript.preferences.importModuleSpecifierEnding.js": "パスの末尾を短くしないでください。拡張子 '.js' を含めます。",
			"typescript.preferences.importModuleSpecifierEnding.minimal": "'./component/index.js' を './component' に短縮します。",
			"typescript.preferences.includePackageJsonAutoImports": "使用可能な自動インポートについて 'package.json' の依存関係の検索を有効または無効にします。",
			"typescript.preferences.includePackageJsonAutoImports.auto": "パフォーマンスの推定影響に基づいて依存関係を検索します。",
			"typescript.preferences.includePackageJsonAutoImports.off": "依存関係を検索しないでください。",
			"typescript.preferences.includePackageJsonAutoImports.on": "常に依存関係を検索します。",
			"typescript.preferences.jsxAttributeCompletionStyle": "JSX 属性補完向けに優先されるスタイル。",
			"typescript.preferences.jsxAttributeCompletionStyle.auto": "グッズの種類に基づく属性名の後に `={}` または `=\"\"` を挿入します。",
			"typescript.preferences.jsxAttributeCompletionStyle.braces": "属性名の後に `={}` を挿入します。",
			"typescript.preferences.jsxAttributeCompletionStyle.none": "属性名の挿入のみ。",
			"typescript.preferences.quoteStyle": "クイック修正に使用するのに好ましい引用符のスタイル: 'single' 引用符、'double' 引用符、既存のインポートから引用符の種類を推測する 'auto'。",
			"typescript.preferences.renameShorthandProperties.deprecationMessage": "設定 'typescript.preferences.renameShorthandProperties' は非推奨になりました。'typescript.preferences.useAliasesForRenames' をお勧めします",
			"typescript.preferences.useAliasesForRenames": "名前の変更時にオブジェクトの省略形のプロパティのエイリアスの導入を有効または無効にします。ワークスペースで TypeScript 3.4 以降を使用する必要があります。",
			"typescript.problemMatchers.tsc.label": "TypeScript の問題",
			"typescript.problemMatchers.tscWatch.label": "TypeScript の問題 (ウォッチ モード)",
			"typescript.referencesCodeLens.enabled": "TypeScript ファイルで CodeLens の参照を有効/無効にします。",
			"typescript.referencesCodeLens.showOnAllFunctions": "有効および無効は、TypeScript ファイル内のすべての関数で CodeLens を参照します。",
			"typescript.reportStyleChecksAsWarnings": "スタイル チェックを警告として報告します。",
			"typescript.restartTsServer": "TS サーバーを再起動",
			"typescript.selectTypeScriptVersion.title": "TypeScript のバージョンを選択...",
			"typescript.suggest.enabled": "オートコンプリートの提案を有効/無効にします。",
			"typescript.suggestionActions.enabled": "エディター内で TypeScript ファイルの診断の提案を有効または無効にします。",
			"typescript.tsc.autoDetect": "tsc タスクの自動検出を制御します。",
			"typescript.tsc.autoDetect.build": "単一の実行コンパイルタスクのみを作成します。",
			"typescript.tsc.autoDetect.off": "この機能を無効にします。",
			"typescript.tsc.autoDetect.on": "ビルドとウォッチ、両方のタスクを作成します。",
			"typescript.tsc.autoDetect.watch": "コンパイルタスクとウォッチタスクのみを作成します。",
			"typescript.tsdk.desc": "IntelliSense に使用する、TypeScript インストールの下にある tsserver および lib*.d.ts ファイルのフォルダー パスを指定します。例: './node_modules/typescript/lib'。\r\n\r\n- ユーザー設定として指定した場合は、'typescript.tsdk' からの TypeScript バージョンによって組み込みの TypeScript バージョンが自動的に置き換えられます。\r\n- ワークスペース設定として指定した場合は、'typescript.tsdk' で 'TypeScript: Select TypeScript version' コマンドを使用することによって、IntelliSense のためにそのワークスペース バージョンの TypeScript を使用するように切り替えることができます。\r\n\r\nTypeScript バージョンの管理について詳しくは、[TypeScript のドキュメント](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions) をご覧ください。",
			"typescript.tsserver.enableTracing": "ディレクトリへの TS サーバーのパフォーマンスのトレースを有効にします。これらのトレース ファイルは TS サーバーのパフォーマンスの問題を診断するために使用できます。ログには、プロジェクトのファイル パス、ソース コード、その他の潜在的に機密性の高い情報が含まれている場合があります。",
			"typescript.tsserver.log": "ファイルへの TS サーバーのログを有効にします。このログは TS サーバーの問題を診断するために使用できます。ログには、プロジェクトのファイルパス、ソースコード、その他の潜在的に機密性の高い情報が含まれている場合があります。",
			"typescript.tsserver.pluginPaths": "TypeScript 言語サービス プラグインを検出する追加のパス。",
			"typescript.tsserver.pluginPaths.item": "絶対または相対パスのいずれか。相対パスはワークスペース フォルダーに対して解決されます。",
			"typescript.tsserver.trace": "TS サーバーに送信されるメッセージのトレースを有効にします。このトレースは TS サーバーの問題を診断するために使用できます。トレースには、プロジェクトのファイルパス、ソースコード、その他の潜在的に機密性の高い情報が含まれている場合があります。",
			"typescript.updateImportsOnFileMove.enabled": "VS Code で名前変更や移動を行ったファイルのインポート パスの自動更新を有効または無効にします。",
			"typescript.updateImportsOnFileMove.enabled.always": "常に自動的にパスを更新します。",
			"typescript.updateImportsOnFileMove.enabled.never": "パスの名前を変更せず確認も行いません。",
			"typescript.updateImportsOnFileMove.enabled.prompt": "名前を変更するときに確認をします。",
			"typescript.validate.enable": "TypeScript の検証を有効/無効にします。",
			"typescript.workspaceSymbols.scope": "[ワークスペース内のシンボルへの移動](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name) でどのファイルを検索するかを制御します。",
			"typescript.workspaceSymbols.scope.allOpenProjects": "開いているすべての JavaScript または TypeScript プロジェクトからシンボルを検索します。ワークスペースで TypeScript 3.9 以降を使用する必要があります。",
			"typescript.workspaceSymbols.scope.currentProject": "現在の JavaScript または TypeScript プロジェクトからのみシンボルを検索します。",
			"virtualWorkspaces": "仮想ワークスペースでは、ファイル間の参照の解決や検索はサポートされていません。",
			"workspaceTrust": "この拡張機能は、ワークスペースで指定されたコードを実行するため、ワークスペース バージョンを使用する場合には、ワークスペースの信頼が必要です。"
		}
	}
}