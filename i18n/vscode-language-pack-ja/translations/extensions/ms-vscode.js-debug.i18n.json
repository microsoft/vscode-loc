{
	"": [
		"--------------------------------------------------------------------------------------------",
		"Copyright (c) Microsoft Corporation. All rights reserved.",
		"Licensed under the MIT License. See License.txt in the project root for license information.",
		"--------------------------------------------------------------------------------------------",
		"Do not edit this file. It is machine generated."
	],
	"version": "1.0.0",
	"contents": {
		"/src/adapter/breakpoints/userDefinedBreakpoint": {
			"breakpoint.provisionalBreakpoint": "バインドされていないブレークポイント"
		},
		"/src/adapter/console/queryObjectsMessage": {
			"queryObject.couldNotQuery": "指定されたオブジェクトを照会できませんでした",
			"queryObject.errorPreview": "プレビューを生成できませんでした: {0}",
			"queryObject.invalidObject": "照会できるのはオブジェクトのみです"
		},
		"/src/adapter/console/textualMessage": {
			"console.assert": "アサーションの失敗"
		},
		"/src/adapter/customBreakpoints": {
			"breakpoint.animationFrameFired": "アニメーション フレームの発生",
			"breakpoint.cancelAnimationFrame": "アニメーション フレームの取り消し",
			"breakpoint.closeAudioContext": "AudioContext を閉じる",
			"breakpoint.createAudioContext": "AudioContext の作成",
			"breakpoint.createCanvasContext": "キャンバス コンテキストの作成",
			"breakpoint.cspViolation": "コンテンツ セキュリティ ポリシーによってスクリプトがブロックされた",
			"breakpoint.cspViolationNamed": "CSP 違反 \"{0}\"",
			"breakpoint.cspViolationNamedDetails": "コンテンツ セキュリティ ポリシー違反のインストルメンテーション ブレークポイントで一時停止しました (ディレクティブ \"{0}\")",
			"breakpoint.eventListenerNamed": "\"{1}\" でトリガーされたイベント リスナー ブレークポイント \"{0}\" で一時停止",
			"breakpoint.instrumentationNamed": "インストルメンテーション ブレークポイント \"{0}\" で一時停止",
			"breakpoint.requestAnimationFrame": "アニメーション フレームの要求",
			"breakpoint.resumeAudioContext": "AudioContext の再開",
			"breakpoint.scriptFirstStatement": "スクリプトの最初のステートメント",
			"breakpoint.setInnerHtml": "innerHTML の設定",
			"breakpoint.setIntervalFired": "setInterval が発生",
			"breakpoint.setTimeoutFired": "setTimeout が発生",
			"breakpoint.suspendAudioContext": "AudioContext が中断",
			"breakpoint.webglErrorFired": "WebGL エラーが発生",
			"breakpoint.webglErrorNamed": "WebGL エラー \"{0}\"",
			"breakpoint.webglErrorNamedDetails": "WebGL エラー インストルメンテーション ブレークポイントで一時停止 (エラー \"{0}\")",
			"breakpoint.webglWarningFired": "WebGL 警告が発生"
		},
		"/src/adapter/debugAdapter": {
			"breakpoint.caughtExceptions": "キャッチされた例外",
			"breakpoint.caughtExceptions.description": "後でキャッチされた場合でも、すべてのスロー エラーで中断します。",
			"breakpoint.uncaughtExceptions": "キャッチされない例外",
			"error.cannotPrettyPrint": "再フォーマットできません",
			"error.sourceContentDidFail": "ソース コンテンツを取得できません",
			"error.sourceNotFound": "ソースが見つかりません",
			"error.variableNotFound": "変数が見つかりません"
		},
		"/src/adapter/profiling/basicCpuProfiler": {
			"profile.cpu.description": "Chrome DevTools で開くことができる、.cpuprofile ファイルを生成します",
			"profile.cpu.label": "CPU プロファイル"
		},
		"/src/adapter/profiling/heapDumpProfiler": {
			"profile.heap.description": "Chrome DevTools で開くことができる、.heapsnapshot ファイルを生成します",
			"profile.heap.label": "ヒープのスナップショット"
		},
		"/src/adapter/sources": {
			"source.skipFiles": "skipFiles によってスキップされました"
		},
		"/src/adapter/stackTrace": {
			"scope.block": "ブロック",
			"scope.catch": "Catch ブロック",
			"scope.closure": "クロージャ",
			"scope.closureNamed": "クロージャ ({0})",
			"scope.eval": "Eval",
			"scope.global": "GLOBAL",
			"scope.local": "LOCAL",
			"scope.module": "モジュール",
			"scope.returnValue": "戻り値",
			"scope.script": "スクリプト",
			"scope.with": "With ブロック",
			"smartStepSkipLabel": "smartStep によりスキップされました",
			"source.skipFiles": "skipFiles によってスキップされました"
		},
		"/src/adapter/threads": {
			"error.evaluateDidFail": "評価できません",
			"error.evaluateOnAsyncStackFrame": "非同期スタック フレームで評価できません",
			"error.pauseDidFail": "一時停止できません",
			"error.restartFrameAsync": "非同期フレームを再起動できません",
			"error.resumeDidFail": "再開できません",
			"error.stackFrameNotFound": "スタック フレームが見つかりません",
			"error.stepInDidFail": "ステップ インできません",
			"error.stepOutDidFail": "ステップ アウトできません",
			"error.stepOverDidFail": "次のステップに進むことができません",
			"error.threadNotPaused": "スレッドが一時停止されていません",
			"error.threadNotPausedOnException": "スレッドが例外で一時停止されていません",
			"pause.DomBreakpoint": "DOM ブレークポイントで一時停止しました",
			"pause.assert": "アサートで一時停止しました",
			"pause.breakpoint": "ブレークポイントで一時停止しました",
			"pause.debugCommand": "debug() 呼び出しで一時停止しました",
			"pause.default": "一時停止しました",
			"pause.eventListener": "イベント リスナーで一時停止しました",
			"pause.exception": "例外で一時停止しました",
			"pause.instrumentation": "インストルメンテーション ブレークポイントで一時停止しました",
			"pause.oom": "メモリ不足の例外の前に一時停止しました",
			"pause.promiseRejection": "Promise の拒否で一時停止しました",
			"pause.xhr": "XMLHttpRequest またはフェッチで一時停止しました",
			"reason.description.restart": "フレーム エントリで一時停止しました",
			"warnings.handleSourceMapPause.didNotWait": "警告: {0} のソース マップの処理に {1} ミリ秒より長くかかったため、スクリプトのすべてのブレークポイントが設定されるのを待たずに実行を継続しました。"
		},
		"/src/adapter/variables": {
			"error.customValueDescriptionGeneratorFailed": "{0} (説明できませんでした: {1})",
			"error.emptyExpression": "空の値は設定できません",
			"error.failedToCustomizeObjectProperties": "プロパティのカスタマイズに失敗しました",
			"error.invalidExpression": "無効な式です",
			"error.setVariableDidFail": "変数値を設定できません",
			"error.unknown": "不明なエラー",
			"error.variableNotFound": "変数が見つかりません"
		},
		"/src/binder": {
			"breakpoint.provisionalBreakpoint": "バインドされていないブレークポイント"
		},
		"/src/dap/errors": {
			"NVM_HOME.not.found.message": "'runtimeVersion' 属性には Node.js バージョン マネージャー 'nvm-windows' または 'nvs' が必要です。",
			"NVS_HOME.not.found.message": "属性 'runtimeVersion' を使用するには、Node.js バージョン マネージャー 'nvs' または 'nvm' をインストールする必要があります。",
			"VSND2011": "ターミナル ({0}) でデバッグ ターゲットを起動できません。",
			"VSND2029": "ファイル ({0}) から環境変数を読み込めません。",
			"asyncScopesNotAvailable": "非同期スタックでは変数を使用できません",
			"breakpointSyntaxError": "行 {1} での条件 {0} のブレークポイントの設定で構文エラーが発生しました: {2}",
			"browserVersionNotFound": "{0} バージョン {1} が見つかりません。自動検出された使用可能なバージョン: {2}。launch.json で \"runtimeExecutable\" をそれらのうちの 1 つに設定するか、またはブラウザーの実行可能ファイルへの絶対パスを指定することができます。",
			"error.browserAttachError": "ブラウザーにアタッチできません",
			"error.browserLaunchError": "ブラウザーを起動できません: \"{0}\"",
			"error.threadNotFound": "ターゲット ページが見つかりません。デバッグするページと一致するように \"urlFilter\" を更新する必要がある場合があります。",
			"invalidHitCondition": "ヒット条件 \"{0}\" が無効です。\"> 42\" または \"== 2\" のような式が必要です。",
			"noBrowserInstallFound": "システムにブラウザーのインストールが見つかりません。インストールするか、launch.json の \"runtimeExecutable\" でブラウザーへの絶対パスを指定してみてください。",
			"profile.error.concurrent": "新しいプロファイルを開始するのは、実行中のものを停止した後にしてください。",
			"profile.error.generic": "ターゲットからのプロファイルの取得でエラーが発生しました。",
			"runtime.node.notfound": "Node.js バイナリ \"{0}\" が見つかりません: {1}。Node.js がインストールされていて PATH に含まれていることを確認するか、launch.json で \"runtimeExecutable\" を設定してください",
			"runtime.node.outdated": "\"{0}\" にある Node のバージョンが古くなっています (バージョン {1})。少なくとも Node 8.x が必要です。",
			"runtime.version.not.found.message": "Node.js バージョン '{0}' は、バージョン マネージャー {1} を使用してインストールされていません。",
			"sourcemapParseError": "{0} のソース マップを読み取れませんでした: {1}"
		},
		"/src/debugServer": {
			"breakpoint.provisionalBreakpoint": "バインドされていないブレークポイント"
		},
		"/src/targets/browser/browserAttacher": {
			"attach.cannotConnect": "{0} でターゲットに接続できません: {1}",
			"chrome.targets.placeholder": "タブを選択してください"
		},
		"/src/targets/node/nodeAttacher": {
			"node.attach.restart.message": "デバッグ対象への接続が失われました。{0} ミリ秒以内に再接続します\r\n"
		},
		"/src/targets/node/nodeBinaryProvider": {
			"outOfDate": "{0} このままデバッグしますか?",
			"runtime.node.notfound.enoent": "パスが存在しません",
			"runtime.node.notfound.spawnErr": "バージョンの取得でエラーが発生しました: {0}",
			"warning.16bpIssue": "一部のブレークポイントは、お使いのバージョンの Node.js では動作しない可能性があります。最新のバグ、パフォーマンス、セキュリティの修正プログラムのためにアップグレードすることをお勧めします。詳細情報: https://aka.ms/AAcsvqm",
			"warning.8outdated": "古いバージョンの Node.js を実行しています。最新のバグ、パフォーマンス、およびセキュリティ修正プログラムのために、アップグレードすることをお勧めします。",
			"yes": "はい"
		},
		"/src/ui/autoAttach": {
			"details": "詳細"
		},
		"/src/ui/companionBrowserLaunch": {
			"cannotDebugInBrowser": "こちらからデバッグ モードでブラウザーを起動することはできません。デバッグを有効にするには、このワークスペースをデスクトップ上の VS Code で開きます。"
		},
		"/src/ui/configuration/chromiumDebugConfigurationProvider": {
			"chrome.launch.name": "localhost に対して Chrome を起動する",
			"existingBrowser.alert": "ブラウザーは既に {0} から実行されているようです。それを閉じてからデバッグしてみてください。それ以外の場合は、VS Code がそれに接続できない可能性があります。",
			"existingBrowser.debugAnyway": "このままデバッグ",
			"existingBrowser.location.default": "古いデバッグ セッション",
			"existingBrowser.location.userDataDir": "構成された userDataDir"
		},
		"/src/ui/configuration/edgeDebugConfigurationProvider": {
			"chrome.launch.name": "localhost に対して Edge を起動する"
		},
		"/src/ui/configuration/nodeDebugConfigurationProvider": {
			"debug.terminal.label": "JavaScript デバッグ ターミナル",
			"node.launch.currentFile": "現在のファイルの実行",
			"node.launch.script": "スクリプトの実行: {0}"
		},
		"/src/ui/configuration/nodeDebugConfigurationResolver": {
			"cwd.notFound": "構成された 'cwd' {0} が存在しません。",
			"mern.starter.explanation": "'{0}' プロジェクトのための起動構成を生成しました。",
			"node.launch.config.name": "プログラムの起動",
			"outFiles.explanation": "生成された JavaScript をカバーするように、 'outFiles' 属性で glob パターンを調整します。",
			"program.guessed.from.package.json.explanation": "'package.json' を基に起動構成を生成しました。",
			"program.not.found.message": "デバッグするプログラムが見つかりません"
		},
		"/src/ui/debugLinkUI": {
			"debugLink.invalidUrl": "指定された URL が無効です",
			"debugLink.savePrompt": "後で簡単にアクセスできるように、launch.json の構成を保存しますか?",
			"never": "なし",
			"no": "いいえ",
			"yes": "はい"
		},
		"/src/ui/debugNpmScript": {
			"debug.npm.noScripts": "package.json に npm スクリプトがありません",
			"debug.npm.noWorkspaceFolder": "npm スクリプトをデバッグするには、ワークスペース フォルダーを開く必要があります。",
			"debug.npm.notFound.open": "package.json を編集",
			"debug.npm.parseError": "{0} を読み取ることができませんでした: {1}"
		},
		"/src/ui/debugTerminalUI": {
			"terminal.cwdpick": "新しいターミナルの作業ディレクトリを選択してください"
		},
		"/src/ui/diagnosticsUI": {
			"inspectSessionEnded": "デバッグ セッションは既に終了しているようです。もう一度デバッグを試してから、[デバッグ: ブレークポイントの問題の診断] コマンドを実行します。",
			"never": "なし",
			"notNow": "後で",
			"selectInspectSession": "検査するセッションを選択します。",
			"yes": "はい"
		},
		"/src/ui/disableSourceMapUI": {
			"always": "常時",
			"disableSourceMapUi.msg": "これはソースマップで参照されている、不足しているファイル パスです。代わりにコンパイル済みのバージョンをデバッグしますか?",
			"no": "いいえ",
			"yes": "はい"
		},
		"/src/ui/edgeDevToolOpener": {
			"selectEdgeToolSession": "devtools を開くページを選択します"
		},
		"/src/ui/linkedBreakpointLocationUI": {
			"ignore": "無視する",
			"readMore": "詳細を参照"
		},
		"/src/ui/longPredictionUI": {
			"longPredictionWarning.disable": "今後は表示しない",
			"longPredictionWarning.message": "ブレークポイントの構成に時間がかかっています。launch.json で 'outFiles' を更新することによって、スピードアップさせることができます。",
			"longPredictionWarning.noFolder": "開いているワークスペース フォルダーがありません。",
			"longPredictionWarning.open": "launch.json を開く"
		},
		"/src/ui/prettyPrint": {
			"never": "行わない",
			"no": "いいえ",
			"yes": "はい"
		},
		"/src/ui/processPicker": {
			"cannot.enable.debug.mode.error": "プロセスに添付: プロセス '{0}' ({1}) に対してデバッグ モードを有効にできません。",
			"pickNodeProcess": "アタッチする node.js プロセスを選択してください",
			"process.id.error": "プロセスにアタッチ: '{0}' はプロセス ID ではないようです。",
			"process.id.port.signal": "プロセス ID: {0}、デバッグ ポート: {1} ({2})",
			"process.id.signal": "プロセス ID: {0} ({1})",
			"process.picker.error": "プロセス ピッカーが失敗しました ({0})"
		},
		"/src/ui/profiling/breakpointTerminationCondition": {
			"breakpointTerminationWarnConfirm": "了解",
			"breakpointTerminationWarnSlow": "ブレークポイントを有効にしてプロファイルを実行すると、コードのパフォーマンスが変化することがあります。\"期間\" または \"手動\" の終了条件で結果を検証するとよい場合があります。",
			"profile.termination.breakpoint.description": "特定のブレークポイントにヒットするまで実行します",
			"profile.termination.breakpoint.label": "ブレークポイントの選択"
		},
		"/src/ui/profiling/durationTerminationCondition": {
			"profile.termination.duration.description": "特定の期間にわたって実行します",
			"profile.termination.duration.inputTitle": "プロファイルの期間",
			"profile.termination.duration.invalidFormat": "数を入力してください",
			"profile.termination.duration.invalidLength": "1 より大きい数値を入力してください",
			"profile.termination.duration.label": "期間",
			"profile.termination.duration.placeholder": "プロファイルの期間 (秒) (例: \"5\")"
		},
		"/src/ui/profiling/manualTerminationCondition": {
			"profile.termination.duration.description": "手動で停止されるまで実行します",
			"profile.termination.duration.label": "手動"
		},
		"/src/ui/profiling/uiProfileManager": {
			"no": "いいえ",
			"profile.alreadyRunning": "プロファイル セッションは既に実行中です。これを停止して、新しいセッションを開始しますか?",
			"profile.sessionState": "プロファイル",
			"profile.status.default": "$(loading) プロファイルを停止するにはクリックしてください",
			"profile.status.multiSession": "$(loading) プロファイルを停止するにはクリックしてください ({0} 個のセッション)",
			"profile.status.single": "$(loading) プロファイルを停止するにはクリックしてください ({0})",
			"profile.termination.title": "プロファイルの実行期間:",
			"profile.type.title": "プロファイルの種類:",
			"yes": "はい"
		},
		"/src/ui/profiling/uiProfileSession": {
			"profile.saving": "保存しています",
			"progress.profile.start": "プロファイルを開始しています...",
			"progress.profile.stop": "プロファイルを停止しています..."
		},
		"/src/ui/terminalLinkHandler": {
			"cantOpenChromeOnWeb": "こちらからデバッグ モードでブラウザーを起動することはできません。この Web ページをデバッグする場合は、デスクトップ上の VS Code からこのワークスペースを開いてください。",
			"terminalLinkHover.debug": "URL のデバッグ"
		},
		"/src/vsDebugServer": {
			"session.rootSessionName": "JavaScript デバッグ アダプター"
		},
		"package": {
			"add.browser.breakpoint": "ブラウザー ブレークポイントの追加",
			"attach.node.process": "Node のプロセスにアタッチ",
			"base.cascadeTerminateToConfigurations.label": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
			"browser.address.description": "デバッグ対象のブラウザーがリッスンしている IP アドレスまたはホスト名。",
			"browser.attach.port.description": "ブラウザーをリモート デバッグするために使用するポート。ブラウザーの起動時に '--remote-debugging-port' として指定します。",
			"browser.baseUrl.description": "パス baseUrl を解決するためのベース URL。URL をディスク上のファイルにマップする場合、baseURL はトリミングされます。既定では、起動 URL ドメインに設定されます。",
			"browser.browserAttachLocation.description": "ブラウザーを強制的に 1 つの場所でアタッチします。リモート ワークスペースで (ssh または WSL などを介して) これを使用すると、ローカルではなくリモート マシンでブラウザーをアタッチすることができます。",
			"browser.browserLaunchLocation.description": "ブラウザーを強制的に 1 つの場所で起動します。リモート ワークスペース (ssh または WSL などを介して) でこれを使用すると、ローカルではなくリモート マシンでブラウザーを開くことができます。",
			"browser.cleanUp.description": "デバッグ セッションが終了した後に実行するクリーンアップです。デバッグ対象のタブのみを閉じるか、ブラウザー全体を閉じます。",
			"browser.cwd.description": "ランタイム実行可能ファイル用の省略可能な作業ディレクトリです。",
			"browser.disableNetworkCache.description": "要求ごとのネットワーク キャッシュをスキップするかどうかを制御します",
			"browser.env.description": "ブラウザーの環境キーと値のペアから成るディクショナリ (省略可能)。",
			"browser.file.description": "ブラウザーで開くローカル HTML ファイル",
			"browser.includeDefaultArgs.description": "(デバッグを困難にする可能性のある機能を無効にする) 既定のブラウザー起動引数を起動に含めるかどうか。",
			"browser.inspectUri.description": "inspectUri の書き換えに使用する形式: '{curlyBraces}' 内にキーを補間するテンプレート文字列です。使用できるキーは以下のとおりです。\r\n - 'url.*' は、実行中のアプリケーションの解析されたアドレスです。例: '{url.port}', '{url.hostname}'\r\n - 'port' は、Chrome がリッスンするデバッグ ポートです。\r\n - 'browserInspectUri' は、起動したブラウザーのインスペクター URI です。\r\n - 'browserInspectUriPath' は起動したブラウザーのインスペクター URI のパス部分です (例: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\")。\r\n - 'wsProtocol' は、示唆される WebSocket プロトコルです。元の URL が 'https' の場合は 'wss' に設定され、それ以外の場合は 'ws' に設定されます。\r\n",
			"browser.launch.port.description": "ブラウザーがリッスンするポート。既定値は \"0\" で、パイプを介してブラウザーをデバッグするようになります。一般にこれはセキュリティに優れているため、別のツールからブラウザーに接続する必要がなければ、これを選択してください。",
			"browser.pathMapping.description": "ブラウザーのスクリプトをディスク上のスクリプトに解決するための、ローカル フォルダーへの URL またはパスのマッピング",
			"browser.perScriptSourcemaps.description": "ソース ファイルのベース名を含む一意のソースマップを使用してスクリプトを個別に読み込むかどうか。これは、多数の小さなスクリプトを処理するときに、ソースマップの処理を最適化するために設定できます。\"auto\" に設定すると、これが適切である既知のケースが自動的に検出されます。",
			"browser.profileStartup.description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
			"browser.restart": "ブラウザー接続が閉じたときに再接続するかどうか",
			"browser.revealPage": "タブにフォーカスする",
			"browser.runtimeArgs.description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
			"browser.runtimeExecutable.description": "'カナリア'、'安定'、'カスタム'、ブラウザー実行可能ファイルのパスのいずれか。[カスタム] は、カスタム ラッパー、カスタム ビルド、または CHROME_PATH 環境変数を意味します。",
			"browser.runtimeExecutable.edge.description": "'canary'、'stable'、'dev'、'custom'、ブラウザーの実行可能ファイルへのパスのいずれかです。custom は、カスタム ラッパー、カスタム ビルド、または EDGE_PATH 環境変数を指します。",
			"browser.server.description": "起動する Web サーバーを構成します。'ノード' 起動タスクと同じ構成になります。",
			"browser.skipFiles.description": "デバッグ時にスキップする、ファイル名またはフォルダー名の配列、またはパス glob。",
			"browser.smartStep.description": "ソースマップ化されたファイル内のマッピングされていない行を自動的にステップ実行します。たとえば、async/await または他の機能をダウンコンパイルする際に TypeScript が自動的に生成するコードです。",
			"browser.sourceMapPathOverrides.description": "ソース ファイルの場所をソースマップに指定されている内容からディスク上の場所へ書き換えるための一連のマッピング。詳しくは Readme をご覧ください。",
			"browser.sourceMapRenames.description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
			"browser.sourceMaps.description": "JavaScript ソース マップを使用します (存在する場合)。",
			"browser.targetSelection": "URL フィルターと一致するすべてのターゲットに接続する (\"automatic\") か、どれを選択するか尋ねます (\"pick\")。",
			"browser.timeout.description": "ブラウザーに接続するには、このミリ秒の間再試行してください。既定値は、10000 ミリ秒です。",
			"browser.url.description": "これとまったく同じ URL のタブを検索し、見つかった場合はそれにアタッチします",
			"browser.urlFilter.description": "この URL のページを検索し、見つかった場合はそれにアタッチします。ワイルドカード * を使用できます。",
			"browser.userDataDir.description": "既定では、ブラウザーは一時フォルダー内の個別のユーザー プロファイルで起動されます。このオプションを使用して、上書きします。false に設定すると、既定のユーザー プロファイルで起動します。既に `userDataDir` でインスタンスを起動している場合は、新しいブラウザーを起動することはできません。",
			"browser.vueComponentPaths": "'*.vue' コンポーネントを検索するファイル glob パターンの一覧。既定では、ワークスペース全体を検索します。これは、Vue CLI 4 で Vue のソースマップに必要な追加のルックアップのために指定する必要があります。この特殊な処理を無効にするには、この値を空の配列に設定します。",
			"browser.webRoot.description": "これは、Web サーバー ルートに対するワークスペースの絶対パスを指定します。ディスク上のファイルへの `/app.js` などのパスを解決するために使用されます。\"/\" は、pathMapping の短縮形です",
			"chrome.attach.description": "既にデバッグ モードになっている Chrome のインスタンスにアタッチする",
			"chrome.attach.label": "Chrome: アタッチ",
			"chrome.label": "Chrome",
			"chrome.launch.description": "Chrome を起動して URL をデバッグする",
			"chrome.launch.label": "Chrome: 起動",
			"configuration.autoAttachMode": "'#debug.node.autoAttach#' がオンの場合に、自動的にアタッチしてデバッグするプロセスを構成します。'--inspect' フラグで起動されるノード プロセスは、この設定に関係なく、常にアタッチされます。",
			"configuration.autoAttachMode.always": "ターミナルで起動されるすべての Node.js プロセスに自動アタッチします。",
			"configuration.autoAttachMode.disabled": "オート アタッチが無効で、ステータス バーに表示されません。",
			"configuration.autoAttachMode.explicit": "`--inspect` が指定されている場合にのみ自動アタッチします。",
			"configuration.autoAttachMode.smart": "node_modules フォルダーにないスクリプトを実行しているときに自動アタッチします。",
			"configuration.autoAttachSmartPatterns": "\"スマート\" `#debug.javascript.autoAttachFilter#` モードでアタッチするタイミングを決定するために glob パターンを構成します。`$KNOWN_TOOLS$` は、共通テストとコード ランナーの名前の一覧で置き換えられます。[VS Code ドキュメントで詳細をご確認ください](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_auto-attach-smart-patterns)。",
			"configuration.autoExpandGetters": "プロパティのゲッターを自動的に展開するかどうかを構成します。これを false にすると、ゲッターは 'get propertyName' と表示され、それをクリックした場合にのみ評価されます。",
			"configuration.automaticallyTunnelRemoteServer": "リモート Web アプリをデバッグするときに、リモート サーバーを自動的にローカル マシンにトンネルするかどうかを構成します。",
			"configuration.breakOnConditionalError": "条件付きブレークポイントでエラーが発生したときに停止するかどうかを指定します。",
			"configuration.debugByLinkOptions": "デバッグ時に使用したオプションによって、デバッグ ターミナル内からクリックしたリンクが開きます。\"false\" に設定にすると、この動作を無効にできます。",
			"configuration.defaultRuntimeExecutables": "指定されていない場合に起動構成に使用される、既定の 'runtimeExecutable'。これは、Node.js またはブラウザーのインストールのカスタム パスを構成するために使用できます。",
			"configuration.npmScriptLensLocation": "npm スクリプトで \"実行\" と \"デバッグ\" のコード レンズが表示される場所。\"すべて\" のスクリプトまたはスクリプト セクションの \"上\" に表示するか、\"表示しない\" を指定できます。",
			"configuration.pickAndAttachOptions": "'デバッグ: Node.js のプロセスにアタッチ' コマンドでプロセスをデバッグするときに使用する既定のオプション",
			"configuration.resourceRequestOptions": "デバッガーでソース マップなどのリソースを読み込むときに使用する要求オプションです。ソースマップで認証が必要な場合または自己署名証明書を使用する場合などに、これを構成する必要がある可能性があります。オプションは、[`got`] (https://github.com/sindresorhus/got) ライブラリを使用して要求を作成するために使用されます。\r\n\r\n通常、証明書の検証を無効にするためには、'{\"https\": {\"rejectUnauthorized\": false}}' をパスします。",
			"configuration.suggestPrettyPrinting": "お客様がそれにステップ インしたときに縮小されたように見える JavaScript コードの再フォーマットを提案するかどうか。",
			"configuration.terminalOptions": "JavaScript デバッグ ターミナルおよび npm スクリプトの既定の起動オプション。",
			"configuration.unmapMissingSources": "元のファイルを読み取ることができない sourcemapped ファイルが自動的にマップ解除されるかどうかを構成します。これが False (既定) の場合は、プロンプトが表示されます。",
			"createDiagnostics.label": "ブレークポイントの問題を診断する",
			"customDescriptionGenerator.description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
			"customPropertiesGenerator.description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
			"debug.npm.edit": "package.json を編集",
			"debug.npm.noScripts": "package.json に npm スクリプトがありません",
			"debug.npm.noWorkspaceFolder": "npm スクリプトをデバッグするには、ワークスペース フォルダーを開く必要があります。",
			"debug.npm.parseError": "{0} を読み取ることができませんでした: {1}",
			"debug.npm.script": "npm スクリプトのデバッグ",
			"debug.terminal.attach": "Node.js ターミナル プロセスにアタッチする",
			"debug.terminal.label": "JavaScript デバッグ ターミナル",
			"debug.terminal.program.description": "起動されたターミナルで実行するコマンド。指定しない場合、ターミナルはプログラムを起動せずに開きます。",
			"debug.terminal.snippet.label": "デバッグ ターミナルで \"npm start\" を実行する",
			"debug.terminal.toggleAuto": "ターミナル Node.js の自動アタッチの切り替え",
			"debug.terminal.welcome": "[JavaScript デバッグ ターミナル](command:extension.js-debug.createDebuggerTerminal)\r\n\r\nJavaScript デバッグ ターミナルを使用して、コマンド ラインで実行される Node.js プロセスをデバッグできます。",
			"debug.terminal.welcomeWithLink": "[JavaScript デバッグ ターミナル] (コマンド: extension.js-debug.createDebuggerTerminal)\r\n\r\nJavaScript デバッグ ターミナルを使用して、コマンド ラインで実行される Node.js プロセスをデバッグできます。\r\n\r\n[デバッグ URL] (コマンド: xtension.js-debug.debugLink)",
			"debugLink.label": "リンクを開く",
			"edge.address.description": "Web ビューのデバッグ時に、Web ビューがリッスンしている IP アドレスまたはホスト名。設定しない場合、自動的に検出されます。",
			"edge.attach.description": "Microsoft Edge のインスタンスへのアタッチは既にデバッグ モードです",
			"edge.attach.label": "Microsoft Edge: アタッチ",
			"edge.label": "Edge",
			"edge.launch.description": "Microsoft Edge を起動して URL をデバッグする",
			"edge.launch.label": "Microsoft Edge: 起動",
			"edge.port.description": "Web ビューのデバッグ時に、Web ビュー デバッガーがリッスンしているポート。設定しない場合、自動的に検出されます。",
			"edge.useWebView.description": "(Microsoft Edge (Chromium) のみ) 'true' の場合、デバッガーはランタイム実行可能ファイルを WebView を含むホスト アプリケーションとして処理するため、ユーザーは WebView スクリプトの内容をデバッグできます。",
			"enableContentValidation.description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
			"errors.timeout": "{0}: {1} ミリ秒後にタイムアウト",
			"extension.description": "Node.js プログラムと Chrome をデバッグするための拡張機能。",
			"extensionHost.label": "VS Code 拡張機能の開発",
			"extensionHost.launch.config.name": "拡張機能の起動",
			"extensionHost.launch.debugWebWorkerHost": "Web ワーカー拡張機能ホストにアタッチする必要があるかどうかを構成します。",
			"extensionHost.launch.debugWebviews": "起動した VS Code インスタンスで Web ビューへのアタッチを試行するかどうかを構成します。これはデスクトップの VS Code でのみ機能します。",
			"extensionHost.launch.env.description": "拡張機能ホストに渡される環境変数。",
			"extensionHost.launch.rendererDebugOptions": "レンダラー プロセスにアタッチするときに使用される Chrome の起動オプション ('debugWebviews' または 'debugWebWorkerHost' を使用)。",
			"extensionHost.launch.runtimeExecutable.description": "VS Code への絶対パス。",
			"extensionHost.launch.stopOnEntry.description": "起動後に拡張機能ホストを自動的に停止します。",
			"extensionHost.snippet.launch.description": "デバッグ モードで VS Code 拡張機能を起動します",
			"extensionHost.snippet.launch.label": "VS Code 拡張機能の開発",
			"longPredictionWarning.disable": "今後は表示しない",
			"longPredictionWarning.message": "ブレークポイントの構成に時間がかかっています。launch.json で 'outFiles' を更新することによって、スピードアップさせることができます。",
			"longPredictionWarning.noFolder": "開いているワークスペース フォルダーがありません。",
			"longPredictionWarning.open": "launch.json を開く",
			"node.address.description": "デバッグするプロセスの TCP/IP アドレス。既定値は 'localhost' です。",
			"node.attach.attachExistingChildren.description": "生成済みの子プロセスにアタッチを試行するかどうか。",
			"node.attach.attachSpawnedProcesses.description": "生成された子を追跡するために、アタッチされたプロセスで環境変数を設定するかどうか。",
			"node.attach.config.name": "アタッチ",
			"node.attach.continueOnAttach": "true の場合、`--inspect-brk`を待機中の起動済みのプログラムを自動的に再開します",
			"node.attach.processId.description": "アタッチするプロセスの ID。",
			"node.attach.restart.description": "接続が切れた場合に、プログラムへの再接続が試行されます。'True' に設定すると、1 秒に 1 回、無期限に試行されます。代わりに、'delay' と 'maxAttempts' をオブジェクトに指定すれば、再試行の間隔と最大試行回数をカスタマイズできます。",
			"node.attachSimplePort.description": "設定した場合、指定したポート経由でプロセスにアタッチされます。Node.js プログラムでは一般にもはやこれは不要になっており、子プロセスをデバッグする機能が失われますが、Deno や Docker による起動など、より複雑なシナリオで役立つことがあります。0 に設定されている場合は、ランダムのポートが選択され、--inspect-brk が起動引数に自動的に追加されます。",
			"node.console.title": "Node デバッグ コンソール",
			"node.disableOptimisticBPs.description": "どのファイルについても、そのファイルのソースマップが読み込まれるまではブレークポイントを設定しないでください。",
			"node.killBehavior.description": "セッションの停止時にデバッグ プロセスを中止する方法を構成します。以下を指定できます:\r\n\r\n- forceful (既定): プロセス ツリーを強制的に停止します。posix 上では SIGKILL を、Windows 上では 'taskkill.exe /F' を 送信します。\r\n- polite: プロセス ツリーを正常に終了します。この方法でシャットダウンした後、不適切なプロセスが引き続き実行される可能性があります。posix 上では SIGTERM を、Windows 上では '/F' (force) フラグなしの taskkill.exe を送信します。\r\n-none: 終了は発生しません。",
			"node.label": "Node.js",
			"node.launch.args.description": "プログラムに渡すコマンド ライン引数。",
			"node.launch.autoAttachChildProcesses.description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
			"node.launch.config.name": "起動",
			"node.launch.console.description": "デバッグ ターゲットの起動場所です。",
			"node.launch.console.externalTerminal.description": "ユーザー設定を介して構成できる外部ターミナルです",
			"node.launch.console.integratedTerminal.description": "VS Code の統合ターミナルです",
			"node.launch.console.internalConsole.description": "VS Code デバッグ コンソールです (プログラムからの入力の読み取りはサポートしていません)",
			"node.launch.cwd.description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
			"node.launch.env.description": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
			"node.launch.envFile.description": "環境変数定義が含まれているファイルへの絶対パス。",
			"node.launch.logging": "ログ構成",
			"node.launch.logging.cdp": "Chrome DevTools Protocol メッセージのログ ファイルへのパス",
			"node.launch.logging.dap": "デバッグ アダプター プロトコル メッセージのログ ファイルへのパス",
			"node.launch.outputCapture.description": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。",
			"node.launch.program.description": "プログラムへの絶対パス。生成される値は、package.json ファイルと開かれたファイルを参照して推測されます。この属性を編集してください。",
			"node.launch.restart.description": "ゼロ以外の終了コードでプログラムが終了した場合は、プログラムを再起動してみてください。",
			"node.launch.runtimeArgs.description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
			"node.launch.runtimeExecutable.description": "使用するランタイム。絶対パス、または PATH 上で使用可能なランタイムの名前のいずれかです。省略した場合は、`node` とみなされます。",
			"node.launch.runtimeSourcemapPausePatterns": "エントリポイント ブレークポイントを手動で挿入するパターンの一覧。これは、[Serverless Framework を使用する場合] (https://github.com/microsoft/vscode-js-debug/issues/492) のように、存在しない、または起動前には検出できないソースマップを使用している場合に、デバッガーでブレークポイントを設定できるようにするために役立ちます。",
			"node.launch.runtimeVersion.description": "使用する `node` ランタイムのバージョン。`nvm` が必要です。",
			"node.launch.useWSL.deprecation": "'useWSL' は廃止され、サポートが終了されます。代わりに 'Remote - WSL' 拡張機能を使用します。",
			"node.launch.useWSL.description": "Windows Subsystem for Linux を使用します。",
			"node.localRoot.description": "プログラムの入ったローカル ディレクトリへのパス。",
			"node.pauseForSourceMap.description": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
			"node.port.description": "アタッチ先のデバッグ ポート。既定値は 9229 です。",
			"node.processattach.config.name": "プロセスにアタッチ",
			"node.profileStartup.description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
			"node.remoteRoot.description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
			"node.resolveSourceMapLocations.description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
			"node.showAsyncStacks.description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
			"node.snippet.attach.description": "実行中のノード プログラムにアタッチします",
			"node.snippet.attach.label": "Node.js: アタッチ",
			"node.snippet.attachProcess.description": "プロセス ピッカーを開いて、アタッチ先の node プロセスを選択します",
			"node.snippet.attachProcess.label": "Node.js: プロセスへのアタッチ",
			"node.snippet.electron.description": "Electron のメイン プロセスをデバッグします",
			"node.snippet.electron.label": "Node.js: Electron (メイン)",
			"node.snippet.gulp.description": "gulp タスクをデバッグします (プロジェクトにローカルの gulp がインストールされていることを確認します)",
			"node.snippet.gulp.label": "Node.js: Gulp タスク",
			"node.snippet.launch.description": "ノード プログラムをデバッグ モードで起動します",
			"node.snippet.launch.label": "Node.js: プログラムの起動",
			"node.snippet.mocha.description": "Mocha テストをデバッグします",
			"node.snippet.mocha.label": "Node.js: Mocha テスト",
			"node.snippet.nodemon.description": "nodemon を使用してソース変更時にデバッグ セッションを再起動します",
			"node.snippet.nodemon.label": "Node.js: nodemon のセットアップ",
			"node.snippet.npm.description": "npm の `debug` スクリプトにより Node プログラムを起動します",
			"node.snippet.npm.label": "Node.js: npm による起動",
			"node.snippet.remoteattach.description": "リモート ノード プログラムのデバッグ ポートにアタッチします",
			"node.snippet.remoteattach.label": "Node.js: リモート プログラムにアタッチする",
			"node.snippet.yo.description": "yeoman ジェネレーターをデバッグします (プロジェクト フォルダーで `npm link` を実行してインストールします)",
			"node.snippet.yo.label": "Node.js: Yeoman ジェネレーター",
			"node.sourceMapPathOverrides.description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
			"node.sourceMaps.description": "JavaScript ソース マップを使用します (存在する場合)。",
			"node.stopOnEntry.description": "起動後、プログラムを自動的に停止します。",
			"node.timeout.description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
			"node.versionHint.description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
			"node.websocket.address.description": "アタッチ先の正確な WebSocket アドレスです。指定しない場合は、アドレスとポートから探索されます。",
			"openEdgeDevTools.label": "ブラウザー Devtools を開く",
			"outFiles.description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
			"pretty.print.script": "デバッグ用の整形出力",
			"profile.start": "パフォーマンス プロファイルの取得",
			"profile.stop": "パフォーマンス プロファイルの停止",
			"remove.browser.breakpoint": "ブラウザー ブレークポイントの削除",
			"remove.browser.breakpoint.all": "すべてのブラウザー ブレークポイントを削除",
			"requestCDPProxy.label": "デバッグ セッションの CDP プロキシを要求する",
			"skipFiles.description": "デバッグ時にスキップするファイルの glob パターンの配列。パターン `<node_internals>/**` はすべての内部 Node.js モジュールに一致します。",
			"smartStep.description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
			"start.with.stop.on.entry": "デバッグを開始して、エントリで停止する",
			"startWithStopOnEntry.label": "デバッグを開始して、エントリで停止する",
			"timeouts.generalDescription": "いくつかのデバッガー操作のタイムアウト。",
			"timeouts.generalDescription.markdown": "いくつかのデバッガー操作のタイムアウト。",
			"timeouts.sourceMaps.description": "ソース マップ操作に関連するタイムアウト。",
			"timeouts.sourceMaps.sourceMapCumulativePause.description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
			"timeouts.sourceMaps.sourceMapMinPause.description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
			"toggle.skipping.this.file": "このファイルのスキップを切り替え",
			"trace.boolean.description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
			"trace.console.description": "ログをデバッグ コンソールにも返すかどうかを構成します。",
			"trace.description": "生成される診断出力を構成します。",
			"trace.level.description": "記録されるログのレベルを構成します。",
			"trace.logFile.description": "ディスク上のログが書き込まれる場所を構成します。",
			"trace.stdio.description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
			"trace.tags.description": "記録するログの種類を構成します。",
			"workspaceTrust.description": "このワークスペースでコードをデバッグするには、信頼が必要です。"
		}
	}
}