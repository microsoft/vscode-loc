{
	"": [
		"--------------------------------------------------------------------------------------------",
		"Copyright (c) Microsoft Corporation. All rights reserved.",
		"Licensed under the MIT License. See License.txt in the project root for license information.",
		"--------------------------------------------------------------------------------------------",
		"Do not edit this file. It is machine generated."
	],
	"version": "1.0.0",
	"contents": {
		"bundle": {
			"\"{0}\" has fingerprint \"{1}\"": "\"{0}\" has fingerprint \"{1}\"",
			"A branch named \"{0}\" already exists": "A branch named \"{0}\" already exists",
			"Absolute paths not supported in \"git.scanRepositories\" setting.": "Absolute paths not supported in \"git.scanRepositories\" setting.",
			"Add Remote": "Add Remote",
			"Add a new remote...": "Add a new remote...",
			"Add remote from URL": "Add remote from URL",
			"Add remote from {0}": "Add remote from {0}",
			"Add to Workspace": "Add to Workspace",
			"Always": "Always",
			"Always Pull": "Always Pull",
			"Are you sure you want to DELETE {0} files?\r\nThis is IRREVERSIBLE!\r\nThese files will be FOREVER LOST if you proceed.": "Are you sure you want to DELETE {0} files?\r\nThis is IRREVERSIBLE!\r\nThese files will be FOREVER LOST if you proceed.",
			"Are you sure you want to DELETE {0}?\r\nThis is IRREVERSIBLE!\r\nThis file will be FOREVER LOST if you proceed.": "Are you sure you want to DELETE {0}?\r\nThis is IRREVERSIBLE!\r\nThis file will be FOREVER LOST if you proceed.",
			"Are you sure you want to continue connecting?": "Are you sure you want to continue connecting?",
			"Are you sure you want to create an empty commit?": "Are you sure you want to create an empty commit?",
			"Are you sure you want to discard ALL changes in {0} files?\r\nThis is IRREVERSIBLE!\r\nYour current working set will be FOREVER LOST if you proceed.": "Are you sure you want to discard ALL changes in {0} files?\r\nThis is IRREVERSIBLE!\r\nYour current working set will be FOREVER LOST if you proceed.",
			"Are you sure you want to discard changes in {0} files?": "Are you sure you want to discard changes in {0} files?",
			"Are you sure you want to discard changes in {0}?": "Are you sure you want to discard changes in {0}?",
			"Are you sure you want to drop ALL stashes? There are {0} stashes that will be subject to pruning, and MAY BE IMPOSSIBLE TO RECOVER.": "Are you sure you want to drop ALL stashes? There are {0} stashes that will be subject to pruning, and MAY BE IMPOSSIBLE TO RECOVER.",
			"Are you sure you want to drop ALL stashes? There is 1 stash that will be subject to pruning, and MAY BE IMPOSSIBLE TO RECOVER.": "Are you sure you want to drop ALL stashes? There is 1 stash that will be subject to pruning, and MAY BE IMPOSSIBLE TO RECOVER.",
			"Are you sure you want to drop the stash: {0}?": "Are you sure you want to drop the stash: {0}?",
			"Are you sure you want to restore {0} files?": "Are you sure you want to restore {0} files?",
			"Are you sure you want to restore {0}?": "Are you sure you want to restore {0}?",
			"Are you sure you want to stage {0} files with merge conflicts?": "Are you sure you want to stage {0} files with merge conflicts?",
			"Are you sure you want to stage {0} with merge conflicts?": "Are you sure you want to stage {0} with merge conflicts?",
			"Ask Me Later": "Ask Me Later",
			"Branch name": "Branch name",
			"Branch name needs to match regex: {0}": "Branch name needs to match regex: {0}",
			"Can't push refs to remote. Try running \"Pull\" first to integrate your changes.": "Can't push refs to remote. Try running \"Pull\" first to integrate your changes.",
			"Can't undo because HEAD doesn't point to any commit.": "Can't undo because HEAD doesn't point to any commit.",
			"Changes": "Changes",
			"Checkout detached...": "Checkout detached...",
			"Choose Folder...": "Choose Folder...",
			"Choose a folder to clone {0} into": "Choose a folder to clone {0} into",
			"Choose a repository": "Choose a repository",
			"Clone from URL": "Clone from URL",
			"Clone from {0}": "Clone from {0}",
			"Cloning git repository \"{0}\"...": "Cloning git repository \"{0}\"...",
			"Commit": "Commit",
			"Commit & Push Changes": "Commit & Push Changes",
			"Commit & Sync Changes": "Commit & Sync Changes",
			"Commit Anyway": "Commit Anyway",
			"Commit Changes": "Commit Changes",
			"Commit Changes to New Branch": "Commit Changes to New Branch",
			"Commit Hash": "Commit Hash",
			"Commit Staged Changes": "Commit Staged Changes",
			"Commit message": "Commit message",
			"Commit operation was cancelled due to empty commit message.": "Commit operation was cancelled due to empty commit message.",
			"Commit to New Branch & Push Changes": "Commit to New Branch & Push Changes",
			"Commit to New Branch & Synchronize Changes": "Commit to New Branch & Synchronize Changes",
			"Commit to a New Branch": "Commit to a New Branch",
			"Commits without verification are not allowed, please enable them with the \"git.allowNoVerifyCommit\" setting.": "Commits without verification are not allowed, please enable them with the \"git.allowNoVerifyCommit\" setting.",
			"Committing & Pushing Changes...": "Committing & Pushing Changes...",
			"Committing & Synchronizing Changes...": "Committing & Synchronizing Changes...",
			"Committing Changes to New Branch...": "Committing Changes to New Branch...",
			"Committing Changes...": "Committing Changes...",
			"Committing to New Branch & Pushing Changes...": "Committing to New Branch & Pushing Changes...",
			"Committing to New Branch & Synchronizing Changes...": "Committing to New Branch & Synchronizing Changes...",
			"Conflict: Added By Them": "Conflict: Added By Them",
			"Conflict: Added By Us": "Conflict: Added By Us",
			"Conflict: Both Added": "Conflict: Both Added",
			"Conflict: Both Deleted": "Conflict: Both Deleted",
			"Conflict: Both Modified": "Conflict: Both Modified",
			"Conflict: Deleted By Them": "Conflict: Deleted By Them",
			"Conflict: Deleted By Us": "Conflict: Deleted By Us",
			"Continue Rebase": "Continue Rebase",
			"Continuing Rebase...": "Continuing Rebase...",
			"Could not clone your repository as Git is not installed.": "Could not clone your repository as Git is not installed.",
			"Create Empty Commit": "Create Empty Commit",
			"Create new branch from...": "Create new branch from...",
			"Create new branch...": "Create new branch...",
			"Current": "Current",
			"Current commit message only contains whitespace characters": "Current commit message only contains whitespace characters",
			"Delete Branch": "Delete Branch",
			"Delete File": "Delete File",
			"Delete Files": "Delete Files",
			"Delete file": "Delete file",
			"Deleted": "Deleted",
			"Discard 1 File": "Discard 1 File",
			"Discard 1 Tracked File": "Discard 1 Tracked File",
			"Discard All {0} Files": "Discard All {0} Files",
			"Discard Changes": "Discard Changes",
			"Discard {0} Tracked Files": "Discard {0} Tracked Files",
			"Don't Pull": "Don't Pull",
			"Don't Show Again": "Don't Show Again",
			"Download Git": "Download Git",
			"Email": "Email",
			"Failed to authenticate to git remote.": "Failed to authenticate to git remote.",
			"Failed to authenticate to git remote:\r\n\r\n{0}": "Failed to authenticate to git remote:\r\n\r\n{0}",
			"File \"{0}\" was deleted by them and modified by us.\r\n\r\nWhat would you like to do?": "File \"{0}\" was deleted by them and modified by us.\r\n\r\nWhat would you like to do?",
			"File \"{0}\" was deleted by us and modified by them.\r\n\r\nWhat would you like to do?": "File \"{0}\" was deleted by us and modified by them.\r\n\r\nWhat would you like to do?",
			"Force Checkout": "Force Checkout",
			"Force push is not allowed, please enable it with the \"git.allowForcePush\" setting.": "Force push is not allowed, please enable it with the \"git.allowForcePush\" setting.",
			"Git History": "Git History",
			"Git error": "Git error",
			"Git not found. Install it or configure it using the \"git.path\" setting.": "Git not found. Install it or configure it using the \"git.path\" setting.",
			"Git: {0}": "Git: {0}",
			"HEAD version of \"{0}\" is not available.": "HEAD version of \"{0}\" is not available.",
			"Ignored": "Ignored",
			"Incoming": "Incoming",
			"Index Added": "Index Added",
			"Index Copied": "Index Copied",
			"Index Deleted": "Index Deleted",
			"Index Modified": "Index Modified",
			"Index Renamed": "Index Renamed",
			"Initialize Repository": "Initialize Repository",
			"Intent to Add": "Intent to Add",
			"Invalid branch name": "Invalid branch name",
			"It looks like the current branch \"{0}\" might have been rebased. Are you sure you still want to pull into it?": "It looks like the current branch \"{0}\" might have been rebased. Are you sure you still want to pull into it?",
			"It looks like the current branch might have been rebased. Are you sure you still want to pull into it?": "It looks like the current branch might have been rebased. Are you sure you still want to pull into it?",
			"It's not possible to change the commit message in the middle of a rebase. Please complete the rebase operation and use interactive rebase instead.": "It's not possible to change the commit message in the middle of a rebase. Please complete the rebase operation and use interactive rebase instead.",
			"Keep Our Version": "Keep Our Version",
			"Keep Their Version": "Keep Their Version",
			"Learn More": "Learn More",
			"Log level: {0}": "Log level: {0}",
			"Make sure you configure your \"user.name\" and \"user.email\" in git.": "Make sure you configure your \"user.name\" and \"user.email\" in git.",
			"Merge Changes": "Merge Changes",
			"Message": "Message",
			"Message (commit on \"{0}\")": "Message (commit on \"{0}\")",
			"Message ({0} to commit on \"{1}\")": "Message ({0} to commit on \"{1}\")",
			"Message ({0} to commit)": "Message ({0} to commit)",
			"Modified": "Modified",
			"Never": "Never",
			"No": "No",
			"No rebase in progress.": "No rebase in progress.",
			"OK": "OK",
			"OK, Don't Ask Again": "OK, Don't Ask Again",
			"OK, Don't Show Again": "OK, Don't Show Again",
			"Open": "Open",
			"Open Comparison": "Open Comparison",
			"Open Git Log": "Open Git Log",
			"Open Merge": "Open Merge",
			"Open Repository": "Open Repository",
			"Open in New Window": "Open in New Window",
			"Optionally provide a stash message": "Optionally provide a stash message",
			"Passphrase": "Passphrase",
			"Pick a branch to pull from": "Pick a branch to pull from",
			"Pick a provider to publish the branch \"{0}\" to:": "Pick a provider to publish the branch \"{0}\" to:",
			"Pick a remote to publish the branch \"{0}\" to:": "Pick a remote to publish the branch \"{0}\" to:",
			"Pick a remote to pull the branch from": "Pick a remote to pull the branch from",
			"Pick a remote to remove": "Pick a remote to remove",
			"Pick a stash to apply": "Pick a stash to apply",
			"Pick a stash to drop": "Pick a stash to drop",
			"Pick a stash to pop": "Pick a stash to pop",
			"Pick workspace folder to initialize git repo in": "Pick workspace folder to initialize git repo in",
			"Please check out a branch to push to a remote.": "Please check out a branch to push to a remote.",
			"Please clean your repository working tree before checkout.": "Please clean your repository working tree before checkout.",
			"Please provide a commit message": "Please provide a commit message",
			"Please provide a message to annotate the tag": "Please provide a message to annotate the tag",
			"Please provide a new branch name": "Please provide a new branch name",
			"Please provide a remote name": "Please provide a remote name",
			"Please provide a tag name": "Please provide a tag name",
			"Please provide the commit hash": "Please provide the commit hash",
			"Publish Branch": "Publish Branch",
			"Publish Branch/{Locked=\"Branch\"}\r\nDo not translate \"Branch\" as it is a git term": "Publish Branch",
			"Publish to {0}": "Publish to {0}",
			"Publish to...": "Publish to...",
			"Publishing Branch.../{Locked=\"Branch\"}\r\nDo not translate \"Branch\" as it is a git term": "Publishing Branch...",
			"Pull": "Pull",
			"Pull {0} and push {1} commits between {2}/{3}": "Pull {0} and push {1} commits between {2}/{3}",
			"Pull {0} commits from {1}/{2}": "Pull {0} commits from {1}/{2}",
			"Push {0} commits to {1}/{2}": "Push {0} commits to {1}/{2}",
			"Rebasing": "Rebasing",
			"Remote \"{0}\" already exists.": "Remote \"{0}\" already exists.",
			"Remote branch at {0}": "Remote branch at {0}",
			"Remote name": "Remote name",
			"Remote name format invalid": "Remote name format invalid",
			"Restore file": "Restore file",
			"Restore files": "Restore files",
			"Save All & Commit": "Save All & Commit",
			"Save All & Stash": "Save All & Stash",
			"Select a branch or tag to checkout": "Select a branch or tag to checkout",
			"Select a branch or tag to checkout in detached mode": "Select a branch or tag to checkout in detached mode",
			"Select a branch to delete": "Select a branch to delete",
			"Select a branch to merge from": "Select a branch to merge from",
			"Select a branch to rebase onto": "Select a branch to rebase onto",
			"Select a ref to create the \"{0}\" branch from": "Select a ref to create the \"{0}\" branch from",
			"Select a remote to fetch": "Select a remote to fetch",
			"Select a tag to delete": "Select a tag to delete",
			"Select as Repository Destination": "Select as Repository Destination",
			"Show Command Output": "Show Command Output",
			"Skipped found git in: \"{0}\"": "Skipped found git in: \"{0}\"",
			"Staged Changes": "Staged Changes",
			"Stash & Checkout": "Stash & Checkout",
			"Stash Anyway": "Stash Anyway",
			"Stash message": "Stash message",
			"Stashed Changes": "Stashed Changes",
			"Successfully pushed.": "Successfully pushed.",
			"Synchronize Changes": "Synchronize Changes",
			"Synchronizing Changes...": "Synchronizing Changes...",
			"Syncing. Cancelling may cause serious damages to the repository": "Syncing. Cancelling may cause serious damages to the repository",
			"Tag at {0}": "Tag at {0}",
			"Tag name": "Tag name",
			"The \"{0}\" repository has {1} submodules which won't be opened automatically. You can still open each one individually by opening a file within.": "The \"{0}\" repository has {1} submodules which won't be opened automatically. You can still open each one individually by opening a file within.",
			"The branch \"{0}\" has no remote branch. Would you like to publish this branch?": "The branch \"{0}\" has no remote branch. Would you like to publish this branch?",
			"The branch \"{0}\" is not fully merged. Delete anyway?": "The branch \"{0}\" is not fully merged. Delete anyway?",
			"The following file has unsaved changes which won't be included in the commit if you proceed: {0}.\r\n\r\nWould you like to save it before committing?": "The following file has unsaved changes which won't be included in the commit if you proceed: {0}.\r\n\r\nWould you like to save it before committing?",
			"The following file has unsaved changes which won't be included in the stash if you proceed: {0}.\r\n\r\nWould you like to save it before stashing?": "The following file has unsaved changes which won't be included in the stash if you proceed: {0}.\r\n\r\nWould you like to save it before stashing?",
			"The following untracked file will be DELETED FROM DISK if discarded: {0}.": "The following untracked file will be DELETED FROM DISK if discarded: {0}.",
			"The git repository at \"{0}\" has too many active changes, only a subset of Git features will be enabled.": "The git repository at \"{0}\" has too many active changes, only a subset of Git features will be enabled.",
			"The last commit was a merge commit. Are you sure you want to undo it?": "The last commit was a merge commit. Are you sure you want to undo it?",
			"The new branch will be \"{0}\"": "The new branch will be \"{0}\"",
			"There are known issues with the installed Git \"{0}\". Please update to Git >= 2.27 for the git features to work correctly.": "There are known issues with the installed Git \"{0}\". Please update to Git >= 2.27 for the git features to work correctly.",
			"There are merge conflicts. Resolve them before committing.": "There are merge conflicts. Resolve them before committing.",
			"There are no available repositories": "There are no available repositories",
			"There are no changes to commit.": "There are no changes to commit.",
			"There are no changes to stash.": "There are no changes to stash.",
			"There are no staged changes to commit.\r\n\r\nWould you like to stage all your changes and commit them directly?": "There are no staged changes to commit.\r\n\r\nWould you like to stage all your changes and commit them directly?",
			"There are no stashes in the repository.": "There are no stashes in the repository.",
			"There are {0} unsaved files.\r\n\r\nWould you like to save them before committing?": "There are {0} unsaved files.\r\n\r\nWould you like to save them before committing?",
			"There are {0} unsaved files.\r\n\r\nWould you like to save them before stashing?": "There are {0} unsaved files.\r\n\r\nWould you like to save them before stashing?",
			"There are {0} untracked files which will be DELETED FROM DISK if discarded.": "There are {0} untracked files which will be DELETED FROM DISK if discarded.",
			"There were merge conflicts while applying the stash.": "There were merge conflicts while applying the stash.",
			"This action will pull and push commits from and to \"{0}/{1}\".": "This action will pull and push commits from and to \"{0}/{1}\".",
			"This repository has no remotes configured to fetch from.": "This repository has no remotes configured to fetch from.",
			"This repository has no tags.": "This repository has no tags.",
			"This will DELETE {0} untracked files!\r\nThis is IRREVERSIBLE!\r\nThese files will be FOREVER LOST.": "This will DELETE {0} untracked files!\r\nThis is IRREVERSIBLE!\r\nThese files will be FOREVER LOST.",
			"This will create a Git repository in \"{0}\". Are you sure you want to continue?": "This will create a Git repository in \"{0}\". Are you sure you want to continue?",
			"Too many changes were detected. Only the first {0} changes will be shown below.": "Too many changes were detected. Only the first {0} changes will be shown below.",
			"Unable to automatically open the git repository at \"{0}\". To open that git repository, open it directly as a folder in VS Code.": "Unable to automatically open the git repository at \"{0}\". To open that git repository, open it directly as a folder in VS Code.",
			"Uncommitted Changes": "Uncommitted Changes",
			"Undo merge commit": "Undo merge commit",
			"Untracked": "Untracked",
			"Untracked Changes": "Untracked Changes",
			"Update Git": "Update Git",
			"Using git \"{0}\" from \"{1}\"": "Using git \"{0}\" from \"{1}\"",
			"Validating found git in: \"{0}\"": "Validating found git in: \"{0}\"",
			"Would you like Code to [periodically run \"git fetch\"]({0})?": "Would you like Code to [periodically run \"git fetch\"]({0})?",
			"Would you like to add \"{0}\" to .gitignore?": "Would you like to add \"{0}\" to .gitignore?",
			"Would you like to open the cloned repository, or add it to the current workspace?": "Would you like to open the cloned repository, or add it to the current workspace?",
			"Would you like to open the cloned repository?": "Would you like to open the cloned repository?",
			"Would you like to open the initialized repository, or add it to the current workspace?": "Would you like to open the initialized repository, or add it to the current workspace?",
			"Would you like to open the initialized repository?": "Would you like to open the initialized repository?",
			"Yes": "Yes",
			"Yes, Don't Show Again": "Yes, Don't Show Again",
			"You": "You",
			"You are about to commit your changes without verification, this skips pre-commit hooks and can be undesirable.\r\n\r\nAre you sure to continue?": "You are about to commit your changes without verification, this skips pre-commit hooks and can be undesirable.\r\n\r\nAre you sure to continue?",
			"You are about to force push your changes, this can be destructive and could inadvertently overwrite changes made by others.\r\n\r\nAre you sure to continue?": "You are about to force push your changes, this can be destructive and could inadvertently overwrite changes made by others.\r\n\r\nAre you sure to continue?",
			"You are trying to commit to a protected branch and you might not have permission to push your commits to the remote.\r\n\r\nHow would you like to proceed?": "You are trying to commit to a protected branch and you might not have permission to push your commits to the remote.\r\n\r\nHow would you like to proceed?",
			"You seem to have git \"{0}\" installed. Code works best with git >= 2": "You seem to have git \"{0}\" installed. Code works best with git >= 2",
			"Your local changes would be overwritten by checkout.": "Your local changes would be overwritten by checkout.",
			"Your repository has no remotes configured to publish to.": "Your repository has no remotes configured to publish to.",
			"Your repository has no remotes configured to pull from.": "Your repository has no remotes configured to pull from.",
			"Your repository has no remotes configured to push to.": "Your repository has no remotes configured to push to.",
			"Your repository has no remotes.": "Your repository has no remotes.",
			"no": "no",
			"yes": "yes",
			"{0}\r\n\r\nThis is IRREVERSIBLE, your current working set will be FOREVER LOST.": "{0}\r\n\r\nThis is IRREVERSIBLE, your current working set will be FOREVER LOST.",
			"{0} (Deleted)": "{0} (Deleted)",
			"{0} (Index)": "{0} (Index)",
			"{0} (Ours)": "{0} (Ours)",
			"{0} (Theirs)": "{0} (Theirs)",
			"{0} (Untracked)": "{0} (Untracked)",
			"{0} (Working Tree)": "{0} (Working Tree)",
			"{0} ({1})": "{0} ({1})",
			"{0} ({1}) ↔ {0} ({2})": "{0} ({1}) ↔ {0} ({2})",
			"{0} Commit": "{0} Commit",
			"{0} Commit & Push": "{0} Commit & Push",
			"{0} Commit & Sync": "{0} Commit & Sync",
			"{0} Continue": "{0} Continue",
			"{0} Fetch all remotes": "{0} Fetch all remotes",
			"{0} Publish Branch/{Locked=\"Branch\"}\r\nDo not translate \"Branch\" as it is a git term": "{0} Publish Branch",
			"{0} Sync Changes{1}{2}": "{0} Sync Changes{1}{2}",
			"{0} characters left in current line": "{0} characters left in current line",
			"{0} characters over {1} in current line": "{0} characters over {1} in current line",
			"{0} ↔ {1}": "{0} ↔ {1}",
			"{0}, Checkout branch/tag...": "{0}, Checkout branch/tag..."
		},
		"package": {
			"colors.added": "Color for added resources.",
			"colors.conflict": "Color for resources with conflicts.",
			"colors.deleted": "Color for deleted resources.",
			"colors.ignored": "Color for ignored resources.",
			"colors.modified": "Color for modified resources.",
			"colors.renamed": "Color for renamed or copied resources.",
			"colors.stageDeleted": "Color for deleted resources which have been staged.",
			"colors.stageModified": "Color for modified resources which have been staged.",
			"colors.submodule": "Color for submodule resources.",
			"colors.untracked": "Color for untracked resources.",
			"command.addRemote": "Add Remote...",
			"command.api.getRemoteSources": "Get Remote Sources",
			"command.api.getRepositories": "Get Repositories",
			"command.api.getRepositoryState": "Get Repository State",
			"command.branch": "Create Branch...",
			"command.branchFrom": "Create Branch From...",
			"command.checkout": "Checkout to...",
			"command.checkoutDetached": "Checkout to (Detached)...",
			"command.cherryPick": "Cherry Pick...",
			"command.clean": "Discard Changes",
			"command.cleanAll": "Discard All Changes",
			"command.cleanAllTracked": "Discard All Tracked Changes",
			"command.cleanAllUntracked": "Discard All Untracked Changes",
			"command.clone": "Clone",
			"command.cloneRecursive": "Clone (Recursive)",
			"command.close": "Close Repository",
			"command.closeAllDiffEditors": "Close All Diff Editors",
			"command.commit": "Commit",
			"command.commitAll": "Commit All",
			"command.commitAllAmend": "Commit All (Amend)",
			"command.commitAllAmendNoVerify": "Commit All (Amend, No Verify)",
			"command.commitAllNoVerify": "Commit All (No Verify)",
			"command.commitAllSigned": "Commit All (Signed Off)",
			"command.commitAllSignedNoVerify": "Commit All (Signed Off, No Verify)",
			"command.commitEmpty": "Commit Empty",
			"command.commitEmptyNoVerify": "Commit Empty (No Verify)",
			"command.commitMessageAccept": "Accept Commit Message",
			"command.commitMessageDiscard": "Discard Commit Message",
			"command.commitNoVerify": "Commit (No Verify)",
			"command.commitStaged": "Commit Staged",
			"command.commitStagedAmend": "Commit Staged (Amend)",
			"command.commitStagedAmendNoVerify": "Commit Staged (Amend, No Verify)",
			"command.commitStagedNoVerify": "Commit Staged (No Verify)",
			"command.commitStagedSigned": "Commit Staged (Signed Off)",
			"command.commitStagedSignedNoVerify": "Commit Staged (Signed Off, No Verify)",
			"command.createTag": "Create Tag",
			"command.deleteBranch": "Delete Branch...",
			"command.deleteTag": "Delete Tag",
			"command.fetch": "Fetch",
			"command.fetchAll": "Fetch From All Remotes",
			"command.fetchPrune": "Fetch (Prune)",
			"command.git.acceptMerge": "Complete Merge",
			"command.git.openMergeEditor": "Resolve in Merge Editor",
			"command.git.runGitMerge": "Compute Conflicts With Git",
			"command.git.runGitMergeDiff3": "Compute Conflicts With Git (Diff3)",
			"command.ignore": "Add to .gitignore",
			"command.init": "Initialize Repository",
			"command.merge": "Merge Branch...",
			"command.mergeAbort": "Abort Merge",
			"command.openAllChanges": "Open All Changes",
			"command.openChange": "Open Changes",
			"command.openFile": "Open File",
			"command.openHEADFile": "Open File (HEAD)",
			"command.openRepository": "Open Repository",
			"command.publish": "Publish Branch...",
			"command.pull": "Pull",
			"command.pullFrom": "Pull from...",
			"command.pullRebase": "Pull (Rebase)",
			"command.push": "Push",
			"command.pushFollowTags": "Push (Follow Tags)",
			"command.pushFollowTagsForce": "Push (Follow Tags, Force)",
			"command.pushForce": "Push (Force)",
			"command.pushTags": "Push Tags",
			"command.pushTo": "Push to...",
			"command.pushToForce": "Push to... (Force)",
			"command.rebase": "Rebase Branch...",
			"command.rebaseAbort": "Abort Rebase",
			"command.refresh": "Refresh",
			"command.removeRemote": "Remove Remote",
			"command.rename": "Rename",
			"command.renameBranch": "Rename Branch...",
			"command.restoreCommitTemplate": "Restore Commit Template",
			"command.revealFileInOS.linux": "Open Containing Folder",
			"command.revealFileInOS.mac": "Reveal in Finder",
			"command.revealFileInOS.windows": "Reveal in File Explorer",
			"command.revealInExplorer": "Reveal in Explorer View",
			"command.revertChange": "Revert Change",
			"command.revertSelectedRanges": "Revert Selected Ranges",
			"command.showOutput": "Show Git Output",
			"command.stage": "Stage Changes",
			"command.stageAll": "Stage All Changes",
			"command.stageAllMerge": "Stage All Merge Changes",
			"command.stageAllTracked": "Stage All Tracked Changes",
			"command.stageAllUntracked": "Stage All Untracked Changes",
			"command.stageChange": "Stage Change",
			"command.stageSelectedRanges": "Stage Selected Ranges",
			"command.stash": "Stash",
			"command.stashApply": "Apply Stash...",
			"command.stashApplyLatest": "Apply Latest Stash",
			"command.stashDrop": "Drop Stash...",
			"command.stashDropAll": "Drop All Stashes...",
			"command.stashIncludeUntracked": "Stash (Include Untracked)",
			"command.stashPop": "Pop Stash...",
			"command.stashPopLatest": "Pop Latest Stash",
			"command.sync": "Sync",
			"command.syncRebase": "Sync (Rebase)",
			"command.timelineCompareWithSelected": "Compare with Selected",
			"command.timelineCopyCommitId": "Copy Commit ID",
			"command.timelineCopyCommitMessage": "Copy Commit Message",
			"command.timelineOpenDiff": "Open Changes",
			"command.timelineSelectForCompare": "Select for Compare",
			"command.undoCommit": "Undo Last Commit",
			"command.unstage": "Unstage Changes",
			"command.unstageAll": "Unstage All Changes",
			"command.unstageSelectedRanges": "Unstage Selected Ranges",
			"config.allowForcePush": "Controls whether force push (with or without lease) is enabled.",
			"config.allowNoVerifyCommit": "Controls whether commits without running pre-commit and commit-msg hooks are allowed.",
			"config.alwaysShowStagedChangesResourceGroup": "Always show the Staged Changes resource group.",
			"config.alwaysSignOff": "Controls the signoff flag for all commits.",
			"config.autoRepositoryDetection": "Configures when repositories should be automatically detected.",
			"config.autoRepositoryDetection.false": "Disable automatic repository scanning.",
			"config.autoRepositoryDetection.openEditors": "Scan for parent folders of open files.",
			"config.autoRepositoryDetection.subFolders": "Scan for subfolders of the currently opened folder.",
			"config.autoRepositoryDetection.true": "Scan for both subfolders of the current opened folder and parent folders of open files.",
			"config.autoStash": "Stash any changes before pulling and restore them after successful pull.",
			"config.autofetch": "When set to true, commits will automatically be fetched from the default remote of the current Git repository. Setting to `all` will fetch from all remotes.",
			"config.autofetchPeriod": "Duration in seconds between each automatic git fetch, when `#git.autofetch#` is enabled.",
			"config.autorefresh": "Whether auto refreshing is enabled.",
			"config.branchPrefix": "Prefix used when creating a new branch.",
			"config.branchProtection": "List of protected branches. By default, a prompt is shown before changes are committed to a protected branch. The prompt can be controlled using the `#git.branchProtectionPrompt#`  setting.",
			"config.branchProtectionPrompt": "Controls whether a prompt is being shown before changes are committed to a protected branch.",
			"config.branchProtectionPrompt.alwaysCommit": "Always commit changes to the protected branch.",
			"config.branchProtectionPrompt.alwaysCommitToNewBranch": "Always commit changes to a new branch.",
			"config.branchProtectionPrompt.alwaysPrompt": "Always prompt before changes are committed to a protected branch.",
			"config.branchRandomNameDictionary": "List of dictionaries used for the randomly generated branch name. Each value represents the dictionary used to generate the segment of the branch name. Supported dictionaries: `adjectives`, `animals`, `colors` and `numbers`.",
			"config.branchRandomNameDictionary.adjectives": "A random adjective",
			"config.branchRandomNameDictionary.animals": "A random animal name",
			"config.branchRandomNameDictionary.colors": "A random color name",
			"config.branchRandomNameDictionary.numbers": "A random number between 100 and 999",
			"config.branchRandomNameEnable": "Controls whether a random name is generated when creating a new branch.",
			"config.branchSortOrder": "Controls the sort order for branches.",
			"config.branchValidationRegex": "A regular expression to validate new branch names.",
			"config.branchWhitespaceChar": "The character to replace whitespace in new branch names, and to separate segments of a randomly generated branch name.",
			"config.checkoutType": "Controls what type of git refs are listed when running `Checkout to...`.",
			"config.checkoutType.local": "Local branches",
			"config.checkoutType.remote": "Remote branches",
			"config.checkoutType.tags": "Tags",
			"config.closeDiffOnOperation": "Controls whether the diff editor should be automatically closed when changes are stashed, committed, discarded, staged, or unstaged.",
			"config.commandsToLog": "List of git commands (ex: commit, push) that would have their `stdout` logged to the [git output](command:git.showOutput). If the git command has a client-side hook configured, the client-side hook's `stdout` will also be logged to the [git output](command:git.showOutput).",
			"config.confirmEmptyCommits": "Always confirm the creation of empty commits for the 'Git: Commit Empty' command.",
			"config.confirmForcePush": "Controls whether to ask for confirmation before force-pushing.",
			"config.confirmNoVerifyCommit": "Controls whether to ask for confirmation before committing without verification.",
			"config.confirmSync": "Confirm before synchronizing git repositories.",
			"config.countBadge": "Controls the Git count badge.",
			"config.countBadge.all": "Count all changes.",
			"config.countBadge.off": "Turn off counter.",
			"config.countBadge.tracked": "Count only tracked changes.",
			"config.decorations.enabled": "Controls whether Git contributes colors and badges to the Explorer and the Open Editors view.",
			"config.defaultCloneDirectory": "The default location to clone a git repository.",
			"config.detectSubmodules": "Controls whether to automatically detect git submodules.",
			"config.detectSubmodulesLimit": "Controls the limit of git submodules detected.",
			"config.discardAllScope": "Controls what changes are discarded by the `Discard all changes` command. `all` discards all changes. `tracked` discards only tracked files. `prompt` shows a prompt dialog every time the action is run.",
			"config.enableCommitSigning": "Enables commit signing with GPG or X.509.",
			"config.enableSmartCommit": "Commit all changes when there are no staged changes.",
			"config.enableStatusBarSync": "Controls whether the Git Sync command appears in the status bar.",
			"config.enabled": "Whether git is enabled.",
			"config.experimental.installGuide": "Experimental improvements for the git setup flow.",
			"config.fetchOnPull": "When enabled, fetch all branches when pulling. Otherwise, fetch just the current one.",
			"config.followTagsWhenSync": "Follow push all tags when running the sync command.",
			"config.ignoreLegacyWarning": "Ignores the legacy Git warning.",
			"config.ignoreLimitWarning": "Ignores the warning when there are too many changes in a repository.",
			"config.ignoreMissingGitWarning": "Ignores the warning when Git is missing.",
			"config.ignoreRebaseWarning": "Ignores the warning when it looks like the branch might have been rebased when pulling.",
			"config.ignoreSubmodules": "Ignore modifications to submodules in the file tree.",
			"config.ignoreWindowsGit27Warning": "Ignores the warning when Git 2.25 - 2.26 is installed on Windows.",
			"config.ignoredRepositories": "List of git repositories to ignore.",
			"config.inputValidation": "Controls when to show commit message input validation.",
			"config.inputValidationLength": "Controls the commit message length threshold for showing a warning.",
			"config.inputValidationSubjectLength": "Controls the commit message subject length threshold for showing a warning. Unset it to inherit the value of `config.inputValidationLength`.",
			"config.mergeEditor": "Open the merge editor for files that are currently under conflict.",
			"config.openAfterClone": "Controls whether to open a repository automatically after cloning.",
			"config.openAfterClone.always": "Always open in current window.",
			"config.openAfterClone.alwaysNewWindow": "Always open in a new window.",
			"config.openAfterClone.prompt": "Always prompt for action.",
			"config.openAfterClone.whenNoFolderOpen": "Only open in current window when no folder is opened.",
			"config.openDiffOnClick": "Controls whether the diff editor should be opened when clicking a change. Otherwise the regular editor will be opened.",
			"config.optimisticUpdate": "Controls whether to optimistically update the state of the Source Control view after running git commands.",
			"config.path": "Path and filename of the git executable, e.g. `C:\\Program Files\\Git\\bin\\git.exe` (Windows). This can also be an array of string values containing multiple paths to look up.",
			"config.postCommitCommand": "Run a git command after a successful commit.",
			"config.postCommitCommand.none": "Don't run any command after a commit.",
			"config.postCommitCommand.push": "Run 'git push' after a successful commit.",
			"config.postCommitCommand.sync": "Run 'git pull' and 'git push' after a successful commit.",
			"config.promptToSaveFilesBeforeCommit": "Controls whether Git should check for unsaved files before committing.",
			"config.promptToSaveFilesBeforeCommit.always": "Check for any unsaved files.",
			"config.promptToSaveFilesBeforeCommit.never": "Disable this check.",
			"config.promptToSaveFilesBeforeCommit.staged": "Check only for unsaved staged files.",
			"config.promptToSaveFilesBeforeStash": "Controls whether Git should check for unsaved files before stashing changes.",
			"config.promptToSaveFilesBeforeStash.always": "Check for any unsaved files.",
			"config.promptToSaveFilesBeforeStash.never": "Disable this check.",
			"config.promptToSaveFilesBeforeStash.staged": "Check only for unsaved staged files.",
			"config.pruneOnFetch": "Prune when fetching.",
			"config.pullBeforeCheckout": "Controls whether a branch that does not have outgoing commits is fast-forwarded before it is checked out.",
			"config.pullTags": "Fetch all tags when pulling.",
			"config.rebaseWhenSync": "Force git to use rebase when running the sync command.",
			"config.rememberPostCommitCommand": "Remember the last git command that ran after a commit.",
			"config.repositoryScanIgnoredFolders": "List of folders that are ignored while scanning for Git repositories when `#git.autoRepositoryDetection#` is set to `true` or `subFolders`.",
			"config.repositoryScanMaxDepth": "Controls the depth used when scanning workspace folders for Git repositories when `#git.autoRepositoryDetection#` is set to `true` or `subFolders`. Can be set to `-1` for no limit.",
			"config.requireGitUserConfig": "Controls whether to require explicit Git user configuration or allow Git to guess if missing.",
			"config.scanRepositories": "List of paths to search for git repositories in.",
			"config.showActionButton": "Controls whether an action button is shown in the Source Control view.",
			"config.showActionButton.commit": "Show an action button to commit changes when the local branch has modified files ready to be committed.",
			"config.showActionButton.publish": "Show an action button to publish the local branch when it does not have a tracking remote branch.",
			"config.showActionButton.sync": "Show an action button to synchronize changes when the local branch is either ahead or behind the remote branch.",
			"config.showCommitInput": "Controls whether to show the commit input in the Git source control panel.",
			"config.showInlineOpenFileAction": "Controls whether to show an inline Open File action in the Git changes view.",
			"config.showProgress": "Controls whether git actions should show progress.",
			"config.showPushSuccessNotification": "Controls whether to show a notification when a push is successful.",
			"config.smartCommitChanges": "Control which changes are automatically staged by Smart Commit.",
			"config.smartCommitChanges.all": "Automatically stage all changes.",
			"config.smartCommitChanges.tracked": "Automatically stage tracked changes only.",
			"config.statusLimit": "Controls how to limit the number of changes that can be parsed from Git status command. Can be set to 0 for no limit.",
			"config.suggestSmartCommit": "Suggests to enable smart commit (commit all changes when there are no staged changes).",
			"config.supportCancellation": "Controls whether a notification comes up when running the Sync action, which allows the user to cancel the operation.",
			"config.terminalAuthentication": "Controls whether to enable VS Code to be the authentication handler for git processes spawned in the integrated terminal. Note: terminals need to be restarted to pick up a change in this setting.",
			"config.terminalGitEditor": "Controls whether to enable VS Code to be git editor for git processes spawned in the integrated terminal. Note: terminals need to be restarted to pick up a change in this setting.",
			"config.timeline.date": "Controls which date to use for items in the Timeline view.",
			"config.timeline.date.authored": "Use the authored date",
			"config.timeline.date.committed": "Use the committed date",
			"config.timeline.showAuthor": "Controls whether to show the commit author in the Timeline view.",
			"config.timeline.showUncommitted": "Controls whether to show uncommitted changes in the Timeline view.",
			"config.untrackedChanges": "Controls how untracked changes behave.",
			"config.untrackedChanges.hidden": "Untracked changes are hidden and excluded from several actions.",
			"config.untrackedChanges.mixed": "All changes, tracked and untracked, appear together and behave equally.",
			"config.untrackedChanges.separate": "Untracked changes appear separately in the Source Control view. They are also excluded from several actions.",
			"config.useCommitInputAsStashMessage": "Controls whether to use the message from the commit input box as the default stash message.",
			"config.useEditorAsCommitInput": "Controls whether a full text editor will be used to author commit messages, whenever no message is provided in the commit input box.",
			"config.useForcePushWithLease": "Controls whether force pushing uses the safer force-with-lease variant.",
			"config.useIntegratedAskPass": "Controls whether GIT_ASKPASS should be overwritten to use the integrated version.",
			"config.verboseCommit": "Enable verbose output when `#git.useEditorAsCommitInput#` is enabled.",
			"description": "Git SCM Integration",
			"displayName": "Git",
			"submenu.branch": "Branch",
			"submenu.changes": "Changes",
			"submenu.commit": "Commit",
			"submenu.commit.amend": "Amend",
			"submenu.commit.signoff": "Sign Off",
			"submenu.explorer": "Git",
			"submenu.pullpush": "Pull, Push",
			"submenu.remotes": "Remote",
			"submenu.stash": "Stash",
			"submenu.tags": "Tags",
			"view.workbench.cloneRepository": "You can clone a repository locally.\r\n[Clone Repository](command:git.clone 'Clone a repository once the git extension has activated')",
			"view.workbench.learnMore": "To learn more about how to use git and source control in VS Code [read our docs](https://aka.ms/vscode-scm).",
			"view.workbench.scm.disabled": "If you would like to use git features, please enable git in your [settings](command:workbench.action.openSettings?%5B%22git.enabled%22%5D).\r\nTo learn more about how to use git and source control in VS Code [read our docs](https://aka.ms/vscode-scm).",
			"view.workbench.scm.empty": "In order to use git features, you can open a folder containing a git repository or clone from a URL.\r\n[Open Folder](command:vscode.openFolder)\r\n[Clone Repository](command:git.clone)\r\nTo learn more about how to use git and source control in VS Code [read our docs](https://aka.ms/vscode-scm).",
			"view.workbench.scm.emptyWorkspace": "The workspace currently open doesn't have any folders containing git repositories.\r\n[Add Folder to Workspace](command:workbench.action.addRootFolder)\r\nTo learn more about how to use git and source control in VS Code [read our docs](https://aka.ms/vscode-scm).",
			"view.workbench.scm.folder": "The folder currently open doesn't have a git repository. You can initialize a repository which will enable source control features powered by git.\r\n[Initialize Repository](command:git.init?%5Btrue%5D)\r\nTo learn more about how to use git and source control in VS Code [read our docs](https://aka.ms/vscode-scm).",
			"view.workbench.scm.missing": "Install Git, a popular source control system, to track code changes and collaborate with others. Learn more in our [Git guides](https://aka.ms/vscode-scm).",
			"view.workbench.scm.missing.linux": "Source control depends on Git being installed.\r\n[Download Git for Linux](https://git-scm.com/download/linux)\r\nAfter installing, please [reload](command:workbench.action.reloadWindow) (or [troubleshoot](command:git.showOutput)). Additional source control providers can be installed [from the Marketplace](command:workbench.extensions.search?%22%40category%3A%5C%22scm%20providers%5C%22%22).",
			"view.workbench.scm.missing.mac": "[Download Git for macOS](https://git-scm.com/download/mac)\r\nAfter installing, please [reload](command:workbench.action.reloadWindow) (or [troubleshoot](command:git.showOutput)). Additional source control providers can be installed [from the Marketplace](command:workbench.extensions.search?%22%40category%3A%5C%22scm%20providers%5C%22%22).",
			"view.workbench.scm.missing.windows": "[Download Git for Windows](https://git-scm.com/download/win)\r\nAfter installing, please [reload](command:workbench.action.reloadWindow) (or [troubleshoot](command:git.showOutput)). Additional source control providers can be installed [from the Marketplace](command:workbench.extensions.search?%22%40category%3A%5C%22scm%20providers%5C%22%22).",
			"view.workbench.scm.workspace": "The workspace currently open doesn't have any folders containing git repositories. You can initialize a repository on a folder which will enable source control features powered by git.\r\n[Initialize Repository](command:git.init)\r\nTo learn more about how to use git and source control in VS Code [read our docs](https://aka.ms/vscode-scm)."
		}
	}
}