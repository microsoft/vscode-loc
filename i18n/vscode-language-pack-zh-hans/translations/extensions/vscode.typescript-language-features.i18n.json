{
	"": [
		"--------------------------------------------------------------------------------------------",
		"Copyright (c) Microsoft Corporation. All rights reserved.",
		"Licensed under the MIT License. See License.txt in the project root for license information.",
		"--------------------------------------------------------------------------------------------",
		"Do not edit this file. It is machine generated."
	],
	"version": "1.0.0",
	"contents": {
		"bundle": {
			"(loading...)/Prefix displayed for hover entries while the server is still loading": "(loading...)",
			"...1 additional file not shown": "...1 additional file not shown",
			"...{0} additional files not shown": "...{0} additional files not shown",
			"1 implementation": "1 implementation",
			"1 reference": "1 reference",
			"Acquiring typings definitions for IntelliSense./Typings refers to the *.d.ts typings files that power our IntelliSense. It should not be localized": "Acquiring typings definitions for IntelliSense.",
			"Acquiring typings.../Typings refers to the *.d.ts typings files that power our IntelliSense. It should not be localized": "Acquiring typings...",
			"Add all missing imports": "Add all missing imports",
			"Allow": "Allow",
			"Always automatically update imports": "Always automatically update imports",
			"An error occurred while renaming file": "An error occurred while renaming file",
			"Checking for update of JS/TS imports": "Checking for update of JS/TS imports",
			"Configure Excludes": "Configure Excludes",
			"Configure jsconfig.json": "Configure jsconfig.json",
			"Configure tsconfig.json": "Configure tsconfig.json",
			"Could not apply refactoring": "Could not apply refactoring",
			"Could not determine TypeScript or JavaScript project": "Could not determine TypeScript or JavaScript project",
			"Could not determine TypeScript or JavaScript project. Unsupported file type": "Could not determine TypeScript or JavaScript project. Unsupported file type",
			"Could not determine references": "Could not determine references",
			"Could not install typings files for JavaScript language features. Please ensure that NPM is installed, or configure 'typescript.npm' in your user settings. Alternatively, check the [documentation]({0}) to learn more.": "Could not install typings files for JavaScript language features. Please ensure that NPM is installed, or configure 'typescript.npm' in your user settings. Alternatively, check the [documentation]({0}) to learn more.",
			"Could not load the TypeScript version at this path": "Could not load the TypeScript version at this path",
			"Could not open TS Server log file": "Could not open TS Server log file",
			"Create jsconfig": "Create jsconfig",
			"Create tsconfig": "Create tsconfig",
			"Disable logging": "Disable logging",
			"Disables semantic checking in a JavaScript file. Must be at the top of a file.": "Disables semantic checking in a JavaScript file. Must be at the top of a file.",
			"Dismiss": "Dismiss",
			"Don't Show Again": "Don't Show Again",
			"Don't show again": "Don't show again",
			"Enable logging and restart TS server": "Enable logging and restart TS server",
			"Enables semantic checking in a JavaScript file. Must be at the top of a file.": "Enables semantic checking in a JavaScript file. Must be at the top of a file.",
			"Extract to constant": "Extract to constant",
			"Extract to function": "Extract to function",
			"Failed to resolve {0} as module": "Failed to resolve {0} as module",
			"Fetching data for better TypeScript IntelliSense": "Fetching data for better TypeScript IntelliSense",
			"File is not part of a JavaScript project. View the [jsconfig.json documentation]({0}) to learn more.": "File is not part of a JavaScript project. View the [jsconfig.json documentation]({0}) to learn more.",
			"File is not part of a TypeScript project. View the [tsconfig.json documentation]({0}) to learn more.": "File is not part of a TypeScript project. View the [tsconfig.json documentation]({0}) to learn more.",
			"File is not part opened folders": "File is not part opened folders",
			"Find file references failed. No resource provided.": "Find file references failed. No resource provided.",
			"Find file references failed. Requires TypeScript 4.2+.": "Find file references failed. Requires TypeScript 4.2+.",
			"Find file references failed. Unknown file type.": "Find file references failed. Unknown file type.",
			"Find file references failed. Unsupported file type.": "Find file references failed. Unsupported file type.",
			"Finding file references": "Finding file references",
			"Finding source definitions": "Finding source definitions",
			"Fix all fixable JS/TS issues": "Fix all fixable JS/TS issues",
			"Follow link": "Follow link",
			"Go to Source Definition failed. No resource provided.": "Go to Source Definition failed. No resource provided.",
			"Go to Source Definition failed. Requires TypeScript 4.7+.": "Go to Source Definition failed. Requires TypeScript 4.7+.",
			"Go to Source Definition failed. Unknown file type.": "Go to Source Definition failed. Unknown file type.",
			"Go to Source Definition failed. Unsupported file type.": "Go to Source Definition failed. Unsupported file type.",
			"Initializing JS/TS language features": "Initializing JS/TS language features",
			"JS/TS IntelliSense Status": "JS/TS IntelliSense Status",
			"JSDoc comment": "JSDoc comment",
			"Learn More": "Learn More",
			"Learn more about JS/TS refactorings": "Learn more about JS/TS refactorings",
			"Learn more about managing TypeScript versions": "Learn more about managing TypeScript versions",
			"Loading IntelliSense status": "Loading IntelliSense status",
			"Never automatically update imports": "Never automatically update imports",
			"Never in this Workspace": "Never in this Workspace",
			"No": "No",
			"No jsconfig": "No jsconfig",
			"No opened folders": "No opened folders",
			"No source definitions found.": "No source definitions found.",
			"No tsconfig": "No tsconfig",
			"Open config file": "Open config file",
			"Organize Imports": "Organize Imports",
			"Organize Imports failed. No resource provided.": "Organize Imports failed. No resource provided.",
			"Organize Imports failed. Unknown file type.": "Organize Imports failed. Unknown file type.",
			"Partial Mode": "Partial Mode",
			"Please open a folder in VS Code to use a TypeScript or JavaScript project": "Please open a folder in VS Code to use a TypeScript or JavaScript project",
			"Please update your TypeScript version": "Please update your TypeScript version",
			"Project Wide IntelliSense not available": "Project Wide IntelliSense not available",
			"Reload VS Code": "Reload VS Code",
			"Remove Unused Imports": "Remove Unused Imports",
			"Remove all unused code": "Remove all unused code",
			"Report Issue": "Report Issue",
			"Select Version": "Select Version",
			"Select code action to apply": "Select code action to apply",
			"Select the TypeScript version used for JavaScript and TypeScript language features": "Select the TypeScript version used for JavaScript and TypeScript language features",
			"Sort Imports": "Sort Imports",
			"Suppresses @ts-check errors on the next line of a file, expecting at least one to exist.": "Suppresses @ts-check errors on the next line of a file, expecting at least one to exist.",
			"Suppresses @ts-check errors on the next line of a file.": "Suppresses @ts-check errors on the next line of a file.",
			"TS Server has not started logging.": "TS Server has not started logging.",
			"TS Server logging is currently enabled which may impact performance.": "TS Server logging is currently enabled which may impact performance.",
			"TS Server logging is off. Please set 'typescript.tsserver.log' and restart the TS server to enable logging": "TS Server logging is off. Please set 'typescript.tsserver.log' and restart the TS server to enable logging",
			"The JS/TS language service crashed 5 times in the last 5 Minutes.": "The JS/TS language service crashed 5 times in the last 5 Minutes.",
			"The JS/TS language service crashed 5 times in the last 5 Minutes.\r\nThis may be caused by a plugin contributed by one of these extensions: {0}": "The JS/TS language service crashed 5 times in the last 5 Minutes.\r\nThis may be caused by a plugin contributed by one of these extensions: {0}",
			"The JS/TS language service crashed.": "The JS/TS language service crashed.",
			"The JS/TS language service crashed.\r\nThis may be caused by a plugin contributed by one of these extensions: {0}": "The JS/TS language service crashed.\r\nThis may be caused by a plugin contributed by one of these extensions: {0}",
			"The JS/TS language service immediately crashed 5 times. The service will not be restarted.": "The JS/TS language service immediately crashed 5 times. The service will not be restarted.",
			"The JS/TS language service immediately crashed 5 times. The service will not be restarted.\r\nThis may be caused by a plugin contributed by one of these extensions: {0}": "The JS/TS language service immediately crashed 5 times. The service will not be restarted.\r\nThis may be caused by a plugin contributed by one of these extensions: {0}",
			"The current selection cannot be extracted": "The current selection cannot be extracted",
			"The path {0} doesn't point to a valid tsserver install. Falling back to bundled TypeScript version.": "The path {0} doesn't point to a valid tsserver install. Falling back to bundled TypeScript version.",
			"The path {0} doesn't point to a valid tsserver install. Falling back to bundled TypeScript version.', tsServerPath": "The path {0} doesn't point to a valid tsserver install. Falling back to bundled TypeScript version.', tsServerPath",
			"The workspace is using an old version of TypeScript ({0}).\r\n\r\nBefore reporting an issue, please update the workspace to use the latest stable TypeScript release to make sure the bug has not already been fixed.": "The workspace is using an old version of TypeScript ({0}).\r\n\r\nBefore reporting an issue, please update the workspace to use the latest stable TypeScript release to make sure the bug has not already been fixed.",
			"This workspace contains a TypeScript version. Would you like to use the workspace TypeScript version for TypeScript and JavaScript language features?": "This workspace contains a TypeScript version. Would you like to use the workspace TypeScript version for TypeScript and JavaScript language features?",
			"To enable project-wide JavaScript/TypeScript language features, exclude folders with many files, like: {0}": "To enable project-wide JavaScript/TypeScript language features, exclude folders with many files, like: {0}",
			"To enable project-wide JavaScript/TypeScript language features, exclude large folders with source files that you do not work on.": "To enable project-wide JavaScript/TypeScript language features, exclude large folders with source files that you do not work on.",
			"Try Debugging Anyway": "Try Debugging Anyway",
			"TypeScript Server Log": "TypeScript Server Log",
			"TypeScript Task in tasks.json contains \"\\\\\". TypeScript tasks tsconfig must use \"/\"": "TypeScript Task in tasks.json contains \"\\\\\". TypeScript tasks tsconfig must use \"/\"",
			"TypeScript Version": "TypeScript Version",
			"TypeScript language server exited with error. Error message is: {0}": "TypeScript language server exited with error. Error message is: {0}",
			"TypeScript: Configure Excludes": "TypeScript: Configure Excludes",
			"Update imports for '{0}'?": "Update imports for '{0}'?",
			"Update imports for the following {0} files?": "Update imports for the following {0} files?",
			"Use VS Code's Version": "Use VS Code's Version",
			"Use Workspace Version": "Use Workspace Version",
			"VS Code's tsserver was deleted by another application such as a misbehaving virus detection tool. Please reinstall VS Code.": "VS Code's tsserver was deleted by another application such as a misbehaving virus detection tool. Please reinstall VS Code.",
			"We couldn't find Node.js on this computer. If you just installed it, you might need to reload VS Code.": "We couldn't find Node.js on this computer. If you just installed it, you might need to reload VS Code.",
			"Yes": "Yes",
			"build - {0}": "build - {0}",
			"invalid version": "invalid version",
			"watch - {0}": "watch - {0}",
			"{0} (Fix all in file)": "{0} (Fix all in file)",
			"{0} implementations": "{0} implementations",
			"{0} references": "{0} references"
		},
		"package": {
			"codeActions.refactor.extract.constant.description": "Extract expression to constant.",
			"codeActions.refactor.extract.constant.title": "Extract constant",
			"codeActions.refactor.extract.function.description": "Extract expression to method or function.",
			"codeActions.refactor.extract.function.title": "Extract function",
			"codeActions.refactor.extract.interface.description": "Extract type to an interface.",
			"codeActions.refactor.extract.interface.title": "Extract interface",
			"codeActions.refactor.extract.type.description": "Extract type to a type alias.",
			"codeActions.refactor.extract.type.title": "Extract type",
			"codeActions.refactor.move.newFile.description": "Move the expression to a new file.",
			"codeActions.refactor.move.newFile.title": "Move to a new file",
			"codeActions.refactor.rewrite.arrow.braces.description": "Add or remove braces in an arrow function.",
			"codeActions.refactor.rewrite.arrow.braces.title": "Rewrite arrow braces",
			"codeActions.refactor.rewrite.export.description": "Convert between default export and named export.",
			"codeActions.refactor.rewrite.export.title": "Convert export",
			"codeActions.refactor.rewrite.import.description": "Convert between named imports and namespace imports.",
			"codeActions.refactor.rewrite.import.title": "Convert import",
			"codeActions.refactor.rewrite.parameters.toDestructured.title": "Convert parameters to destructured object",
			"codeActions.refactor.rewrite.property.generateAccessors.description": "Generate 'get' and 'set' accessors",
			"codeActions.refactor.rewrite.property.generateAccessors.title": "Generate accessors",
			"codeActions.source.organizeImports.title": "Organize Imports",
			"configuration.implicitProjectConfig.checkJs": "Enable/disable semantic checking of JavaScript files. Existing `jsconfig.json` or `tsconfig.json` files override this setting.",
			"configuration.implicitProjectConfig.experimentalDecorators": "Enable/disable `experimentalDecorators` in JavaScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.",
			"configuration.implicitProjectConfig.module": "Sets the module system for the program. See more: https://www.typescriptlang.org/tsconfig#module.",
			"configuration.implicitProjectConfig.strictFunctionTypes": "Enable/disable [strict function types](https://www.typescriptlang.org/tsconfig#strictFunctionTypes) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.",
			"configuration.implicitProjectConfig.strictNullChecks": "Enable/disable [strict null checks](https://www.typescriptlang.org/tsconfig#strictNullChecks) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.",
			"configuration.implicitProjectConfig.target": "Set target JavaScript language version for emitted JavaScript and include library declarations. See more: https://www.typescriptlang.org/tsconfig#target.",
			"configuration.inlayHints.enumMemberValues.enabled": "Enable/disable inlay hints for member values in enum declarations:\r\n```typescript\r\n\r\nenum MyValue {\r\n\tA /* = 0 */;\r\n\tB /* = 1 */;\r\n}\r\n \r\n```\r\nRequires using TypeScript 4.4+ in the workspace.",
			"configuration.inlayHints.functionLikeReturnTypes.enabled": "Enable/disable inlay hints for implicit return types on function signatures:\r\n```typescript\r\n\r\nfunction foo() /* :number */ {\r\n\treturn Date.now();\r\n} \r\n \r\n```\r\nRequires using TypeScript 4.4+ in the workspace.",
			"configuration.inlayHints.parameterNames.enabled": "Enable/disable inlay hints for parameter names:\r\n```typescript\r\n\r\nparseInt(/* str: */ '123', /* radix: */ 8)\r\n \r\n```\r\nRequires using TypeScript 4.4+ in the workspace.",
			"configuration.inlayHints.parameterNames.suppressWhenArgumentMatchesName": "Suppress parameter name hints on arguments whose text is identical to the parameter name.",
			"configuration.inlayHints.parameterTypes.enabled": "Enable/disable inlay hints for implicit parameter types:\r\n```typescript\r\n\r\nel.addEventListener('click', e /* :MouseEvent */ => ...)\r\n \r\n```\r\nRequires using TypeScript 4.4+ in the workspace.",
			"configuration.inlayHints.propertyDeclarationTypes.enabled": "Enable/disable inlay hints for implicit types on property declarations:\r\n```typescript\r\n\r\nclass Foo {\r\n\tprop /* :number */ = Date.now();\r\n}\r\n \r\n```\r\nRequires using TypeScript 4.4+ in the workspace.",
			"configuration.inlayHints.variableTypes.enabled": "Enable/disable inlay hints for implicit variable types:\r\n```typescript\r\n\r\nconst foo /* :number */ = Date.now();\r\n \r\n```\r\nRequires using TypeScript 4.4+ in the workspace.",
			"configuration.inlayHints.variableTypes.suppressWhenTypeMatchesName": "Suppress type hints on variables whose name is identical to the type name. Requires using TypeScript 4.8+ in the workspace.",
			"configuration.javascript.checkJs.checkJs.deprecation": "This setting has been deprecated in favor of `js/ts.implicitProjectConfig.checkJs`.",
			"configuration.javascript.checkJs.experimentalDecorators.deprecation": "This setting has been deprecated in favor of `js/ts.implicitProjectConfig.experimentalDecorators`.",
			"configuration.suggest.autoImports": "Enable/disable auto import suggestions.",
			"configuration.suggest.classMemberSnippets.enabled": "Enable/disable snippet completions for class members. Requires using TypeScript 4.5+ in the workspace",
			"configuration.suggest.completeFunctionCalls": "Complete functions with their parameter signature.",
			"configuration.suggest.completeJSDocs": "Enable/disable suggestion to complete JSDoc comments.",
			"configuration.suggest.includeAutomaticOptionalChainCompletions": "Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires TS 3.7+ and strict null checks to be enabled.",
			"configuration.suggest.includeCompletionsForImportStatements": "Enable/disable auto-import-style completions on partially-typed import statements. Requires using TypeScript 4.3+ in the workspace.",
			"configuration.suggest.includeCompletionsWithSnippetText": "Enable/disable snippet completions from TS Server. Requires using TypeScript 4.3+ in the workspace.",
			"configuration.suggest.jsdoc.generateReturns": "Enable/disable generating `@returns` annotations for JSDoc templates. Requires using TypeScript 4.2+ in the workspace.",
			"configuration.suggest.names": "Enable/disable including unique names from the file in JavaScript suggestions. Note that name suggestions are always disabled in JavaScript code that is semantically checked using `@ts-check` or `checkJs`.",
			"configuration.suggest.objectLiteralMethodSnippets.enabled": "Enable/disable snippet completions for methods in object literals. Requires using TypeScript 4.7+ in the workspace",
			"configuration.suggest.paths": "Enable/disable suggestions for paths in import statements and require calls.",
			"configuration.surveys.enabled": "Enabled/disable occasional surveys that help us improve VS Code's JavaScript and TypeScript support.",
			"configuration.tsserver.experimental.enableProjectDiagnostics": "(Experimental) Enables project wide error reporting.",
			"configuration.tsserver.maxTsServerMemory": "The maximum amount of memory (in MB) to allocate to the TypeScript server process.",
			"configuration.tsserver.useSeparateSyntaxServer": "Enable/disable spawning a separate TypeScript server that can more quickly respond to syntax related operations, such as calculating folding or computing document symbols. Requires using TypeScript 3.4.0 or newer in the workspace.",
			"configuration.tsserver.useSeparateSyntaxServer.deprecation": "This setting has been deprecated in favor of `typescript.tsserver.useSyntaxServer`.",
			"configuration.tsserver.useSyntaxServer": "Controls if TypeScript launches a dedicated server to more quickly handle syntax related operations, such as computing code folding.",
			"configuration.tsserver.useSyntaxServer.always": "Use a lighter weight syntax server to handle all IntelliSense operations. This syntax server can only provide IntelliSense for opened files.",
			"configuration.tsserver.useSyntaxServer.auto": "Spawn both a full server and a lighter weight server dedicated to syntax operations. The syntax server is used to speed up syntax operations and provide IntelliSense while projects are loading.",
			"configuration.tsserver.useSyntaxServer.never": "Don't use a dedicated syntax server. Use a single server to handle all IntelliSense operations.",
			"configuration.tsserver.watchOptions": "Configure which watching strategies should be used to keep track of files and directories. Requires using TypeScript 3.8+ in the workspace.",
			"configuration.tsserver.watchOptions.fallbackPolling": "When using file system events, this option specifies the polling strategy that gets used when the system runs out of native file watchers and/or doesn't support native file watchers.",
			"configuration.tsserver.watchOptions.fallbackPolling.dynamicPriorityPolling ": "Use a dynamic queue where less-frequently modified files will be checked less often.",
			"configuration.tsserver.watchOptions.fallbackPolling.fixedPollingInterval": "Check every file for changes several times a second at a fixed interval.",
			"configuration.tsserver.watchOptions.fallbackPolling.priorityPollingInterval": "Check every file for changes several times a second, but use heuristics to check certain types of files less frequently than others.",
			"configuration.tsserver.watchOptions.synchronousWatchDirectory": "Disable deferred watching on directories. Deferred watching is useful when lots of file changes might occur at once (e.g. a change in node_modules from running npm install), but you might want to disable it with this flag for some less-common setups.",
			"configuration.tsserver.watchOptions.watchDirectory": "Strategy for how entire directory trees are watched under systems that lack recursive file-watching functionality.",
			"configuration.tsserver.watchOptions.watchDirectory.dynamicPriorityPolling": "Use a dynamic queue where less-frequently modified directories will be checked less often.",
			"configuration.tsserver.watchOptions.watchDirectory.fixedChunkSizePolling": "Polls directories in chunks at regular interval. Requires using TypeScript 4.3+ in the workspace.",
			"configuration.tsserver.watchOptions.watchDirectory.fixedPollingInterval": "Check every directory for changes several times a second at a fixed interval.",
			"configuration.tsserver.watchOptions.watchDirectory.useFsEvents": "Attempt to use the operating system/file system's native events for directory changes.",
			"configuration.tsserver.watchOptions.watchFile": "Strategy for how individual files are watched.",
			"configuration.tsserver.watchOptions.watchFile.dynamicPriorityPolling": "Use a dynamic queue where less-frequently modified files will be checked less often.",
			"configuration.tsserver.watchOptions.watchFile.fixedChunkSizePolling": "Polls files in chunks at regular interval. Requires using TypeScript 4.3+ in the workspace.",
			"configuration.tsserver.watchOptions.watchFile.fixedPollingInterval": "Check every file for changes several times a second at a fixed interval.",
			"configuration.tsserver.watchOptions.watchFile.priorityPollingInterval": "Check every file for changes several times a second, but use heuristics to check certain types of files less frequently than others.",
			"configuration.tsserver.watchOptions.watchFile.useFsEvents": "Attempt to use the operating system/file system's native events for file changes.",
			"configuration.tsserver.watchOptions.watchFile.useFsEventsOnParentDirectory": "Attempt to use the operating system/file system's native events to listen for changes on a file's containing directories. This can use fewer file watchers, but might be less accurate.",
			"configuration.typescript": "TypeScript",
			"description": "Provides rich language support for JavaScript and TypeScript.",
			"displayName": "TypeScript and JavaScript Language Features",
			"format.insertSpaceAfterCommaDelimiter": "Defines space handling after a comma delimiter.",
			"format.insertSpaceAfterConstructor": "Defines space handling after the constructor keyword.",
			"format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": "Defines space handling after function keyword for anonymous functions.",
			"format.insertSpaceAfterKeywordsInControlFlowStatements": "Defines space handling after keywords in a control flow statement.",
			"format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": "Defines space handling after opening and before closing empty braces.",
			"format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": "Defines space handling after opening and before closing JSX expression braces.",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": "Defines space handling after opening and before closing non-empty braces.",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": "Defines space handling after opening and before closing non-empty brackets.",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": "Defines space handling after opening and before closing non-empty parenthesis.",
			"format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": "Defines space handling after opening and before closing template string braces.",
			"format.insertSpaceAfterSemicolonInForStatements": "Defines space handling after a semicolon in a for statement.",
			"format.insertSpaceAfterTypeAssertion": "Defines space handling after type assertions in TypeScript.",
			"format.insertSpaceBeforeAndAfterBinaryOperators": "Defines space handling after a binary operator.",
			"format.insertSpaceBeforeFunctionParenthesis": "Defines space handling before function argument parentheses.",
			"format.placeOpenBraceOnNewLineForControlBlocks": "Defines whether an open brace is put onto a new line for control blocks or not.",
			"format.placeOpenBraceOnNewLineForFunctions": "Defines whether an open brace is put onto a new line for functions or not.",
			"format.semicolons": "Defines handling of optional semicolons. Requires using TypeScript 3.7 or newer in the workspace.",
			"format.semicolons.ignore": "Don't insert or remove any semicolons.",
			"format.semicolons.insert": "Insert semicolons at statement ends.",
			"format.semicolons.remove": "Remove unnecessary semicolons.",
			"goToProjectConfig.title": "Go to Project Configuration",
			"inlayHints.parameterNames.all": "Enable parameter name hints for literal and non-literal arguments.",
			"inlayHints.parameterNames.literals": "Enable parameter name hints only for literal arguments.",
			"inlayHints.parameterNames.none": "Disable parameter name hints.",
			"javascript.format.enable": "Enable/disable default JavaScript formatter.",
			"javascript.preferences.jsxAttributeCompletionStyle.auto": "Insert `={}` or `=\"\"` after attribute names based on the prop type. See `javascript.preferences.quoteStyle` to control the type of quotes used for string attributes.",
			"javascript.referencesCodeLens.enabled": "Enable/disable references CodeLens in JavaScript files.",
			"javascript.referencesCodeLens.showOnAllFunctions": "Enable/disable references CodeLens on all functions in JavaScript files.",
			"javascript.suggestionActions.enabled": "Enable/disable suggestion diagnostics for JavaScript files in the editor.",
			"javascript.validate.enable": "Enable/disable JavaScript validation.",
			"reloadProjects.title": "Reload Project",
			"taskDefinition.tsconfig.description": "The tsconfig file that defines the TS build.",
			"typescript.autoClosingTags": "Enable/disable automatic closing of JSX tags.",
			"typescript.check.npmIsInstalled": "Check if npm is installed for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).",
			"typescript.disableAutomaticTypeAcquisition": "Disables [automatic type acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition). Automatic type acquisition fetches `@types` packages from npm to improve IntelliSense for external libraries.",
			"typescript.enablePromptUseWorkspaceTsdk": "Enables prompting of users to use the TypeScript version configured in the workspace for Intellisense.",
			"typescript.findAllFileReferences": "Find File References",
			"typescript.format.enable": "Enable/disable default TypeScript formatter.",
			"typescript.goToSourceDefinition": "Go to Source Definition",
			"typescript.implementationsCodeLens.enabled": "Enable/disable implementations CodeLens. This CodeLens shows the implementers of an interface.",
			"typescript.locale": "Sets the locale used to report JavaScript and TypeScript errors. Defaults to use VS Code's locale.",
			"typescript.npm": "Specifies the path to the npm executable used for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).",
			"typescript.openTsServerLog.title": "Open TS Server log",
			"typescript.preferences.autoImportFileExcludePatterns": "Specify glob patterns of files to exclude from auto imports. Requires using TypeScript 4.8 or newer in the workspace.",
			"typescript.preferences.importModuleSpecifier": "Preferred path style for auto imports.",
			"typescript.preferences.importModuleSpecifier.nonRelative": "Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.",
			"typescript.preferences.importModuleSpecifier.projectRelative": "Prefers a non-relative import only if the relative import path would leave the package or project directory. Requires using TypeScript 4.2+ in the workspace.",
			"typescript.preferences.importModuleSpecifier.relative": "Prefers a relative path to the imported file location.",
			"typescript.preferences.importModuleSpecifier.shortest": "Prefers a non-relative import only if one is available that has fewer path segments than a relative import.",
			"typescript.preferences.importModuleSpecifierEnding": "Preferred path ending for auto imports. Requires using TypeScript 4.5+ in the workspace.",
			"typescript.preferences.importModuleSpecifierEnding.auto": "Use project settings to select a default.",
			"typescript.preferences.importModuleSpecifierEnding.index": "Shorten `./component/index.js` to `./component/index`.",
			"typescript.preferences.importModuleSpecifierEnding.js": "Do not shorten path endings; include the `.js` extension.",
			"typescript.preferences.importModuleSpecifierEnding.minimal": "Shorten `./component/index.js` to `./component`.",
			"typescript.preferences.includePackageJsonAutoImports": "Enable/disable searching `package.json` dependencies for available auto imports.",
			"typescript.preferences.includePackageJsonAutoImports.auto": "Search dependencies based on estimated performance impact.",
			"typescript.preferences.includePackageJsonAutoImports.off": "Never search dependencies.",
			"typescript.preferences.includePackageJsonAutoImports.on": "Always search dependencies.",
			"typescript.preferences.jsxAttributeCompletionStyle": "Preferred style for JSX attribute completions.",
			"typescript.preferences.jsxAttributeCompletionStyle.auto": "Insert `={}` or `=\"\"` after attribute names based on the prop type. See `typescript.preferences.quoteStyle` to control the type of quotes used for string attributes.",
			"typescript.preferences.jsxAttributeCompletionStyle.braces": "Insert `={}` after attribute names.",
			"typescript.preferences.jsxAttributeCompletionStyle.none": "Only insert attribute names.",
			"typescript.preferences.quoteStyle": "Preferred quote style to use for quick fixes.",
			"typescript.preferences.quoteStyle.auto": "Infer quote type from existing code",
			"typescript.preferences.quoteStyle.double": "Always use double quotes: `\"`",
			"typescript.preferences.quoteStyle.single": "Always use single quotes: `'`",
			"typescript.preferences.renameShorthandProperties.deprecationMessage": "The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'",
			"typescript.preferences.useAliasesForRenames": "Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.",
			"typescript.problemMatchers.tsc.label": "TypeScript problems",
			"typescript.problemMatchers.tscWatch.label": "TypeScript problems (watch mode)",
			"typescript.referencesCodeLens.enabled": "Enable/disable references CodeLens in TypeScript files.",
			"typescript.referencesCodeLens.showOnAllFunctions": "Enable/disable references CodeLens on all functions in TypeScript files.",
			"typescript.removeUnusedImports": "Remove Unused Imports",
			"typescript.reportStyleChecksAsWarnings": "Report style checks as warnings.",
			"typescript.restartTsServer": "Restart TS server",
			"typescript.selectTypeScriptVersion.title": "Select TypeScript Version...",
			"typescript.sortImports": "Sort Imports",
			"typescript.suggest.enabled": "Enabled/disable autocomplete suggestions.",
			"typescript.suggestionActions.enabled": "Enable/disable suggestion diagnostics for TypeScript files in the editor.",
			"typescript.tsc.autoDetect": "Controls auto detection of tsc tasks.",
			"typescript.tsc.autoDetect.build": "Only create single run compile tasks.",
			"typescript.tsc.autoDetect.off": "Disable this feature.",
			"typescript.tsc.autoDetect.on": "Create both build and watch tasks.",
			"typescript.tsc.autoDetect.watch": "Only create compile and watch tasks.",
			"typescript.tsdk.desc": "Specifies the folder path to the tsserver and `lib*.d.ts` files under a TypeScript install to use for IntelliSense, for example: `./node_modules/typescript/lib`.\r\n\r\n- When specified as a user setting, the TypeScript version from `typescript.tsdk` automatically replaces the built-in TypeScript version.\r\n- When specified as a workspace setting, `typescript.tsdk` allows you to switch to use that workspace version of TypeScript for IntelliSense with the `TypeScript: Select TypeScript version` command.\r\n\r\nSee the [TypeScript documentation](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions) for more detail about managing TypeScript versions.",
			"typescript.tsserver.enableTracing": "Enables tracing TS server performance to a directory. These trace files can be used to diagnose TS Server performance issues. The log may contain file paths, source code, and other potentially sensitive information from your project.",
			"typescript.tsserver.log": "Enables logging of the TS server to a file. This log can be used to diagnose TS Server issues. The log may contain file paths, source code, and other potentially sensitive information from your project.",
			"typescript.tsserver.pluginPaths": "Additional paths to discover TypeScript Language Service plugins.",
			"typescript.tsserver.pluginPaths.item": "Either an absolute or relative path. Relative path will be resolved against workspace folder(s).",
			"typescript.tsserver.trace": "Enables tracing of messages sent to the TS server. This trace can be used to diagnose TS Server issues. The trace may contain file paths, source code, and other potentially sensitive information from your project.",
			"typescript.updateImportsOnFileMove.enabled": "Enable/disable automatic updating of import paths when you rename or move a file in VS Code.",
			"typescript.updateImportsOnFileMove.enabled.always": "Always update paths automatically.",
			"typescript.updateImportsOnFileMove.enabled.never": "Never rename paths and don't prompt.",
			"typescript.updateImportsOnFileMove.enabled.prompt": "Prompt on each rename.",
			"typescript.validate.enable": "Enable/disable TypeScript validation.",
			"typescript.workspaceSymbols.scope": "Controls which files are searched by [go to symbol in workspace](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name).",
			"typescript.workspaceSymbols.scope.allOpenProjects": "Search all open JavaScript or TypeScript projects for symbols. Requires using TypeScript 3.9 or newer in the workspace.",
			"typescript.workspaceSymbols.scope.currentProject": "Only search for symbols in the current JavaScript or TypeScript project.",
			"virtualWorkspaces": "In virtual workspaces, resolving and finding references across files is not supported.",
			"walkthroughs.nodejsWelcome.debugJsFile.altText": "Debug and run your JavaScript code in Node.js with Visual Studio Code.",
			"walkthroughs.nodejsWelcome.debugJsFile.description": "Once you've installed Node.js, you can run JavaScript programs at a terminal by entering ``node your-file-name.js``\r\nAnother easy way to run Node.js programs is by using VS Code's debugger which lets you run your code, pause at different points, and help you understand what's going on step-by-step.\r\n[Start Debugging](command:javascript-walkthrough.commands.debugJsFile)",
			"walkthroughs.nodejsWelcome.debugJsFile.title": "Run and Debug your JavaScript",
			"walkthroughs.nodejsWelcome.description": "Make the most of Visual Studio Code's first-class JavaScript experience.",
			"walkthroughs.nodejsWelcome.downloadNode.forLinux.description": "Node.js is an easy way to run JavaScript code. You can use it to quickly build command-line apps and servers. It also comes with npm, a package manager which makes reusing and sharing JavaScript code easy.\r\n[Install Node.js](https://nodejs.org/en/download/package-manager/)",
			"walkthroughs.nodejsWelcome.downloadNode.forLinux.title": "Install Node.js",
			"walkthroughs.nodejsWelcome.downloadNode.forMacOrWindows.description": "Node.js is an easy way to run JavaScript code. You can use it to quickly build command-line apps and servers. It also comes with npm, a package manager which makes reusing and sharing JavaScript code easy.\r\n[Install Node.js](https://nodejs.org/en/download/)",
			"walkthroughs.nodejsWelcome.downloadNode.forMacOrWindows.title": "Install Node.js",
			"walkthroughs.nodejsWelcome.learnMoreAboutJs.altText": "Learn more about JavaScript and Node.js in Visual Studio Code.",
			"walkthroughs.nodejsWelcome.learnMoreAboutJs.description": "Want to get more comfortable with JavaScript, Node.js, and VS Code? Be sure to check out our docs!\r\nWe've got lots of resources for learning [JavaScript](https://code.visualstudio.com/docs/nodejs/working-with-javascript) and [Node.js](https://code.visualstudio.com/docs/nodejs/nodejs-tutorial).\r\n\r\n[Learn More](https://code.visualstudio.com/docs/nodejs/nodejs-tutorial)",
			"walkthroughs.nodejsWelcome.learnMoreAboutJs.title": "Explore More",
			"walkthroughs.nodejsWelcome.makeJsFile.description": "Let's write our first JavaScript file. We'll have to create a new file and save it with the ``.js`` extension at the end of the file name.\r\n[Create a JavaScript File](command:javascript-walkthrough.commands.createJsFile)",
			"walkthroughs.nodejsWelcome.makeJsFile.title": "Create a JavaScript File",
			"walkthroughs.nodejsWelcome.title": "Get started with JavaScript and Node.js",
			"workspaceTrust": "The extension requires workspace trust when the workspace version is used because it executes code specified by the workspace."
		}
	}
}