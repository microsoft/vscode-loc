{
	"": [
		"--------------------------------------------------------------------------------------------",
		"Copyright (c) Microsoft Corporation. All rights reserved.",
		"Licensed under the MIT License. See License.txt in the project root for license information.",
		"--------------------------------------------------------------------------------------------",
		"Do not edit this file. It is machine generated."
	],
	"version": "1.0.0",
	"contents": {
		"dist/languageFeatures/codeLens/baseCodeLensProvider": {
			"referenceErrorLabel": "无法确定引用"
		},
		"dist/languageFeatures/codeLens/implementationsCodeLens": {
			"manyImplementationLabel": "{0} 个实现",
			"oneImplementationLabel": "1 个实现"
		},
		"dist/languageFeatures/codeLens/referencesCodeLens": {
			"manyReferenceLabel": "{0} 个引用",
			"oneReferenceLabel": "1 个引用"
		},
		"dist/languageFeatures/completions": {
			"acquiringTypingsDetail": "获取 IntelliSense 的 typings 定义。",
			"acquiringTypingsLabel": "正在获取 typings…",
			"autoImportLabel": "从 {0} 自动导入",
			"selectCodeAction": "选择要应用的代码操作"
		},
		"dist/languageFeatures/directiveCommentCompletions": {
			"ts-check": "在 JavaScript 文件中启用语义检查。必须在文件顶部。",
			"ts-expect-error": "禁止在文件的下一行显示 @ts-check 错误，预计至少存在一个错误。",
			"ts-ignore": "取消文件下一行的 @ts-check 错误提示。",
			"ts-nocheck": "在 JavaScript 文件中禁用语义检查。必须在文件顶部。"
		},
		"dist/languageFeatures/fileReferences": {
			"error.noResource": "查找文件引用失败。未提供资源。",
			"error.unknownFile": "查找文件引用失败。未知的文件类型。",
			"error.unsupportedLanguage": "查找文件引用失败。不支持的文件类型。",
			"error.unsupportedVersion": "查找文件引用失败。需要 TypeScript 4.2+。",
			"progress.title": "查找文件引用"
		},
		"dist/languageFeatures/fixAll": {
			"autoFix.label": "全部修复",
			"autoFix.missingImports.label": "添加所有缺少的导入",
			"autoFix.unused.label": "删除所有未使用的代码"
		},
		"dist/languageFeatures/jsDocCompletions": {
			"typescript.jsDocCompletionItem.documentation": "JSDoc 注释"
		},
		"dist/languageFeatures/organizeImports": {
			"organizeImportsAction.title": "整理 import 语句",
			"sortImportsAction.title": "对导入进行排序"
		},
		"dist/languageFeatures/quickFix": {
			"fixAllInFileLabel": "{0} (修复文件中所有)"
		},
		"dist/languageFeatures/refactor": {
			"extractConstant.disabled.reason": "无法提取当前所选内容",
			"extractConstant.disabled.title": "提取到常量",
			"extractFunction.disabled.reason": "无法提取当前所选内容",
			"extractFunction.disabled.title": "提取到函数",
			"refactor.documentation.title": "了解有关 JS/TS 重构功能的更多详细信息",
			"refactoringFailed": "无法应用重构"
		},
		"dist/languageFeatures/rename": {
			"fileRenameFail": "重命名文件时出错"
		},
		"dist/languageFeatures/updatePathsOnRename": {
			"accept.title": "是",
			"always.title": "始终自动更新 import 语句",
			"moreFile": "...1 个其他文件未显示",
			"moreFiles": "...{0} 个其他文件未显示",
			"never.title": "一律不更新 import 语句",
			"prompt": "是否更新“{0}”的导入?",
			"promptMoreThanOne": "是否更新以下 {0} 个文件的导入?",
			"reject.title": "否",
			"renameProgress.title": "正在检查 JS/TS import 语句的更新"
		},
		"dist/task/taskProvider": {
			"badTsConfig": "tasks.json 中的 Typescript 任务包含 \"\\\\\"。Typescript 任务的 tsconfig 必须使用 \"/\"",
			"buildAndWatchTscLabel": "监视 - {0}",
			"buildTscLabel": "构建 - {0}"
		},
		"dist/tsServer/serverProcess.electron": {
			"noServerFound": "路径 {0} 未指向有效的 tsserver 安装。请回退到捆绑的 TypeScript 版本。"
		},
		"dist/tsServer/versionManager": {
			"allow": "允许",
			"dismiss": "取消",
			"learnMore": "了解有关管理 TypeScript 版本的更多信息",
			"promptUseWorkspaceTsdk": "此工作区包含一个 TypeScript 版本。是否要对 TypeScript 和 JavaScript 语言功能使用工作区 TypeScript 版本?",
			"selectTsVersion": "选择用于 JavaScript 和 TypeScript 语言功能的 TypeScript 版本",
			"suppress prompt": "绝不在此工作区中",
			"useVSCodeVersionOption": "使用 VS Code 的版本",
			"useWorkspaceVersionOption": "使用工作区版本"
		},
		"dist/typescriptServiceClient": {
			"noServerFound": "路径 {0} 未指向有效的 tsserver 安装。请回退到捆绑的 TypeScript 版本。",
			"openTsServerLog.openFileFailedFailed": "无法打开 TS 服务器日志文件",
			"serverDied": "在过去 5 分钟内，TypeScript 语言服务意外中止了 5 次。",
			"serverDiedAfterStart": "TypeScript 语言服务在其启动后已中止 5 次。将不会重启该服务。",
			"serverDiedOnce": "TypeScript 语言服务意外终止。",
			"serverDiedReportIssue": "报告问题",
			"serverExitedWithError": "TypeScript 语言服务器因错误而退出。错误消息: {0}",
			"serverLoading.progress": "正在初始化 JS/TS 语言功能",
			"typescript.openTsServerLog.enableAndReloadOption": "启用日志记录并重启 TS 服务器",
			"typescript.openTsServerLog.loggingNotEnabled": "TS 服务器日志已关闭。请设置 \"typescript.tsserver.log\" 并重启 TS 服务器以启用日志",
			"typescript.openTsServerLog.noLogFile": "TS 服务器尚未启动日志记录。",
			"usingOldTsVersion.detail": "工作区正在使用旧版本的 TypeScript ({0})。\r\n\r\n 报告问题之前，请更新工作区以使用最新的稳定 TypeScript 版本，以确保 bug 尚未修复。",
			"usingOldTsVersion.title": "请更新 TypeScript 版本"
		},
		"dist/ui/intellisenseStatus": {
			"pending.detail": "正在加载 IntelliSense 状态",
			"resolved.command.title.createJsconfig": "创建 jsconfig",
			"resolved.command.title.createTsconfig": "创建 tsconfig",
			"resolved.command.title.open": "打开配置文件",
			"resolved.detail.noJsConfig": "无 jsconfig",
			"resolved.detail.noTsConfig": "无 tsconfig",
			"statusItem.name": "JS/TS IntelliSense 状态",
			"syntaxOnly.command.title.learnMore": "了解详细信息",
			"syntaxOnly.detail": "Project Wide IntelliSense 不可用",
			"syntaxOnly.text": "部分模式"
		},
		"dist/ui/versionStatus": {
			"versionStatus.command": "选择版本",
			"versionStatus.detail": "TypeScript 版本",
			"versionStatus.name": "TypeScript 版本"
		},
		"dist/utils/api": {
			"invalidVersion": "无效版本"
		},
		"dist/utils/logger": {
			"channelName": "TypeScript"
		},
		"dist/utils/tsconfig": {
			"typescript.configureJsconfigQuickPick": "配置 jsconfig.json",
			"typescript.configureTsconfigQuickPick": "配置 tsconfig.json",
			"typescript.noJavaScriptProjectConfig": "文件不属于 JavaScript 项目。点击[这里]({0})了解更多。",
			"typescript.noTypeScriptProjectConfig": "文件不属于 TypeScript 项目。点击[这里]({0})了解更多。",
			"typescript.projectConfigCouldNotGetInfo": "无法确定 TypeScript 或 JavaScript 项目",
			"typescript.projectConfigNoWorkspace": "请在 VS Code 中打开一个文件夹，以使用 TypeScript 或 JavaScript 项目",
			"typescript.projectConfigUnsupportedFile": "无法确定 TypeScript 或 JavaScript 项目。不受支持的文件类型"
		},
		"package": {
			"codeActions.refactor.extract.constant.description": "将表达式提取为常量。",
			"codeActions.refactor.extract.constant.title": "分离常量",
			"codeActions.refactor.extract.function.description": "将表达式提取到方法或函数。",
			"codeActions.refactor.extract.function.title": "提取函数",
			"codeActions.refactor.extract.interface.description": "将类型提取到接口。",
			"codeActions.refactor.extract.interface.title": "提取接口",
			"codeActions.refactor.extract.type.description": "将类型提取为类型别名。",
			"codeActions.refactor.extract.type.title": "提取类型",
			"codeActions.refactor.move.newFile.description": "将表达式移动到新文件。",
			"codeActions.refactor.move.newFile.title": "移动到新的文件",
			"codeActions.refactor.rewrite.arrow.braces.description": "在箭头函数中添加或删除大括号。",
			"codeActions.refactor.rewrite.arrow.braces.title": "重写箭头大括号",
			"codeActions.refactor.rewrite.export.description": "在默认导出和命名导出之间进行转换。",
			"codeActions.refactor.rewrite.export.title": "转换导出",
			"codeActions.refactor.rewrite.import.description": "在命名导入和命名空间导入之间进行转换。",
			"codeActions.refactor.rewrite.import.title": "转换导入",
			"codeActions.refactor.rewrite.parameters.toDestructured.title": "将参数转换为析构对象",
			"codeActions.refactor.rewrite.property.generateAccessors.description": "生成 \"get\" 和 \"set\" 访问器",
			"codeActions.refactor.rewrite.property.generateAccessors.title": "生成访问器",
			"codeActions.source.organizeImports.title": "整理 import 语句",
			"configuration.implicitProjectConfig.checkJs": "启用或禁用 JavaScript 文件的语义检查。现有 `jsconfig.json` 或 `tsconfig.json` 文件将覆盖此设置。",
			"configuration.implicitProjectConfig.experimentalDecorators": "在不属于任何工程的 JavaScript 文件中启用或禁用 `experimentalDecorators`。现有 `jsconfig.json` 或 `tsconfig.json` 文件将覆盖此设置。",
			"configuration.implicitProjectConfig.strictFunctionTypes": "在不属于项目的 JavaScript 和 TypeScript 文件中启用/禁用[严格函数类型](https://www.typescriptlang.org/tsconfig#strictFunctionTypes)。现有 `jsconfig.json` 或 `tsconfig.json` 文件将替代此设置。",
			"configuration.implicitProjectConfig.strictNullChecks": "在不属于项目的 JavaScript 和 TypeScript 文件中启用/禁用[严格 null 检查](https://www.typescriptlang.org/tsconfig#strictNullChecks)。现有 `jsconfig.json` 或 `tsconfig.json` 文件将替代此设置。",
			"configuration.inlayHints.enumMemberValues.enabled": "启用/禁用枚举声明中成员值的嵌入提示: \r\n```typescript\r\n\r\nenum MyValue {\r\n\tA /* = 0 */;\r\n\tB /* = 1 */;\r\n}\r\n \r\n```\r\n需要在工作区中使用 TypeScript 4.4+。",
			"configuration.inlayHints.functionLikeReturnTypes.enabled": "启用/禁用函数签名上隐式返回类型的 inlay 提示: \r\n```typescript\r\n\r\nfunction foo() /* :number */ {\r\n\treturn Date.now();\r\n} \r\n \r\n```\r\n需要在工作区中使用 TypeScript 4.4+。",
			"configuration.inlayHints.parameterNames.enabled": "启用/禁用参数名的 inlay 提示: \r\n```typescript\r\n\r\nparseInt(/* str: */ '123', /* radix: */ 8)\r\n \r\n```\r\n需要在工作区中使用 TypeScript 4.4+。",
			"configuration.inlayHints.parameterNames.suppressWhenArgumentMatchesName": "对于文本与参数名称完全相同的参数，抑制其参数名称提示。",
			"configuration.inlayHints.parameterTypes.enabled": "启用/禁用隐式参数类型的 inlay 提示: \r\n```typescript\r\n\r\nel.addEventListener('click', e /* :MouseEvent */ => ...)\r\n \r\n```\r\n需要在工作区中使用 TypeScript 4.4+。",
			"configuration.inlayHints.propertyDeclarationTypes.enabled": "在属性声明上启用/禁用隐式类型的内嵌提示:\r\n```typescript\r\n\r\nclass Foo {\r\n\tprop /* :number */ = Date.now();\r\n}\r\n \r\n```\r\n需要在工作区中使用 TypeScript 4.4+。",
			"configuration.inlayHints.variableTypes.enabled": "启用/禁用隐式变量类型的 inlay 提示: \r\n```typescript\r\n\r\nconst foo /* :number */ = Date.now();\r\n \r\n```\r\n要求在工作区中使用 TypeScript 4.4+。",
			"configuration.javascript.checkJs.checkJs.deprecation": "为支持 `js/ts.implicitProjectConfig.checkJs`，已弃用此设置。",
			"configuration.javascript.checkJs.experimentalDecorators.deprecation": "为支持 `js/ts.implicitProjectConfig.experimentalDecorators`，已弃用此设置。",
			"configuration.suggest.autoImports": "启用/禁用自动导入建议。",
			"configuration.suggest.classMemberSnippets.enabled": "启用/禁用类成员的代码段完成。需要在工作区中使用 TypeScript 4.5+",
			"configuration.suggest.completeFunctionCalls": "完成函数的参数签名。",
			"configuration.suggest.completeJSDocs": "启用/禁用对完成 JSDoc 注释的建议。",
			"configuration.suggest.includeAutomaticOptionalChainCompletions": "启用/禁用显示可能未定义的值的完成情况，这些值会插入可选的链式调用。需要启用 TS 3.7+ 和严格的空检查。",
			"configuration.suggest.includeCompletionsForImportStatements": "在部分键入的导入语句上启用/禁用自动导入样式的补全。需要在工作区中使用 TypeScript 4.3+。",
			"configuration.suggest.includeCompletionsWithSnippetText": "从 TS 服务器启用/禁用片段补全。需要在工作区中使用 TypeScript 4.3+。",
			"configuration.suggest.jsdoc.generateReturns": "启用/禁用生成 JSDoc 模板的 \"@return\" 批注。需要在工作区中使用 TypeScript 4.2+。",
			"configuration.suggest.names": "启用/禁用在 JavaScript 建议中包含文件中的唯一名称。请注意，在使用`@ts-check`或`checkJs`进行语义检查的 JavaScript 代码中，名称建议始终处于禁用状态。",
			"configuration.suggest.paths": "在 import 语句和 require 调用中，启用或禁用路径建议。",
			"configuration.surveys.enabled": "启用或禁用偶尔出现的有关 JavaScript 和 TypeScript 的调查，帮助我们改善 VS Code 对两者的支持。",
			"configuration.tsserver.experimental.enableProjectDiagnostics": "(实验性)启用项目范围的错误报告。",
			"configuration.tsserver.maxTsServerMemory": "要分配给 TypeScript 服务器进程的最大内存量(MB)。",
			"configuration.tsserver.useSeparateSyntaxServer": "允许/禁止生成单独的 TypeScript 服务器，该服务器可更快地响应与语法相关的操作，例如计算折叠或计算文档符号。需要在工作区中使用 TypeScript 3.4.0 或更高版本。",
			"configuration.tsserver.useSeparateSyntaxServer.deprecation": "此设置已弃用，取而代之的是“typescript.tsserver.useSyntaxServer”。",
			"configuration.tsserver.useSyntaxServer": "控制 TypeScript 是否启动专用服务器，以便更快地处理与语法相关的运算，如计算代码折叠。",
			"configuration.tsserver.useSyntaxServer.always": "使用更加轻量级的语法服务器来处理所有 IntelliSense 运算。此语法服务器只能为打开的文件提供 IntelliSense。",
			"configuration.tsserver.useSyntaxServer.auto": "生成一个完整的服务器和一个专用于语法运算的轻量级服务器。语法服务器用于加快语法运算并在加载项目时提供 IntelliSense。",
			"configuration.tsserver.useSyntaxServer.never": "请不要使用专用的语法服务器。使用单个服务器来处理所有 IntelliSense 运算。",
			"configuration.tsserver.watchOptions": "配置应使用哪些监视策略来跟踪文件和目录。需要在工作区中使用 TypeScript 3.8+。",
			"configuration.tsserver.watchOptions.fallbackPolling": "使用文件系统事件时，此选项指定当系统用完本机文件观察程序和/或不支持本机文件观察程序时使用的轮询策略。",
			"configuration.tsserver.watchOptions.fallbackPolling.dynamicPriorityPolling ": "使用动态队列，在该队列中，较少检查不经常修改的文件。",
			"configuration.tsserver.watchOptions.fallbackPolling.fixedPollingInterval": "以固定间隔每秒多次检查每个文件的更改。",
			"configuration.tsserver.watchOptions.fallbackPolling.priorityPollingInterval": "每秒检查每个文件有无多次更改，但使用启发式方法检查某些类型的文件的频率低于其他文件类型。",
			"configuration.tsserver.watchOptions.synchronousWatchDirectory": "禁用目录上的延迟监视。当可能同时发生大量文件更改(例如，运行 npm install 导致的 node_modules 更改)时，延迟监视非常有用，但是对于一些不太常见的设置，可能需要使用此标志将其禁用。",
			"configuration.tsserver.watchOptions.watchDirectory": "在缺乏递归文件监视功能的系统中监视整个目录树的策略。",
			"configuration.tsserver.watchOptions.watchDirectory.dynamicPriorityPolling": "使用动态队列，其中较少修改的目录将较少检查。",
			"configuration.tsserver.watchOptions.watchDirectory.fixedChunkSizePolling": "按固定间隔时间成块轮询目录。需要在工作区中使用 TypeScript 4.3+。",
			"configuration.tsserver.watchOptions.watchDirectory.fixedPollingInterval": "以固定间隔每秒多次检查每个目录的更改。",
			"configuration.tsserver.watchOptions.watchDirectory.useFsEvents": "尝试使用操作系统/文件系统的本机事件进行目录更改。",
			"configuration.tsserver.watchOptions.watchFile": "如何监视单个文件的策略。",
			"configuration.tsserver.watchOptions.watchFile.dynamicPriorityPolling": "使用动态队列，在该队列中，较少检查不经常修改的文件。",
			"configuration.tsserver.watchOptions.watchFile.fixedChunkSizePolling": "按固定间隔时间成块轮询文件。需要在工作区中使用 TypeScript 4.3+。",
			"configuration.tsserver.watchOptions.watchFile.fixedPollingInterval": "以固定间隔每秒多次检查每个文件的更改。",
			"configuration.tsserver.watchOptions.watchFile.priorityPollingInterval": "每秒多次检查每个文件的更改，但使用启发方法按不同频率检查不同类型的文件。",
			"configuration.tsserver.watchOptions.watchFile.useFsEvents": "尝试使用操作系统/文件系统的本机事件进行文件更改。",
			"configuration.tsserver.watchOptions.watchFile.useFsEventsOnParentDirectory": "尝试使用操作系统/文件系统的本机事件来侦听文件包含目录的更改。此操作可减少使用的文件观察程序数量，但准确度可能较低。",
			"configuration.typescript": "TypeScript",
			"description": "为 JavaScript 和 TypeScript 提供丰富的语言支持。",
			"displayName": "JavaScript 和 TypeScript 的语言功能",
			"format.insertSpaceAfterCommaDelimiter": "定义逗号分隔符后面的空格处理。",
			"format.insertSpaceAfterConstructor": "定义构造函数关键字后面的空格处理方式。",
			"format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": "定义匿名函数的函数关键字后面的空格处理。",
			"format.insertSpaceAfterKeywordsInControlFlowStatements": "定义控制流语句中关键字后面的空格处理。",
			"format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": "定义空大括号中左括号后和右括号前的空格处理方式。",
			"format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": "定义 JSX 表达式括号中左括号后和右括号前的空格处理方式。",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": "定义非空大括号中左括号后和右括号前的空格处理方式。",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": "定义非空中括号的左括号后和右括号前的空格处理方式。",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": "定义非空小括号的左括号后和右括号前的空格处理方式。",
			"format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": "定义模板字符串括号中左括号后和右括号前的空格处理方式。",
			"format.insertSpaceAfterSemicolonInForStatements": "定义 for 语句中分号之后的空格处理方式。",
			"format.insertSpaceAfterTypeAssertion": "定义 TypeScript 中类型断言后的空格处理方式。",
			"format.insertSpaceBeforeAndAfterBinaryOperators": "定义二进制运算符后面的空格处理",
			"format.insertSpaceBeforeFunctionParenthesis": "定义函数参数括号前的空格处理方式。",
			"format.placeOpenBraceOnNewLineForControlBlocks": "定义控制块的左括号是否放置在新的一行。",
			"format.placeOpenBraceOnNewLineForFunctions": "定义函数的左大括号是否放置在新的一行。",
			"format.semicolons": "定义非必要分号的处理方式。要求在工作区内使用 TypeScript 3.7 或更高版本。",
			"format.semicolons.ignore": "不要插入或删除任何分号。",
			"format.semicolons.insert": "在语句末尾插入分号。",
			"format.semicolons.remove": "删除不必要的分号。",
			"goToProjectConfig.title": "转到项目配置",
			"inlayHints.parameterNames.all": "启用文本和非文本参数的参数名称提示。",
			"inlayHints.parameterNames.literals": "仅启用文本参数的参数名称提示。",
			"inlayHints.parameterNames.none": "禁用参数名称提示。",
			"javascript.format.enable": "启用/禁用 JavaScript 格式化程序。",
			"javascript.referencesCodeLens.enabled": "启用/禁用在 JavaScript 文件中引用 CodeLens。",
			"javascript.referencesCodeLens.showOnAllFunctions": "启用/禁用在 JavaScript 文件中对所有函数的 CodeLens 引用。",
			"javascript.suggestionActions.enabled": "启用或禁用编辑器中 JavaScript 文件的建议诊断。",
			"javascript.validate.enable": "启用/禁用 JavaScript 验证。",
			"reloadProjects.title": "重载项目",
			"taskDefinition.tsconfig.description": "定义 ts 生成的 tsconfig 文件。",
			"typescript.autoClosingTags": "启用/禁用 JSX 标记的自动关闭。",
			"typescript.check.npmIsInstalled": "检查是否为 [自动类型获取](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition) 安装了 npm 。",
			"typescript.disableAutomaticTypeAcquisition": "禁用 [自动类型获取](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition) 。自动类型获取可以从 npm 提取 `@types` 包来改进外部库的 IntelliSense。",
			"typescript.enablePromptUseWorkspaceTsdk": "允许提示用户对 Intellisense 使用在工作区中配置的 TypeScript 版本。",
			"typescript.findAllFileReferences": "查找文件引用",
			"typescript.format.enable": "启用/禁用默认 TypeScript 格式化程序。",
			"typescript.implementationsCodeLens.enabled": "启用或禁用实现 CodeLens。此 CodeLens 显示接口的实现。",
			"typescript.locale": "设置在报告 JavaScript 和 TypeScript 错误时使用的区域设置。默认使用 VS Code 的区域设置。",
			"typescript.npm": "指定为 [自动类型获取] 使用的 npm 可执行文件的路径 (https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition)。",
			"typescript.openTsServerLog.title": "打开 TS 服务器日志",
			"typescript.preferences.importModuleSpecifier": "自动 import 语句中路径的首选样式。",
			"typescript.preferences.importModuleSpecifier.nonRelative": "根据在 `jsconfig.json` / `tsconfig.json` 中配置的 `baseUrl` 或 `paths` 首选不相关导入。",
			"typescript.preferences.importModuleSpecifier.projectRelative": "仅当相关导入路径将离开包或项目目录时，才首选不相关导入。需要在工作区中使用 TypeScript 4.2+。",
			"typescript.preferences.importModuleSpecifier.relative": "首选导入文件位置的相对路径。",
			"typescript.preferences.importModuleSpecifier.shortest": "仅当有路径段少于相关导入路径段的不相关导入时，才首选不相关导入。",
			"typescript.preferences.importModuleSpecifierEnding": "自动导入的首选路径结尾。需要在工作区中使用 TypeScript 4.5+。",
			"typescript.preferences.importModuleSpecifierEnding.auto": "使用项目设置选择默认值。",
			"typescript.preferences.importModuleSpecifierEnding.index": "将 \"./component/index.js\" 缩短为 \"./component/index\"。",
			"typescript.preferences.importModuleSpecifierEnding.js": "不要缩短路径结尾;包括\".js\"扩展名。",
			"typescript.preferences.importModuleSpecifierEnding.minimal": "将 \"./component/index.js\" 缩短为 \"./component\"。",
			"typescript.preferences.includePackageJsonAutoImports": "允许/禁止在 \"package.json\" 依赖项中搜索可用的自动导入。",
			"typescript.preferences.includePackageJsonAutoImports.auto": "根据预估的性能影响搜索依赖项。",
			"typescript.preferences.includePackageJsonAutoImports.off": "从不搜索依赖项。",
			"typescript.preferences.includePackageJsonAutoImports.on": "始终搜索依赖项。",
			"typescript.preferences.jsxAttributeCompletionStyle": "JSX 属性完成的首选样式。",
			"typescript.preferences.jsxAttributeCompletionStyle.auto": "根据属性类型在属性名称后插入 `={}` 或 `=\"\"`。",
			"typescript.preferences.jsxAttributeCompletionStyle.braces": "在属性名称后插入 `={}`。",
			"typescript.preferences.jsxAttributeCompletionStyle.none": "仅插入属性名称。",
			"typescript.preferences.quoteStyle": "用于快速修复的首选引用样式: `single` (单引号)、`double` (双引号) 或 `auto` (从已有 import 语句中推测引号类型)。",
			"typescript.preferences.renameShorthandProperties.deprecationMessage": "设置 \"typescript.preferences.renameShorthandProperties\" 已被弃用，取而代之的是 \"typescript.preferences.useAliasesForRenames\"",
			"typescript.preferences.useAliasesForRenames": "允许/禁止在重命名期间向对象速记属性引入别名。需要在工作区中使用 TypeScript 3.4 或更高版本。",
			"typescript.problemMatchers.tsc.label": "TypeScript 问题",
			"typescript.problemMatchers.tscWatch.label": "TypeScript 问题(观看模式)",
			"typescript.referencesCodeLens.enabled": "在 TypeScript 文件中启用或禁用引用 CodeLens。",
			"typescript.referencesCodeLens.showOnAllFunctions": "启用/禁用在 TypeScript 文件中的所有函数上引用 CodeLens。",
			"typescript.reportStyleChecksAsWarnings": "将风格检查的问题报告为警告。",
			"typescript.restartTsServer": "重启 TS 服务器",
			"typescript.selectTypeScriptVersion.title": "选择 TypeScript 版本...",
			"typescript.suggest.enabled": "启用或禁用自动完成建议。",
			"typescript.suggestionActions.enabled": "启用或禁用编辑器中 TypeScript 文件的建议诊断。",
			"typescript.tsc.autoDetect": "控制对 tsc 任务的自动检测。",
			"typescript.tsc.autoDetect.build": "仅创建单次运行编译任务。",
			"typescript.tsc.autoDetect.off": "禁用此功能。",
			"typescript.tsc.autoDetect.on": "同时创建生成和监视任务。",
			"typescript.tsc.autoDetect.watch": "仅创建编译和监视任务。",
			"typescript.tsdk.desc": "指定 TypeScript 安装下用于 IntelliSense 的 tsserver 和 `lib*.d.ts` 文件的文件夹路径，例如: `./node_modules/typescript/lib`。\r\n\r\n- 当指定为用户设置时，`typescript.tsdk` 中的 TypeScript 版本会自动替换内置的 TypeScript 版本。\r\n- 当指定为工作区设置时，`typescript.tsdk` 允许通过 `TypeScript: Select TypeScript version` 命令切换为对 IntelliSense 使用 TypeScript 的该工作区版本。\r\n\r\n有关管理 TypeScript 版本的更多详细信息，请参阅 [TypeScript文档](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions)。",
			"typescript.tsserver.enableTracing": "允许将 TS 服务器性能跟踪保持到目录。这些跟踪文件可用于诊断 TS 服务器性能问题。日志可能包含你的项目中的文件路径、源代码和其他可能敏感的信息。",
			"typescript.tsserver.log": "将 TS 服务器的日志保存到一个文件。此日志可用于诊断 TS 服务器问题。日志可能包含你的项目中的文件路径、源代码和其他可能敏感的信息。",
			"typescript.tsserver.pluginPaths": "其他用于搜索 TypeScript 语言服务插件的路径。",
			"typescript.tsserver.pluginPaths.item": "相对或绝对路径。相对路径将根据工作区文件夹进行解析。",
			"typescript.tsserver.trace": "对发送到 TS 服务器的消息启用跟踪。此跟踪信息可用于诊断 TS 服务器问题。 跟踪信息可能包含你的项目中的文件路径、源代码和其他可能敏感的信息。",
			"typescript.updateImportsOnFileMove.enabled": "启用或禁用在 VS Code 中重命名或移动文件时自动更新导入路径的功能。",
			"typescript.updateImportsOnFileMove.enabled.always": "始终自动更新路径。",
			"typescript.updateImportsOnFileMove.enabled.never": "一律不要重命名路径，也不要提示。",
			"typescript.updateImportsOnFileMove.enabled.prompt": "在每次重命名时进行提示。",
			"typescript.validate.enable": "启用/禁用 TypeScript 验证。",
			"typescript.workspaceSymbols.scope": "通过[转到工作区中的符号](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name)来控制搜索的具体文件。",
			"typescript.workspaceSymbols.scope.allOpenProjects": "在所有打开的 JavaScript 或 TypeScript 项目中搜索符号。需要在工作区中使用 TypeScript 3.9 或更高版本。",
			"typescript.workspaceSymbols.scope.currentProject": "仅在当前 JavaScript 或 TypeScript 项目中搜索符号。",
			"virtualWorkspaces": "在虚拟工作区中，不支持解析和查找跨文件的引用。",
			"workspaceTrust": "使用工作区版本时，扩展需要工作区信任，因为它会执行工作区指定的代码。"
		}
	}
}